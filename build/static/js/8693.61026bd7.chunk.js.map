{"version":3,"file":"static/js/8693.61026bd7.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/a11y.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/text-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakpointCustom.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-checkbox/checkbox-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-checkbox/dc-ui-checkbox.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/font.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/getStateColors.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/common/state-message/state-message.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/styles/form-state-color-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/common/state-message/state-message-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/styles.ts"],"sourcesContent":["import { AriaAttributes } from '../types';\r\n\r\nexport const removeAttribute = (el: HTMLElement, attributeName: string): void => {\r\n  el.removeAttribute(attributeName);\r\n};\r\n\r\nexport const setAttribute = (el: HTMLElement, attributeName: string, attributeValue = ''): void => {\r\n  el.setAttribute(attributeName, attributeValue);\r\n};\r\n\r\nexport type SetAriaAttributesOptions = {\r\n  label?: string;\r\n  message?: string;\r\n};\r\n\r\nexport const parseJSONAttribute = <T>(attribute: T | string): T => {\r\n  return typeof attribute === 'string'\r\n    ? // input is potentially JSON parsable string, e.g. \"{ aria-label: 'Some label' }\"\r\n      JSON.parse(\r\n        attribute\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([\\w-]+)[\\s\"]?:/g, '\"$1\":') // wrap keys in double quotes\r\n      )\r\n    : // input is object, e.g. { aria-label: 'Some label' }\r\n      attribute;\r\n};\r\n\r\nexport const setAriaAttributes = (el: HTMLElement, opts: SetAriaAttributesOptions): void => {\r\n  const { label, message } = opts;\r\n  if (label) {\r\n    setAttribute(el, 'aria-label', `${label}${message ? `. ${message}` : ''}`);\r\n  }\r\n};\r\n\r\nexport const parseAndGetAriaAttributes = (\r\n  rawAttributes: AriaAttributes | string\r\n): AriaAttributes => {\r\n  if (rawAttributes) {\r\n    const attributes = parseJSONAttribute(rawAttributes);\r\n    const attributeKeys = Object.keys(attributes);\r\n\r\n    // convert booleans to strings so that values are properly set and not just result in attributes without a value when true in jsx\r\n    for (const key of attributeKeys) {\r\n      if (typeof attributes[key] === 'boolean') {\r\n        attributes[key] = `${attributes[key]}`;\r\n      }\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n};\r\n","export const FULL_TEXT_STYLES = {\r\n  'h-superbig': {\r\n    lg: {\r\n      fontSize: '72px',\r\n      lineHeight: '90px',\r\n    },\r\n    md: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    base: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'h-big': {\r\n    lg: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    md: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    base: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h1: {\r\n    lg: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    md: {\r\n      fontSize: '36px',\r\n      lineHeight: '48px',\r\n    },\r\n    base: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h2: {\r\n    lg: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n    },\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h3: {\r\n    lg: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n    },\r\n    base: {\r\n      fontSize: '24px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h4: {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h5: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h6: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-text': {\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-additional-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'intro-text': {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n    },\r\n  },\r\n  'text-line-spacing-big': {\r\n    base: {\r\n      fontSize: '18px',\r\n      lineHeight: '28px',\r\n    },\r\n  },\r\n  text: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'strong-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'strong-mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n  'strong-small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'btn-small': {\r\n    base: {\r\n      fontSize: '0.75rem',\r\n      lineHeight: '1rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '20px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-large': {\r\n    base: {\r\n      fontSize: '1.25rem',\r\n      lineHeight: '1.375rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'link-small': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'link-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'label-checkbox': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'label-textarea': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'label-input': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      letterSpacing: '0.32px',\r\n      lineHeight: '13px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'state-message': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { JssStyle, Styles } from 'jss';\r\nimport { TBreakpointNames, mediaQueryMin } from './mediaQuery';\r\nimport { FULL_TEXT_STYLES } from '../variables';\r\n\r\nexport const BREAKPOINTS = ['base', 'xs', 'sm', 'md', 'lg', 'xl'] as const;\r\nexport type BreakpointKey = (typeof BREAKPOINTS)[number];\r\nexport type BreakpointValues<T> = {\r\n  [key in BreakpointKey]?: T;\r\n} & {\r\n  base: T;\r\n};\r\n\r\n// string is needed in order to pass and parse objects via prop decorator\r\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\r\nexport type BreakpointValue = string | number | boolean;\r\n\r\nexport const parseJSON = (\r\n  prop: BreakpointCustomizable<BreakpointValue>\r\n): BreakpointValues<BreakpointValue> | BreakpointValue => {\r\n  if (typeof prop === 'string') {\r\n    try {\r\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\r\n      return JSON.parse(\r\n        prop\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\r\n      );\r\n    } catch {\r\n      // prop is string, e.g. \"block\" or \"inline\"\r\n      return prop;\r\n    }\r\n  } else {\r\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\r\n    return prop;\r\n  }\r\n};\r\n\r\n// do we need that ?\r\nexport const addImportantToRule = (value: any): string => `${value} !important`;\r\n\r\n// do we need that ?\r\nexport const addImportantToEachRule = (input: JssStyle): JssStyle => {\r\n  return Object.entries(input).reduce(\r\n    (result, [key, value]) =>\r\n      value === null\r\n        ? result\r\n        : ((result[key] =\r\n            typeof value === 'object'\r\n              ? addImportantToEachRule(value as JssStyle)\r\n              : addImportantToRule(value)),\r\n          result),\r\n    {} as JssStyle\r\n  );\r\n};\r\n\r\nexport type GetJssStyleFunction = (value?: any) => JssStyle;\r\nexport type GetJssStyleFunctionWithProp = (value: any, ...args: any[]) => JssStyle;\r\n\r\nexport const buildResponsiveStyles = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunction\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue]\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base) as Styles\r\n          )\r\n      : (getJssStyle(value) as Styles);\r\n\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveStylesWithProps = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunctionWithProp,\r\n  extraProp: string,\r\n  ...args: any[]\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue],\r\n                extraProp,\r\n                ...args\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base, extraProp, ...args) as Styles\r\n          )\r\n      : (getJssStyle(value, extraProp, ...args) as Styles);\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveTextStyles = (styleName: string) => {\r\n  const fontObject = FULL_TEXT_STYLES[styleName];\r\n  if (!fontObject) {\r\n    throw new Error(`Text style ${styleName} does not exist`);\r\n  }\r\n\r\n  let styles = {};\r\n\r\n  // itterate over fontObject\r\n  Object.keys(fontObject).forEach((key) => {\r\n    // check if key is 'base'\r\n    if (key === 'base') {\r\n      styles = {\r\n        ...styles,\r\n        ...fontObject[key],\r\n      };\r\n      return;\r\n    }\r\n\r\n    // get media query from object key\r\n    const mediaQuery = mediaQueryMin(key as any);\r\n\r\n    // add styles from fontObject to mediaQuery\r\n    styles = {\r\n      ...styles,\r\n      [mediaQuery]: {\r\n        ...fontObject[key],\r\n      },\r\n    };\r\n  });\r\n\r\n  return styles;\r\n};\r\n","export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import {\r\n  getCss,\r\n  buildResponsiveStyles,\r\n  BreakpointCustomizable,\r\n  color as colorUtils,\r\n  getScreenReaderJssStyle,\r\n  getEllipsisJssStyle,\r\n  getDisabledCheckboxRadioTextJssStyle,\r\n  getStateColors,\r\n  TValidationState,\r\n  FULL_TEXT_STYLES,\r\n} from '../../utils';\r\nimport { getStateMessageStyles } from '../common/state-message/state-message-styles';\r\n\r\nexport const createStyles = (\r\n  hideLabel: BreakpointCustomizable<boolean>,\r\n  ellipsis: BreakpointCustomizable<boolean>,\r\n  disabled: boolean,\r\n  state: TValidationState\r\n): string => {\r\n  const baseColor = colorUtils.darkBlue02;\r\n  const stateColor = getStateColors(state);\r\n  const iconColor = colorUtils.white.replace(/#/g, '%23');\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'inline-block',\r\n        maxWidth: '100%',\r\n      },\r\n      label: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'relative',\r\n      },\r\n      '#checkbox-label': {\r\n        fontFamily: 'Bosch sans',\r\n        paddingLeft: '10px',\r\n        cursor: 'pointer',\r\n        ...FULL_TEXT_STYLES['label-checkbox'].base,\r\n        ...buildResponsiveStyles(hideLabel, getScreenReaderJssStyle),\r\n        ...buildResponsiveStyles(ellipsis, getEllipsisJssStyle),\r\n        ...getDisabledCheckboxRadioTextJssStyle(disabled),\r\n      },\r\n      '::slotted': {\r\n        '&(input)': {\r\n          position: 'static',\r\n          flexShrink: '0',\r\n          appearance: 'none',\r\n          WebkitAppearance: 'none', // iOS safari\r\n          display: 'block',\r\n          height: '1rem',\r\n          width: '1rem',\r\n          backgroundSize: '1rem',\r\n          borderRadius: '0',\r\n          border: `1px solid ${stateColor || baseColor}`,\r\n          margin: '0',\r\n          backgroundPosition: '-1px -1px',\r\n          cursor: 'pointer',\r\n          transition: 'all 0.2s ease-in-out 0.1s',\r\n          outline: `2px solid transparent`,\r\n          outlineOffset: '1px',\r\n        },\r\n\r\n        '&(input:checked)': {\r\n          backgroundColor: stateColor || baseColor,\r\n          backgroundImage: `url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"${iconColor}\" d=\"M222.19 392.16l-142.66-122.28 23.8-27.76 113.34 97.14 198.53-258.96 29.030 22.25z\" /></svg>')`,\r\n        },\r\n\r\n        '&(input:indeterminate)': {\r\n          backgroundColor: stateColor || baseColor,\r\n          backgroundImage: `url('data:image/svg+xml;charset=UTF-8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><path fill=\"${iconColor}\" d=\"M73.14 237.71h365.71v36.57h-365.71v-36.57z\"></path></svg>')`,\r\n        },\r\n\r\n        '&(input:focus)': {\r\n          outlineColor: colorUtils.turquoise03,\r\n        },\r\n\r\n        // needed for Safari\r\n        '&(input:focus:not(:focus-visible))': {\r\n          outlineColor: 'transparent',\r\n        },\r\n\r\n        '&(input:disabled)': {\r\n          cursor: 'default',\r\n          borderColor: colorUtils.grey03,\r\n        },\r\n\r\n        '&(input:checked:disabled)': {\r\n          cursor: 'default',\r\n          borderColor: colorUtils.grey03,\r\n          backgroundColor: colorUtils.grey03,\r\n        },\r\n      },\r\n    },\r\n    ...getStateMessageStyles(state),\r\n  });\r\n};\r\n","import { Component, h, Prop, Host, Element, forceUpdate } from '@stencil/core';\r\nimport {\r\n  BreakpointCustomizable,\r\n  injectCSS,\r\n  setAriaAttributes,\r\n  observeAttributes,\r\n  injectFont,\r\n  TValidationState,\r\n} from '../../utils';\r\nimport { createStyles } from './checkbox-styles';\r\nimport { StateMessage } from '../common/state-message/state-message';\r\n\r\n@Component({\r\n  tag: 'dc-ui-checkbox',\r\n  shadow: true,\r\n})\r\nexport class DcUiCheckbox {\r\n  @Element() el: HTMLElement;\r\n  @Prop() label: string;\r\n  @Prop() message = '';\r\n  @Prop() validationstate: TValidationState = 'none';\r\n  @Prop() ellipsis: BreakpointCustomizable<boolean>;\r\n  @Prop() hideLabel: BreakpointCustomizable<boolean>;\r\n\r\n  private input: HTMLInputElement;\r\n\r\n  private onLabelClick = (): void => {\r\n    this.input.click();\r\n  };\r\n\r\n  public componentWillLoad(): void {\r\n    injectFont();\r\n    this.input = this.el.querySelector('input[type=checkbox]');\r\n    this.observeAttributes(); // once initially\r\n  }\r\n\r\n  public connectedCallback(): void {\r\n    this.observeAttributes(); // on every reconnect\r\n  }\r\n\r\n  public componentDidRender(): void {\r\n    setAriaAttributes(this.input, {\r\n      label: this.label,\r\n      message: this.message,\r\n    });\r\n  }\r\n\r\n  private observeAttributes = (): void => {\r\n    observeAttributes(this.input, ['disabled', 'required'], () => forceUpdate(this.el));\r\n  };\r\n\r\n  render() {\r\n    injectCSS(\r\n      this.el,\r\n      createStyles,\r\n      this.hideLabel,\r\n      this.ellipsis,\r\n      this.input.disabled,\r\n      this.validationstate\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <label>\r\n          <slot />\r\n          {this.label && (\r\n            <span\r\n              id=\"checkbox-label\"\r\n              onClick={this.onLabelClick}>\r\n              {this.label}\r\n            </span>\r\n          )}\r\n        </label>\r\n        {this.validationstate !== 'none' && (\r\n          <StateMessage\r\n            state={this.validationstate}\r\n            message={this.message}></StateMessage>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export const font = {\r\n  url: 'https://dc-webtoolkit.azureedge.net/font/fontStyles.css',\r\n  family: 'Bosch Sans',\r\n  size: {\r\n    small: '1rem',\r\n    medium: '1.5rem',\r\n    large: '2rem',\r\n  },\r\n};\r\n\r\n// inject font into the document\r\nexport function injectFont() {\r\n  // console.log('injectFont -- disabled');\r\n\r\n  // check if the font is already injected\r\n  if (\r\n    document.querySelector(`link[href=\"${font.url}\"]`) ||\r\n    document.querySelector(`link[href*=\"nextgen-web-ui-toolkit.css\"]`)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const link = document.createElement('link');\r\n  link.rel = 'stylesheet';\r\n  link.href = font.url;\r\n  document.head.appendChild(link);\r\n}\r\n","import { TValidationState } from '../../utils';\r\nimport { color } from '../variables';\r\n\r\nconst stateColors = {\r\n  error: color.red02,\r\n};\r\n\r\ntype TStateColors = string | undefined; // form state: \"none\" => undefined\r\n\r\nexport const getStateColors = (state: TValidationState): TStateColors => {\r\n  return stateColors[state];\r\n};\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n","import { FunctionalComponent, h } from '@stencil/core';\r\nimport { TValidationState } from '../../../utils';\r\n\r\ntype StateMessageProps = {\r\n  message?: string;\r\n  state: TValidationState;\r\n};\r\n\r\nexport const StateMessage: FunctionalComponent<StateMessageProps> = ({ message, state }) => {\r\n  return (\r\n    <span class=\"message\">\r\n      {state === 'error' && (\r\n        <dc-ui-icon\r\n          name=\"dc_status_error\"\r\n          color=\"red02\"\r\n          size=\"tiny\"></dc-ui-icon>\r\n      )}\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n","import { TValidationState, color } from '../utils';\r\n\r\ntype TFormStateColorStyles = {\r\n  formStateColor: string | undefined;\r\n};\r\n\r\nconst formStateColors = {\r\n  error: color.red02,\r\n};\r\n\r\nexport const getFormStateColor = (state: TValidationState): TFormStateColorStyles => {\r\n  return { formStateColor: formStateColors[state] };\r\n};\r\n","import { Styles } from 'jss';\r\nimport { FULL_TEXT_STYLES, TValidationState } from '../../../utils';\r\nimport { getFormStateColor } from '../../../styles/form-state-color-styles';\r\n\r\nexport const getStateMessageStyles = (state: TValidationState): Styles<'message'> => {\r\n  return {\r\n    message: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '8px',\r\n      marginTop: '5px',\r\n      color: getFormStateColor(state).formStateColor,\r\n      ...FULL_TEXT_STYLES['state-message'].base,\r\n    },\r\n  };\r\n};\r\n","import type { JssStyle } from 'jss';\r\nimport { color as colorUtils } from '../variables/color';\r\n\r\nexport const IMAGE_STYLE = ['default', 'circle'];\r\nexport type TImageStyle = (typeof IMAGE_STYLE)[number];\r\n\r\nexport const IMAGE_OBJECT_FIT = ['fill', 'contain', 'cover', 'none', 'scale-down'];\r\nexport type TImageObjectFit = (typeof IMAGE_OBJECT_FIT)[number];\r\n\r\nexport const pxToRemWithUnit = (px: number): string => `${px / 16}rem`;\r\n\r\n/**\r\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\r\n */\r\nexport const getScreenReaderJssStyle = (isHidden: boolean): JssStyle =>\r\n  isHidden\r\n    ? {\r\n        position: 'absolute',\r\n        width: '1px',\r\n        height: '1px',\r\n        margin: '-1px',\r\n        overflow: 'hidden',\r\n        clip: 'rect(1px,1px,1px,1px)',\r\n        clipPath: 'inset(50%)',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {\r\n        position: 'static',\r\n        width: 'auto',\r\n        height: 'auto',\r\n        margin: 0,\r\n        overflow: 'visible',\r\n        clip: 'auto',\r\n        clipPath: 'none',\r\n        whiteSpace: 'normal',\r\n      };\r\n\r\nexport const getEllipsisJssStyle = (isEllipsis: boolean): JssStyle =>\r\n  isEllipsis\r\n    ? {\r\n        maxWidth: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {};\r\n\r\nexport const getDisabledCheckboxRadioTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getDisabledInputTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getInputJssStyle = (type: string): JssStyle => {\r\n  let inputStyles = {};\r\n\r\n  switch (type) {\r\n    case 'date':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green01,\r\n      };\r\n      break;\r\n    case 'email':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green02,\r\n      };\r\n      break;\r\n    case 'file':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green03,\r\n      };\r\n      break;\r\n    case 'hidden':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red01,\r\n      };\r\n      break;\r\n    case 'number':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red02,\r\n      };\r\n      break;\r\n    case 'password':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red03,\r\n      };\r\n      break;\r\n    case 'search':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow01,\r\n      };\r\n      break;\r\n    case 'tel':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow02,\r\n      };\r\n      break;\r\n    case 'url':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow03,\r\n      };\r\n      break;\r\n    default:\r\n      inputStyles = {\r\n        borderColor: colorUtils.grey05,\r\n      };\r\n  }\r\n\r\n  return inputStyles;\r\n};\r\n\r\nexport const getRatioJssStyle = (ratio: string): JssStyle =>\r\n  ratio\r\n    ? {\r\n        aspectRatio: ratio,\r\n        height: '100%',\r\n        width: '100%',\r\n      }\r\n    : {};\r\n\r\nexport const getObjectFitJssStyle = (objectFit: TImageObjectFit): JssStyle =>\r\n  objectFit\r\n    ? {\r\n        objectFit: objectFit,\r\n      }\r\n    : {};\r\n\r\nexport const getImageStyleJssStyle = (imageStyle: TImageStyle): JssStyle =>\r\n  imageStyle\r\n    ? {\r\n        borderRadius: imageStyle === 'circle' ? '50%' : '0',\r\n      }\r\n    : {};\r\n"],"names":["setAriaAttributes","el","opts","label","message","attributeName","attributeValue","arguments","length","undefined","setAttribute","parseAndGetAriaAttributes","rawAttributes","attributes","attribute","JSON","parse","replace","attributeKeys","Object","keys","key","FULL_TEXT_STYLES","lg","fontSize","lineHeight","md","base","fontWeight","h1","h2","h3","h4","h5","h6","text","letterSpacing","textTransform","focus","parseJSON","prop","_a","addImportantToEachRule","input","entries","reduce","result","_ref","value","addImportantToRule","buildResponsiveStyles","rawValue","getJssStyle","filter","breakpointValue","assign","mediaQueryMin","buildResponsiveStylesWithProps","extraProp","_len","args","Array","_key","buildResponsiveTextStyles","styleName","fontObject","Error","styles","forEach","mediaQuery","color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","hideLabel","ellipsis","disabled","state","baseColor","stateColor","getStateColors","iconColor","getCss","display","maxWidth","alignItems","position","fontFamily","paddingLeft","cursor","getScreenReaderJssStyle","getEllipsisJssStyle","getDisabledCheckboxRadioTextJssStyle","flexShrink","appearance","WebkitAppearance","height","width","backgroundSize","borderRadius","border","margin","backgroundPosition","transition","outline","outlineOffset","backgroundColor","backgroundImage","outlineColor","borderColor","getStateMessageStyles","DcUiCheckbox","onLabelClick","this","click","observeAttributes","forceUpdate","componentWillLoad","injectFont","querySelector","connectedCallback","componentDidRender","render","injectCSS","validationstate","h","Host","id","onClick","StateMessage","font","url","family","size","small","medium","large","document","link","createElement","rel","href","head","appendChild","stateColors","error","breakpoints","xxs","xs","sm","xl","xxl","min","mediaQueryMax","max","class","name","formStateColors","getFormStateColor","formStateColor","gap","marginTop","pxToRemWithUnit","px","isHidden","overflow","clip","clipPath","whiteSpace","isEllipsis","textOverflow","isDisabled","getRatioJssStyle","ratio","aspectRatio","getObjectFitJssStyle","objectFit","getImageStyleJssStyle","imageStyle"],"sourceRoot":""}
{"version":3,"file":"static/js/3323.669ab671.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/scrollLock.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-modal/dc-ui-modal.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-modal/modal-utils.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-modal/dc-ui-modal.scss?tag=dc-ui-modal&encapsulation=shadow"],"sourcesContent":["export const setScrollLock = (lock: boolean): void => {\r\n  document.body.style.overflow = lock ? 'hidden' : 'auto';\r\n};\r\n","import { Component, h, Element, Method, Prop, Watch, EventEmitter, Event } from '@stencil/core';\r\nimport { setScrollLock, observeAttributes } from '../../utils';\r\nimport {\r\n  addTriggerListeners,\r\n  TModalBackdropColor,\r\n  TModalMaxWidth,\r\n  TModalStatus,\r\n} from './modal-utils';\r\nimport { TIcon } from '../..';\r\n\r\nconst statusIcon = {\r\n  success: 'dc_status_success',\r\n  error: 'dc_status_error',\r\n  warning: 'dc_status_warning',\r\n  info: 'dc_status_information',\r\n};\r\n\r\n@Component({\r\n  tag: 'dc-ui-modal',\r\n  styleUrl: 'dc-ui-modal.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiModal {\r\n  @Element() el: HTMLDcUiModalElement;\r\n  /** Sets the color of the modal backdrop */\r\n  @Prop() backdropColor: TModalBackdropColor = 'none';\r\n  /** Toggle the visibility of the modal */\r\n  @Prop({ mutable: true, reflect: true }) isOpen = false;\r\n  /** Modal is fullscreen on mobile */\r\n  @Prop() mobileFullscreen = false;\r\n  /** Show/hide the close icon inside the modal */\r\n  @Prop() closeIcon = true;\r\n  /** Disables the backdrop click to close the modal */\r\n  @Prop() noBackdropClick = false;\r\n  /** Max width of the modal */\r\n  @Prop() maxWidth: TModalMaxWidth = 'medium';\r\n  /** Flexible max width of the modal */\r\n  @Prop() maxWidthFlexible?: number;\r\n  /** Title inside the modal header */\r\n  @Prop() modalTitle?: string;\r\n  /** Enables the sticky header */\r\n  @Prop() stickyHeader = false;\r\n  /** Enables the sticky footer */\r\n  @Prop() stickyFooter = false;\r\n  /** (Optional) id of the trigger element. If the id is set, the modal will be opened on click of the trigger element */\r\n  @Prop() triggerId: string = '';\r\n  /**\r\n   * @deprecated is not needed. dialog is in toplevel-layer\r\n   * (Optional) adds different z-index to the modal */\r\n  @Prop() zIndex?: number;\r\n  /** If the modal is scrollable when the content is larger than the modal */\r\n  @Prop() scrollable = true;\r\n  /** Sets the modal status */\r\n  @Prop() status?: TModalStatus = 'none';\r\n\r\n  triggerEl: HTMLElement;\r\n  hasHeaderSlot: boolean;\r\n  hasFooterSlot: boolean;\r\n  private modal: HTMLDialogElement;\r\n  private dialogMain: HTMLElement;\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  /** Handler to be called when the accordion is opened */\r\n  @Event() dcOpen: EventEmitter<HTMLDcUiModalElement>;\r\n\r\n  /** Handler to be called when the accordion is closed */\r\n  @Event() dcClose: EventEmitter<HTMLDcUiModalElement>;\r\n\r\n  @Watch('isOpen')\r\n  onIsOpenChange(isOpen: boolean): void {\r\n    setScrollLock(isOpen);\r\n    if (isOpen) {\r\n      this.dcOpen.emit(this.el);\r\n    } else {\r\n      this.dcClose.emit(this.el);\r\n    }\r\n  }\r\n\r\n  connectedCallback() {\r\n    // get reference of the root element\r\n    const shadowRoot = this.el.getRootNode() as ShadowRoot;\r\n\r\n    // search for trigger element. Either in light DOM or in shadow DOM\r\n    this.triggerEl = shadowRoot.getElementById(this.triggerId);\r\n    this.observeAttributes(); // on every reconnect\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // check if there is a header or footer slot\r\n    this.hasHeaderSlot = !!this.el.querySelector('[slot=\"header\"]');\r\n    this.hasFooterSlot = !!this.el.querySelector('[slot=\"footer\"]');\r\n\r\n    // throw warning if maxWidthFlexible is set to a value smaller than 320\r\n    if (this.maxWidthFlexible !== undefined && this.maxWidthFlexible < 320) {\r\n      console.warn('dc-ui-modal: maxWidthFlexible should be at least 320px');\r\n    }\r\n  }\r\n\r\n  componentDidRender() {\r\n    if (this.isOpen) {\r\n      setScrollLock(true);\r\n      this.modal.showModal();\r\n      if (!this.scrollable) {\r\n        this.updateDialogMainHeight();\r\n        // Initialize resize observer\r\n        this.resizeObserver = new ResizeObserver(() => {\r\n          this.updateDialogMainHeight();\r\n        });\r\n        this.resizeObserver.observe(this.modal);\r\n      }\r\n    }\r\n\r\n    this.observeAttributes(); // once initially\r\n\r\n    if (this.triggerEl) {\r\n      addTriggerListeners(this);\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    setScrollLock(false);\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  // method to open the modal\r\n  @Method() open(): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      this.modal.showModal();\r\n      resolve(true);\r\n    });\r\n  }\r\n\r\n  // method to close the modal\r\n  @Method() close(): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      this.modal.close();\r\n      resolve(true);\r\n    });\r\n  }\r\n\r\n  onTriggerClick = () => {\r\n    this.modal.showModal();\r\n  };\r\n\r\n  private observeAttributes = (): void => {\r\n    observeAttributes(this.modal, ['open'], () => (this.isOpen = this.modal.hasAttribute('open')));\r\n  };\r\n\r\n  // close modal on backdrop click if noBackdropClick is false\r\n  private onBackdropClick = (e: MouseEvent) => {\r\n    if (!this.noBackdropClick && e.target === this.modal) {\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  returnCSSClasses = () => {\r\n    return {\r\n      'dc-ui-modal': true,\r\n      'dc-ui-modal--no-scroll': !this.scrollable,\r\n      [`dc-ui-modal--${this.maxWidth}`]:\r\n        this.maxWidthFlexible === undefined ||\r\n        this.maxWidthFlexible === null ||\r\n        Number.isNaN(this.maxWidthFlexible),\r\n      'dc-ui-modal--sticky-header': this.stickyHeader,\r\n      'dc-ui-modal--sticky-footer': this.stickyFooter,\r\n      'dc-ui-modal--mobile-fullscreen': this.mobileFullscreen,\r\n      'dc-ui-modal--backdrop-dark': this.backdropColor === 'dark',\r\n    };\r\n  };\r\n\r\n  private updateDialogMainHeight = (): void => {\r\n    if (!this.scrollable && this.modal && this.dialogMain) {\r\n      const header = this.modal.querySelector('.dialog-header');\r\n      const footer = this.modal.querySelector('.dialog-footer');\r\n\r\n      const headerHeight = header?.getBoundingClientRect().height || 0;\r\n      const footerHeight = footer?.getBoundingClientRect().height || 0;\r\n\r\n      const mainHeight = `calc(100% - ${headerHeight + footerHeight}px)`;\r\n      this.dialogMain.style.setProperty('--dialog-main-height', mainHeight);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // only add max-width using maxWidthFlexible if maxWidthFlexible is set. If not do not add it\r\n    const styles = {\r\n      maxWidth: this.maxWidthFlexible ? this.maxWidthFlexible + 'px' : '',\r\n    };\r\n\r\n    return (\r\n      <dialog\r\n        ref={(el) => (this.modal = el)}\r\n        onClick={this.onBackdropClick}\r\n        class={this.returnCSSClasses()}\r\n        style={{ ...styles }}>\r\n        <div class=\"dialog-body\">\r\n          <div class=\"dialog-content\">\r\n            <div\r\n              class={{\r\n                'dialog-header': true,\r\n                'dialog-header--has-status': this.status && this.status !== 'none',\r\n                [`dialog-header--${this.status}`]: this.status && this.status !== 'none',\r\n              }}>\r\n              {this.status !== 'none' && (\r\n                <dc-ui-icon\r\n                  class=\"dialog-header-status-icon\"\r\n                  name={statusIcon[this.status] as TIcon}\r\n                  size=\"large\"\r\n                />\r\n              )}\r\n              {this.modalTitle && !this.hasHeaderSlot && (\r\n                <dc-ui-headline\r\n                  class=\"dialog-header-headline\"\r\n                  no-margin=\"true\"\r\n                  tag=\"h2\"\r\n                  variant=\"h4\"\r\n                  color=\"inherit\">\r\n                  {this.modalTitle}\r\n                </dc-ui-headline>\r\n              )}\r\n              {this.closeIcon && (\r\n                <dc-ui-button\r\n                  id=\"close-dialog\"\r\n                  icon=\"dc_close\"\r\n                  onClick={() => this.close()}\r\n                  variant=\"link\"\r\n                  size=\"small\"\r\n                  hide-label=\"true\">\r\n                  Close modal\r\n                </dc-ui-button>\r\n              )}\r\n              <slot name=\"header\" />\r\n            </div>\r\n            <div\r\n              class=\"dialog-main\"\r\n              ref={(el) => (this.dialogMain = el)}>\r\n              <slot />\r\n            </div>\r\n            {this.hasFooterSlot && (\r\n              <div class=\"dialog-footer\">\r\n                <slot name=\"footer\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </dialog>\r\n    );\r\n  }\r\n}\r\n","import { DcUiModal } from './dc-ui-modal';\r\n\r\nexport const MODAL_BACKDROP_COLOR = ['none', 'dark'] as const;\r\nexport type TModalBackdropColor = (typeof MODAL_BACKDROP_COLOR)[number];\r\n\r\nexport const MODAL_MAX_WIDTH = ['small', 'medium', 'large'] as const;\r\nexport type TModalMaxWidth = (typeof MODAL_MAX_WIDTH)[number];\r\n\r\nexport const MODAL_STATUS = ['success', 'error', 'warning', 'info', 'none'] as const;\r\nexport type TModalStatus = (typeof MODAL_STATUS)[number];\r\n\r\n/**\r\n * Adds event listeners to toggle the tooltip.\r\n *\r\n * @param tooltip\r\n */\r\nexport const addTriggerListeners = (modal: DcUiModal): void => {\r\n  modal.triggerEl.addEventListener('click', modal.onTriggerClick);\r\n};\r\n","* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.dc-ui-modal {\r\n  border: none;\r\n  background-color: $color-white;\r\n  box-shadow: 0 0 16px 0 rgba($color-black, 0.25);\r\n  padding: 0;\r\n  max-height: calc(100dvh - 32px);\r\n  width: auto;\r\n\r\n  &--no-scroll {\r\n    overflow: hidden;\r\n\r\n    &[open] {\r\n      display: grid;\r\n      grid-template-rows: 1fr;\r\n    }\r\n\r\n    .dialog-content {\r\n      height: 100%;\r\n\r\n      > * {\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    .dialog-main {\r\n      height: var(--dialog-main-height, 100%);\r\n    }\r\n  }\r\n\r\n  &[open] {\r\n    animation: modalFadeIn 0.25s ease-in-out;\r\n  }\r\n\r\n  &::backdrop {\r\n    background-color: transparent;\r\n  }\r\n\r\n  @include media-max(lg) {\r\n    max-width: calc(100dvw - 32px);\r\n    max-height: auto;\r\n    height: fit-content;\r\n  }\r\n\r\n  .dialog-body {\r\n    min-height: 100%;\r\n    padding: 0 24px;\r\n  }\r\n\r\n  .dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    & > :last-child {\r\n      padding-bottom: 24px;\r\n    }\r\n  }\r\n\r\n  .dialog-header {\r\n    display: grid;\r\n    grid-template-columns: [headline-start] 1fr [headline-end close-button-start] auto [close-button-end];\r\n    min-height: 48px;\r\n    padding-block: 16px;\r\n    background-color: $color-white;\r\n    top: auto;\r\n    position: static;\r\n    align-items: center;\r\n    color: $color-dark-blue-02;\r\n\r\n    &--has-status {\r\n      grid-template-columns: [status-icon-start] auto [status-icon-end] 16px [headline-start] 1fr [headline-end close-button-start] auto [close-button-end];\r\n    }\r\n\r\n    &--success {\r\n      color: $color-green-02;\r\n    }\r\n\r\n    &--error {\r\n      color: $color-red-02;\r\n    }\r\n\r\n    &--warning {\r\n      color: $color-orange-02;\r\n    }\r\n\r\n    &--info {\r\n      color: $color-dark-blue-02;\r\n    }\r\n\r\n    @include media-max(lg) {\r\n      position: static;\r\n      top: auto;\r\n    }\r\n  }\r\n\r\n  .dialog-header-status-icon {\r\n    grid-column: status-icon;\r\n  }\r\n\r\n  .dialog-header-headline {\r\n    grid-column: headline;\r\n  }\r\n\r\n  #close-dialog {\r\n    grid-column: close-button;\r\n  }\r\n\r\n  .dialog-footer {\r\n    padding-block: 16px;\r\n    bottom: auto;\r\n    position: static;\r\n    background-color: $color-white;\r\n  }\r\n\r\n  // sizes\r\n  &--small {\r\n    max-width: 640px;\r\n  }\r\n\r\n  /* medium is the default size */\r\n  &--medium {\r\n    max-width: 1024px;\r\n  }\r\n\r\n  &--large {\r\n    max-width: 1440px;\r\n  }\r\n\r\n  // variant styles\r\n  &--backdrop-dark {\r\n    &::backdrop {\r\n      background-color: rgba($color-dark-blue-02, 0.7);\r\n    }\r\n  }\r\n\r\n  &--mobile-fullscreen {\r\n    @include media-max(lg) {\r\n      max-width: 100dvw;\r\n      max-height: unset;\r\n      height: 100dvh;\r\n    }\r\n  }\r\n\r\n  &--sticky-header {\r\n    .dialog-header {\r\n      top: 0;\r\n      position: sticky;\r\n\r\n      @include media-max(lg) {\r\n        position: sticky;\r\n        top: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  &--sticky-footer {\r\n    .dialog-footer {\r\n      bottom: 0;\r\n      position: sticky;\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes modalFadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n"],"names":["setScrollLock","lock","document","body","style","overflow","statusIcon","success","error","warning","info","DcUiModal","onTriggerClick","this","modal","showModal","observeAttributes","isOpen","hasAttribute","onBackdropClick","e","noBackdropClick","target","close","returnCSSClasses","scrollable","maxWidth","undefined","maxWidthFlexible","Number","isNaN","stickyHeader","stickyFooter","mobileFullscreen","backdropColor","updateDialogMainHeight","dialogMain","header","querySelector","footer","mainHeight","getBoundingClientRect","height","setProperty","onIsOpenChange","dcOpen","emit","el","dcClose","connectedCallback","shadowRoot","getRootNode","triggerEl","getElementById","triggerId","componentWillLoad","hasHeaderSlot","hasFooterSlot","console","warn","componentDidRender","resizeObserver","ResizeObserver","observe","addEventListener","disconnectedCallback","disconnect","open","Promise","resolve","render","styles","h","key","ref","onClick","class","Object","assign","status","name","size","modalTitle","tag","variant","color","closeIcon","id","icon"],"sourceRoot":""}
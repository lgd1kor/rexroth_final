{"version":3,"file":"static/js/4236.58cda210.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/autocomplete.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/isHTMLElement.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-dropdown-input/dc-ui-dropdown-input.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-dropdown-input/dc-ui-dropdown-input.scss?tag=dc-ui-dropdown-input&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/common/state-message/state-message.tsx"],"sourcesContent":["export interface AutocompleteConfig {\r\n  url?: string;\r\n  searchTermPlaceholder?: string;\r\n  onFetch?: (query: string) => Promise<AutocompleteResponse>;\r\n  minChars: number;\r\n  resultListClass: string;\r\n  selector: string;\r\n  onSelect?: (selectedItem: AutocompleteItem) => void;\r\n  closeOnSelect?: boolean;\r\n  maxResults?: number; // New property\r\n  fetchOnFocus?: boolean; // New property\r\n  defaultQuery?: string; // New property for default query\r\n  highlightResults?: boolean; // New property for optional highlighting\r\n  additionalParameters?: string; // New property for additional parameters\r\n}\r\n\r\nexport interface AutocompleteItem {\r\n  name: string;\r\n  type?: string;\r\n  id?: string;\r\n}\r\n\r\ninterface AutocompleteResponse {\r\n  query: string;\r\n  results: AutocompleteItem[];\r\n}\r\n\r\nexport class Autocomplete {\r\n  private readonly config: AutocompleteConfig;\r\n  private readonly hostElement: HTMLElement;\r\n  private readonly input: HTMLInputElement;\r\n  private resultsContainer: HTMLUListElement | null = null;\r\n  private resizeObserver: ResizeObserver | null = null;\r\n\r\n  constructor(config: AutocompleteConfig, hostElement: HTMLElement, input: HTMLInputElement) {\r\n    this.config = config;\r\n    this.hostElement = hostElement;\r\n    this.input = input;\r\n  }\r\n\r\n  public init(): void {\r\n    this.addEventListeners();\r\n    this.setupResizeObserver();\r\n  }\r\n\r\n  private addEventListeners(): void {\r\n    this.input.addEventListener('input', this.handleInput);\r\n    this.input.addEventListener('keydown', this.handleKeydown);\r\n    this.input.addEventListener('blur', this.handleBlur);\r\n    this.input.addEventListener('focus', this.handleFocus);\r\n    document.addEventListener('click', this.handleClickOutside);\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  private setupResizeObserver(): void {\r\n    this.resizeObserver = new ResizeObserver(this.handleResize);\r\n    const containerParent = this.getContainerParent();\r\n    this.resizeObserver.observe(containerParent);\r\n  }\r\n\r\n  private readonly handleInput = (): void => {\r\n    const query = this.input.value.trim();\r\n    query ? this.getSuggestions(query) : this.clearResults();\r\n  };\r\n\r\n  private readonly handleKeydown = (event: KeyboardEvent): void => {\r\n    if (!this.resultsContainer) return;\r\n\r\n    const items = this.resultsContainer.querySelectorAll('li');\r\n    let activeIndex = Array.from(items).findIndex((item) => item.classList.contains('active'));\r\n\r\n    switch (event.key) {\r\n      case 'ArrowDown':\r\n      case 'ArrowUp':\r\n        activeIndex = this.handleArrowKeys(event.key, activeIndex, items.length);\r\n        this.setActiveItem(items, activeIndex);\r\n        event.preventDefault();\r\n        break;\r\n      case 'Enter':\r\n        // only continue if activeIndex there is an active item\r\n        if (activeIndex !== -1) {\r\n          this.handleEnterKey(activeIndex, items);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        this.clearResults();\r\n        break;\r\n    }\r\n  };\r\n\r\n  private readonly handleArrowKeys = (\r\n    key: string,\r\n    activeIndex: number,\r\n    itemsLength: number\r\n  ): number => {\r\n    return key === 'ArrowDown'\r\n      ? (activeIndex + 1) % itemsLength\r\n      : (activeIndex - 1 + itemsLength) % itemsLength;\r\n  };\r\n\r\n  private readonly handleEnterKey = (activeIndex: number, items: NodeListOf<Element>): void => {\r\n    if (activeIndex !== -1) {\r\n      const selectedItem = items[activeIndex];\r\n      this.handleItemSelection({\r\n        name: selectedItem.textContent || '',\r\n        type: selectedItem.getAttribute('data-type') || '',\r\n      });\r\n    }\r\n  };\r\n\r\n  private readonly handleBlur = (): void => {\r\n    setTimeout(() => this.clearResults(), 200);\r\n  };\r\n\r\n  private readonly handleFocus = (): void => {\r\n    const inputValue = this.input.value.trim();\r\n    if (this.config.fetchOnFocus) {\r\n      const query = inputValue || this.config.defaultQuery || '';\r\n      this.getSuggestions(query);\r\n    } else if (inputValue) {\r\n      this.getSuggestions(inputValue);\r\n    }\r\n  };\r\n\r\n  private readonly handleClickOutside = (event: MouseEvent): void => {\r\n    if (!this.hostElement.shadowRoot?.contains(event.target as Node)) {\r\n      this.clearResults();\r\n    }\r\n  };\r\n\r\n  private readonly handleResize = (): void => {\r\n    if (this.resultsContainer) {\r\n      const containerParent = this.getContainerParent();\r\n      this.setResultsContainerStyles(this.resultsContainer, containerParent);\r\n    }\r\n  };\r\n\r\n  private readonly getSuggestions = async (query: string): Promise<AutocompleteResponse> => {\r\n    if (!this.config.fetchOnFocus && query.length < this.config.minChars) {\r\n      this.clearResults();\r\n      return { query, results: [] };\r\n    }\r\n\r\n    try {\r\n      let data: AutocompleteResponse;\r\n\r\n      if (this.config.onFetch) {\r\n        // Use the custom fetch function if provided\r\n        data = await this.config.onFetch(query);\r\n      } else if (this.config.url) {\r\n        // Fall back to the default fetch method if url is provided\r\n        const url = this.config.url.replace(\r\n          this.config.searchTermPlaceholder,\r\n          encodeURIComponent(query) + (this.config.additionalParameters || '')\r\n        );\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n        data = await response.json();\r\n      } else {\r\n        throw new Error('No fetch function or URL provided in the configuration');\r\n      }\r\n\r\n      data.results.length > 0 ? this.displayResults(data) : this.clearResults();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching autocomplete suggestions:', error);\r\n      this.clearResults();\r\n      return { query, results: [] };\r\n    }\r\n  };\r\n\r\n  private displayResults(data: AutocompleteResponse): void {\r\n    const containerParent = this.getContainerParent();\r\n    this.clearResults();\r\n    if (data.results.length === 0) return;\r\n\r\n    this.resultsContainer = this.createResultsContainer(containerParent);\r\n    // Apply maxResults limit\r\n    const limitedResults = this.config.maxResults\r\n      ? data.results.slice(0, this.config.maxResults)\r\n      : data.results;\r\n    this.populateResultsContainer(limitedResults);\r\n    this.updateInputAttributes();\r\n  }\r\n\r\n  private getContainerParent(): HTMLElement {\r\n    const containerParent =\r\n      this.hostElement.shadowRoot?.querySelector(this.config.selector);\r\n    if (!containerParent) {\r\n      throw new Error(`Container parent element not found: ${this.config.selector}`);\r\n    }\r\n    return containerParent as HTMLElement;\r\n  }\r\n\r\n  private createResultsContainer(containerParent: HTMLElement): HTMLUListElement {\r\n    const resultsContainer = document.createElement('ul');\r\n    resultsContainer.className = this.config.resultListClass;\r\n    resultsContainer.setAttribute('role', 'listbox');\r\n    resultsContainer.id = 'autocomplete-results';\r\n    resultsContainer.setAttribute('tabindex', '-1'); // Add this line\r\n    this.setResultsContainerStyles(resultsContainer, containerParent);\r\n    containerParent.insertAdjacentElement('afterend', resultsContainer);\r\n    return resultsContainer;\r\n  }\r\n\r\n  private setResultsContainerStyles(container: HTMLUListElement, parent: HTMLElement): void {\r\n    const parentWidth = parent.getBoundingClientRect().width;\r\n    container.style.boxSizing = 'border-box';\r\n    container.style.maxWidth = `${parentWidth}px`;\r\n    container.style.width = '100%';\r\n  }\r\n\r\n  private populateResultsContainer(results: AutocompleteItem[]): void {\r\n    const inputValue = this.input.value.trim();\r\n    const highlightRegex = new RegExp(`(${this.escapeRegExp(inputValue)})`, 'gi');\r\n\r\n    results.forEach((result, index) => {\r\n      const resultItem = document.createElement('li');\r\n\r\n      if (this.config.highlightResults) {\r\n        resultItem.innerHTML = result.name.replace(highlightRegex, '<mark>$1</mark>');\r\n      } else {\r\n        resultItem.textContent = result.name;\r\n      }\r\n\r\n      resultItem.setAttribute('role', 'option');\r\n      resultItem.setAttribute('data-type', result.type);\r\n      resultItem.id = `autocomplete-item-${index}`;\r\n      resultItem.addEventListener('click', () => this.handleItemSelection(result));\r\n      this.resultsContainer?.appendChild(resultItem);\r\n    });\r\n  }\r\n\r\n  private escapeRegExp(string: string): string {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n\r\n  private updateInputAttributes(): void {\r\n    this.input.setAttribute('aria-autocomplete', 'list');\r\n    this.input.setAttribute('aria-controls', 'autocomplete-results');\r\n  }\r\n\r\n  private handleItemSelection(selectedItem: AutocompleteItem): void {\r\n    if (this.config.onSelect) {\r\n      this.config.onSelect(selectedItem);\r\n    }\r\n\r\n    this.input.value = selectedItem.name;\r\n\r\n    if (this.config.closeOnSelect) {\r\n      this.clearResults();\r\n    }\r\n  }\r\n\r\n  private setActiveItem(items: NodeListOf<Element>, activeIndex: number): void {\r\n    items.forEach((item, index) => {\r\n      item.classList.toggle('active', index === activeIndex);\r\n      if (index === activeIndex) {\r\n        (item as HTMLElement).scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearResults(): void {\r\n    this.resultsContainer?.remove();\r\n    this.resultsContainer = null;\r\n  }\r\n\r\n  public destroy(): void {\r\n    window.removeEventListener('resize', this.handleResize);\r\n    this.resizeObserver?.disconnect();\r\n    this.clearResults();\r\n    // Remove other event listeners if necessary\r\n  }\r\n}\r\n","/**\r\n * Check if value is the HTMLElement defined by tag\r\n * @param target the value to be check\r\n * @param tag valid HTMLElement\r\n * @returns {boolean} true if the target nodeName is the tag\r\n */\r\nexport const isHTMLElement = <T extends keyof HTMLElementTagNameMap = keyof HTMLElementTagNameMap>(\r\n  target: unknown,\r\n  tag: T\r\n): target is HTMLElementTagNameMap[T] => {\r\n  return target instanceof Node && target.nodeName.toLowerCase() === tag;\r\n};\r\n","import {\r\n  Component,\r\n  h,\r\n  State,\r\n  Prop,\r\n  Event,\r\n  EventEmitter,\r\n  Element,\r\n  AttachInternals,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport { Autocomplete, AutocompleteConfig, isHTMLElement, TValidationState } from '../../utils';\r\nimport { StateMessage } from '../common/state-message/state-message';\r\n\r\n@Component({\r\n  tag: 'dc-ui-dropdown-input',\r\n  styleUrl: 'dc-ui-dropdown-input.scss',\r\n  formAssociated: true,\r\n  shadow: {\r\n    delegatesFocus: true,\r\n  },\r\n})\r\nexport class DcUiDropdownInput {\r\n  @Element() hostElement: HTMLDcUiDropdownInputElement;\r\n  @AttachInternals() internals!: ElementInternals;\r\n\r\n  @State() suggestions: { name: string; type: string }[] = [];\r\n  @State() showSuggestions: boolean = false;\r\n\r\n  @Prop() placeholder: string = '';\r\n  @Prop() apiUrl!: string;\r\n  @Prop() searchTermPlaceholder: string = '{query}';\r\n  @Prop() additionalParameters?: string;\r\n  @Prop() defaultQuery?: string;\r\n  @Prop() label: string = '';\r\n  @Prop() hideLabel: boolean = false;\r\n  @Prop() validationstate: TValidationState = 'none';\r\n  @Prop() disabled: boolean = false;\r\n  @Prop() readonly: boolean = false;\r\n  @Prop() required: boolean = false;\r\n  @Prop() message: string = '';\r\n  @Prop() maxResults?: number;\r\n  @Prop() highlightResults: boolean = true;\r\n  @Prop() name: string;\r\n  @Prop({ reflect: true, mutable: true }) value: string | number;\r\n\r\n  @Watch('value')\r\n  handleValueChange() {\r\n    if (Array.isArray(this.value)) {\r\n      this.internals.setFormValue(this.value.join(','));\r\n      return;\r\n    }\r\n    this.internals.setFormValue(`${this.value}`);\r\n  }\r\n\r\n  @Event() dcChange: EventEmitter<{ value: string | number; el: HTMLDcUiDropdownInputElement }>;\r\n\r\n  @Watch('disabled')\r\n  handleDisabledChange() {\r\n    if (this.disabled) {\r\n      this.autocomplete?.destroy();\r\n    } else {\r\n      this.initAutocomplete();\r\n    }\r\n  }\r\n\r\n  @Watch('readonly')\r\n  handleReadonlyChange() {\r\n    if (this.readonly) {\r\n      this.autocomplete?.destroy();\r\n    } else {\r\n      this.initAutocomplete();\r\n    }\r\n  }\r\n\r\n  private isValidApiUrl: boolean = false;\r\n  private autocompleteOptions: AutocompleteConfig;\r\n  private autocomplete: Autocomplete;\r\n  private inputElement?: HTMLInputElement;\r\n\r\n  componentWillLoad() {\r\n    this.isValidApiUrl = this.validateApiUrl();\r\n    this.additionalParameters = this.additionalParameters?.trim();\r\n\r\n    this.handleValueChange();\r\n  }\r\n\r\n  formResetCallback() {\r\n    if (!this.value) return;\r\n\r\n    this.handleClear();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (!this.isValidApiUrl) {\r\n      return;\r\n    }\r\n\r\n    this.initAutocomplete();\r\n  }\r\n\r\n  private initAutocomplete() {\r\n    if (this.disabled || this.readonly) {\r\n      return;\r\n    }\r\n\r\n    this.autocompleteOptions = {\r\n      url: this.apiUrl,\r\n      searchTermPlaceholder: this.searchTermPlaceholder,\r\n      minChars: 1,\r\n      selector: '#dropdown-input',\r\n      resultListClass: 'suggestions-list',\r\n      closeOnSelect: true,\r\n      ...(this.maxResults && { maxResults: this.maxResults }),\r\n      fetchOnFocus: true,\r\n      defaultQuery: this.defaultQuery,\r\n      highlightResults: this.highlightResults,\r\n      ...(this.additionalParameters && {\r\n        additionalParameters: `&${this.additionalParameters}`,\r\n      }),\r\n      onSelect: (selectedItem) => {\r\n        this.value = selectedItem.name;\r\n        this.showSuggestions = false;\r\n        this.dcChange.emit({ value: this.value, el: this.hostElement });\r\n      },\r\n    };\r\n\r\n    this.autocomplete = new Autocomplete(\r\n      this.autocompleteOptions,\r\n      this.hostElement,\r\n      this.inputElement\r\n    );\r\n    this.autocomplete.init();\r\n  }\r\n\r\n  private readonly validateApiUrl = (): boolean => {\r\n    if (!this.apiUrl) {\r\n      throw new Error('apiUrl is required');\r\n    }\r\n\r\n    try {\r\n      new URL(this.apiUrl);\r\n    } catch (error) {\r\n      throw new Error('apiUrl is not a valid url');\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  private readonly handleClear = () => {\r\n    if (this.disabled) return;\r\n\r\n    const { inputElement, internals } = this;\r\n\r\n    // Clear input element value\r\n    inputElement.value = '';\r\n    this.value = inputElement.value;\r\n\r\n    // Update associated form control value\r\n    internals.setFormValue(undefined);\r\n  };\r\n\r\n  private readonly handleInput = (ev: Event) => {\r\n    if (this.disabled) return;\r\n\r\n    if (!isHTMLElement(ev.target, 'input')) return;\r\n    this.value = ev.target.value;\r\n    this.internals.setFormValue(`${this.value}`);\r\n  };\r\n\r\n  private readonly handleChange = (ev: Event) => {\r\n    if (this.disabled) return;\r\n\r\n    if (!isHTMLElement(ev.target, 'input')) return;\r\n    this.value = ev.target.value;\r\n    this.internals.setFormValue(`${this.value}`);\r\n\r\n    this.dcChange.emit({ value: this.value, el: this.hostElement });\r\n  };\r\n\r\n  private readonly returnCSSClasses = () => {\r\n    const classes = {\r\n      'dropdown-input-container': true,\r\n      'dropdown-input-container--disabled': this.disabled,\r\n      'dropdown-input-container--readonly': this.readonly,\r\n      'dropdown-input-container--required': this.required,\r\n      'dropdown-input-container--hide-label': this.hideLabel,\r\n      [`dropdown-input-container--validation-state-${this.validationstate}`]:\r\n        this.validationstate !== 'none',\r\n    };\r\n\r\n    return classes;\r\n  };\r\n\r\n  disconnectedCallback() {\r\n    this.autocomplete?.destroy();\r\n  }\r\n\r\n  render() {\r\n    if (!this.isValidApiUrl) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div class={this.returnCSSClasses()}>\r\n        <input\r\n          ref={(el) => (this.inputElement = el)}\r\n          class={this.placeholder ? 'placeholder-visible' : ''}\r\n          id=\"dropdown-input\"\r\n          name={this.name}\r\n          type=\"text\"\r\n          value={this.value}\r\n          placeholder={this.placeholder}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          readonly={this.readonly}\r\n          autocomplete=\"off\"\r\n          onInput={this.handleInput}\r\n          onChange={this.handleChange}\r\n        />\r\n        <dc-ui-icon\r\n          id=\"dropdown-icon\"\r\n          name=\"dc_down\"\r\n          size=\"tiny\"\r\n        />\r\n        {!this.hideLabel && (\r\n          <label htmlFor=\"dropdown-input\">\r\n            {this.label}\r\n            {this.required && <span class=\"required-indicator\">*</span>}\r\n          </label>\r\n        )}\r\n        {this.validationstate !== 'none' && (\r\n          <StateMessage\r\n            state={this.validationstate}\r\n            message={this.message}></StateMessage>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  --state-message-color: #{$color-red-02};\r\n  --state-outline-color: #{$color-turquoise-03};\r\n  --suggestions-list-max-entries: 5;\r\n\r\n  display: block;\r\n  font-family: 'Bosch Sans';\r\n}\r\n\r\n.dropdown-input-container {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  &--validation-state-error {\r\n    --state-outline-color: #{$color-red-02};\r\n\r\n    input {\r\n      outline-color: var(--state-outline-color);\r\n    }\r\n  }\r\n\r\n  &--disabled {\r\n    input {\r\n      background-color: $color-grey-02;\r\n      border-color: $color-grey-02;\r\n\r\n      &:hover {\r\n        border-color: $color-grey-02;\r\n      }\r\n    }\r\n\r\n    label {\r\n      color: $color-grey-03;\r\n    }\r\n\r\n    #dropdown-icon {\r\n      color: $color-grey-03;\r\n    }\r\n  }\r\n}\r\n\r\n// input styles\r\ninput {\r\n  all: unset;\r\n  appearance: none;\r\n  font-family: 'Bosch Sans';\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  letter-spacing: 0.16px;\r\n  color: baseInputColor;\r\n  outline: 2px solid transparent;\r\n  outline-offset: -2px;\r\n  border: none;\r\n  resize: none;\r\n  background-color: $color-white;\r\n  padding: 26px 16px 10px 16px;\r\n  border: 1px solid $color-grey-05;\r\n  border-radius: 0;\r\n\r\n  &:focus {\r\n    outline-color: var(--state-outline-color);\r\n  }\r\n\r\n  &:hover {\r\n    border-color: $color-grey-10;\r\n  }\r\n}\r\n\r\n// label styles\r\nlabel {\r\n  @include font-style('label-input');\r\n  position: absolute;\r\n  left: 16px;\r\n  top: 15px;\r\n  transition: all 0.2s ease-in-out;\r\n  color: $color-grey-06;\r\n}\r\n\r\n.placeholder-visible ~ label,\r\ninput:focus-visible ~ label,\r\ninput:not(:placeholder-shown) ~ label {\r\n  @include font-style('label-input', 'focus');\r\n  top: 10px;\r\n}\r\n\r\n// \"fake\" dropdown icon\r\n#dropdown-icon {\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 19px;\r\n}\r\n\r\n// rotate icon when suggestions are visible\r\n.suggestions-list ~ #dropdown-icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.suggestions-list {\r\n  position: absolute;\r\n  top: 56px;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: $color-white;\r\n  border-radius: 0;\r\n  box-shadow: 0px 4px 20px 0px rgba(0, 0, 0, 0.16);\r\n  z-index: 1;\r\n\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  max-height: calc(var(--suggestions-list-max-entries) * 40px);\r\n  overflow-y: auto;\r\n\r\n  li {\r\n    @include font-style('mid-size-text');\r\n    color: $color-dark-blue-02;\r\n    padding: 8px 16px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: $color-grey-01;\r\n    }\r\n\r\n    &.active {\r\n      background-color: $color-grey-01;\r\n    }\r\n  }\r\n\r\n  mark {\r\n    @include font-style('strong-mid-size-text');\r\n    color: $color-dark-blue-02;\r\n    background-color: transparent;\r\n  }\r\n}\r\n\r\n// state message styles\r\n.message {\r\n  @include font-style('state-message');\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-top: 5px;\r\n  color: var(--state-message-color);\r\n}\r\n","import { FunctionalComponent, h } from '@stencil/core';\r\nimport { TValidationState } from '../../../utils';\r\n\r\ntype StateMessageProps = {\r\n  message?: string;\r\n  state: TValidationState;\r\n};\r\n\r\nexport const StateMessage: FunctionalComponent<StateMessageProps> = ({ message, state }) => {\r\n  return (\r\n    <span class=\"message\">\r\n      {state === 'error' && (\r\n        <dc-ui-icon\r\n          name=\"dc_status_error\"\r\n          color=\"red02\"\r\n          size=\"tiny\"></dc-ui-icon>\r\n      )}\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n"],"names":["Autocomplete","constructor","config","hostElement","input","resultsContainer","resizeObserver","handleInput","query","this","value","trim","getSuggestions","clearResults","handleKeydown","event","items","querySelectorAll","activeIndex","Array","from","findIndex","item","classList","contains","key","handleArrowKeys","length","setActiveItem","preventDefault","handleEnterKey","itemsLength","selectedItem","handleItemSelection","name","textContent","type","getAttribute","handleBlur","setTimeout","handleFocus","inputValue","fetchOnFocus","defaultQuery","handleClickOutside","_a","shadowRoot","target","handleResize","containerParent","getContainerParent","setResultsContainerStyles","async","minChars","results","data","onFetch","url","Error","replace","searchTermPlaceholder","encodeURIComponent","additionalParameters","response","fetch","ok","status","json","displayResults","error","console","init","addEventListeners","setupResizeObserver","addEventListener","document","window","ResizeObserver","observe","createResultsContainer","limitedResults","maxResults","slice","populateResultsContainer","updateInputAttributes","querySelector","selector","createElement","className","resultListClass","setAttribute","id","insertAdjacentElement","container","parent","parentWidth","getBoundingClientRect","width","style","boxSizing","maxWidth","highlightRegex","RegExp","escapeRegExp","forEach","result","index","resultItem","highlightResults","innerHTML","appendChild","string","onSelect","closeOnSelect","toggle","scrollIntoView","block","inline","remove","destroy","removeEventListener","disconnect","isHTMLElement","tag","Node","nodeName","toLowerCase","DcUiDropdownInput","isValidApiUrl","validateApiUrl","apiUrl","URL","handleClear","disabled","inputElement","internals","setFormValue","undefined","ev","handleChange","dcChange","emit","el","returnCSSClasses","readonly","required","hideLabel","validationstate","handleValueChange","isArray","join","handleDisabledChange","autocomplete","initAutocomplete","handleReadonlyChange","componentWillLoad","formResetCallback","componentDidLoad","autocompleteOptions","Object","assign","showSuggestions","disconnectedCallback","render","h","class","ref","placeholder","onInput","onChange","size","htmlFor","label","StateMessage","state","message","_ref","color"],"sourceRoot":""}
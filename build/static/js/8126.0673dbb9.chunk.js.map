{"version":3,"file":"static/js/8126.0673dbb9.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/autocomplete.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-search/dc-ui-header-search.scss?tag=dc-ui-header-search&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-search/dc-ui-header-search.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["export interface AutocompleteConfig {\r\n  url?: string;\r\n  searchTermPlaceholder?: string;\r\n  onFetch?: (query: string) => Promise<AutocompleteResponse>;\r\n  minChars: number;\r\n  resultListClass: string;\r\n  selector: string;\r\n  onSelect?: (selectedItem: AutocompleteItem) => void;\r\n  closeOnSelect?: boolean;\r\n  maxResults?: number; // New property\r\n  fetchOnFocus?: boolean; // New property\r\n  defaultQuery?: string; // New property for default query\r\n  highlightResults?: boolean; // New property for optional highlighting\r\n  additionalParameters?: string; // New property for additional parameters\r\n}\r\n\r\nexport interface AutocompleteItem {\r\n  name: string;\r\n  type?: string;\r\n  id?: string;\r\n}\r\n\r\ninterface AutocompleteResponse {\r\n  query: string;\r\n  results: AutocompleteItem[];\r\n}\r\n\r\nexport class Autocomplete {\r\n  private readonly config: AutocompleteConfig;\r\n  private readonly hostElement: HTMLElement;\r\n  private readonly input: HTMLInputElement;\r\n  private resultsContainer: HTMLUListElement | null = null;\r\n  private resizeObserver: ResizeObserver | null = null;\r\n\r\n  constructor(config: AutocompleteConfig, hostElement: HTMLElement, input: HTMLInputElement) {\r\n    this.config = config;\r\n    this.hostElement = hostElement;\r\n    this.input = input;\r\n  }\r\n\r\n  public init(): void {\r\n    this.addEventListeners();\r\n    this.setupResizeObserver();\r\n  }\r\n\r\n  private addEventListeners(): void {\r\n    this.input.addEventListener('input', this.handleInput);\r\n    this.input.addEventListener('keydown', this.handleKeydown);\r\n    this.input.addEventListener('blur', this.handleBlur);\r\n    this.input.addEventListener('focus', this.handleFocus);\r\n    document.addEventListener('click', this.handleClickOutside);\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  private setupResizeObserver(): void {\r\n    this.resizeObserver = new ResizeObserver(this.handleResize);\r\n    const containerParent = this.getContainerParent();\r\n    this.resizeObserver.observe(containerParent);\r\n  }\r\n\r\n  private readonly handleInput = (): void => {\r\n    const query = this.input.value.trim();\r\n    query ? this.getSuggestions(query) : this.clearResults();\r\n  };\r\n\r\n  private readonly handleKeydown = (event: KeyboardEvent): void => {\r\n    if (!this.resultsContainer) return;\r\n\r\n    const items = this.resultsContainer.querySelectorAll('li');\r\n    let activeIndex = Array.from(items).findIndex((item) => item.classList.contains('active'));\r\n\r\n    switch (event.key) {\r\n      case 'ArrowDown':\r\n      case 'ArrowUp':\r\n        activeIndex = this.handleArrowKeys(event.key, activeIndex, items.length);\r\n        this.setActiveItem(items, activeIndex);\r\n        event.preventDefault();\r\n        break;\r\n      case 'Enter':\r\n        // only continue if activeIndex there is an active item\r\n        if (activeIndex !== -1) {\r\n          this.handleEnterKey(activeIndex, items);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        this.clearResults();\r\n        break;\r\n    }\r\n  };\r\n\r\n  private readonly handleArrowKeys = (\r\n    key: string,\r\n    activeIndex: number,\r\n    itemsLength: number\r\n  ): number => {\r\n    return key === 'ArrowDown'\r\n      ? (activeIndex + 1) % itemsLength\r\n      : (activeIndex - 1 + itemsLength) % itemsLength;\r\n  };\r\n\r\n  private readonly handleEnterKey = (activeIndex: number, items: NodeListOf<Element>): void => {\r\n    if (activeIndex !== -1) {\r\n      const selectedItem = items[activeIndex];\r\n      this.handleItemSelection({\r\n        name: selectedItem.textContent || '',\r\n        type: selectedItem.getAttribute('data-type') || '',\r\n      });\r\n    }\r\n  };\r\n\r\n  private readonly handleBlur = (): void => {\r\n    setTimeout(() => this.clearResults(), 200);\r\n  };\r\n\r\n  private readonly handleFocus = (): void => {\r\n    const inputValue = this.input.value.trim();\r\n    if (this.config.fetchOnFocus) {\r\n      const query = inputValue || this.config.defaultQuery || '';\r\n      this.getSuggestions(query);\r\n    } else if (inputValue) {\r\n      this.getSuggestions(inputValue);\r\n    }\r\n  };\r\n\r\n  private readonly handleClickOutside = (event: MouseEvent): void => {\r\n    if (!this.hostElement.shadowRoot?.contains(event.target as Node)) {\r\n      this.clearResults();\r\n    }\r\n  };\r\n\r\n  private readonly handleResize = (): void => {\r\n    if (this.resultsContainer) {\r\n      const containerParent = this.getContainerParent();\r\n      this.setResultsContainerStyles(this.resultsContainer, containerParent);\r\n    }\r\n  };\r\n\r\n  private readonly getSuggestions = async (query: string): Promise<AutocompleteResponse> => {\r\n    if (!this.config.fetchOnFocus && query.length < this.config.minChars) {\r\n      this.clearResults();\r\n      return { query, results: [] };\r\n    }\r\n\r\n    try {\r\n      let data: AutocompleteResponse;\r\n\r\n      if (this.config.onFetch) {\r\n        // Use the custom fetch function if provided\r\n        data = await this.config.onFetch(query);\r\n      } else if (this.config.url) {\r\n        // Fall back to the default fetch method if url is provided\r\n        const url = this.config.url.replace(\r\n          this.config.searchTermPlaceholder,\r\n          encodeURIComponent(query) + (this.config.additionalParameters || '')\r\n        );\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n        data = await response.json();\r\n      } else {\r\n        throw new Error('No fetch function or URL provided in the configuration');\r\n      }\r\n\r\n      data.results.length > 0 ? this.displayResults(data) : this.clearResults();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching autocomplete suggestions:', error);\r\n      this.clearResults();\r\n      return { query, results: [] };\r\n    }\r\n  };\r\n\r\n  private displayResults(data: AutocompleteResponse): void {\r\n    const containerParent = this.getContainerParent();\r\n    this.clearResults();\r\n    if (data.results.length === 0) return;\r\n\r\n    this.resultsContainer = this.createResultsContainer(containerParent);\r\n    // Apply maxResults limit\r\n    const limitedResults = this.config.maxResults\r\n      ? data.results.slice(0, this.config.maxResults)\r\n      : data.results;\r\n    this.populateResultsContainer(limitedResults);\r\n    this.updateInputAttributes();\r\n  }\r\n\r\n  private getContainerParent(): HTMLElement {\r\n    const containerParent =\r\n      this.hostElement.shadowRoot?.querySelector(this.config.selector);\r\n    if (!containerParent) {\r\n      throw new Error(`Container parent element not found: ${this.config.selector}`);\r\n    }\r\n    return containerParent as HTMLElement;\r\n  }\r\n\r\n  private createResultsContainer(containerParent: HTMLElement): HTMLUListElement {\r\n    const resultsContainer = document.createElement('ul');\r\n    resultsContainer.className = this.config.resultListClass;\r\n    resultsContainer.setAttribute('role', 'listbox');\r\n    resultsContainer.id = 'autocomplete-results';\r\n    resultsContainer.setAttribute('tabindex', '-1'); // Add this line\r\n    this.setResultsContainerStyles(resultsContainer, containerParent);\r\n    containerParent.insertAdjacentElement('afterend', resultsContainer);\r\n    return resultsContainer;\r\n  }\r\n\r\n  private setResultsContainerStyles(container: HTMLUListElement, parent: HTMLElement): void {\r\n    const parentWidth = parent.getBoundingClientRect().width;\r\n    container.style.boxSizing = 'border-box';\r\n    container.style.maxWidth = `${parentWidth}px`;\r\n    container.style.width = '100%';\r\n  }\r\n\r\n  private populateResultsContainer(results: AutocompleteItem[]): void {\r\n    const inputValue = this.input.value.trim();\r\n    const highlightRegex = new RegExp(`(${this.escapeRegExp(inputValue)})`, 'gi');\r\n\r\n    results.forEach((result, index) => {\r\n      const resultItem = document.createElement('li');\r\n\r\n      if (this.config.highlightResults) {\r\n        resultItem.innerHTML = result.name.replace(highlightRegex, '<mark>$1</mark>');\r\n      } else {\r\n        resultItem.textContent = result.name;\r\n      }\r\n\r\n      resultItem.setAttribute('role', 'option');\r\n      resultItem.setAttribute('data-type', result.type);\r\n      resultItem.id = `autocomplete-item-${index}`;\r\n      resultItem.addEventListener('click', () => this.handleItemSelection(result));\r\n      this.resultsContainer?.appendChild(resultItem);\r\n    });\r\n  }\r\n\r\n  private escapeRegExp(string: string): string {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n\r\n  private updateInputAttributes(): void {\r\n    this.input.setAttribute('aria-autocomplete', 'list');\r\n    this.input.setAttribute('aria-controls', 'autocomplete-results');\r\n  }\r\n\r\n  private handleItemSelection(selectedItem: AutocompleteItem): void {\r\n    if (this.config.onSelect) {\r\n      this.config.onSelect(selectedItem);\r\n    }\r\n\r\n    this.input.value = selectedItem.name;\r\n\r\n    if (this.config.closeOnSelect) {\r\n      this.clearResults();\r\n    }\r\n  }\r\n\r\n  private setActiveItem(items: NodeListOf<Element>, activeIndex: number): void {\r\n    items.forEach((item, index) => {\r\n      item.classList.toggle('active', index === activeIndex);\r\n      if (index === activeIndex) {\r\n        (item as HTMLElement).scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearResults(): void {\r\n    this.resultsContainer?.remove();\r\n    this.resultsContainer = null;\r\n  }\r\n\r\n  public destroy(): void {\r\n    window.removeEventListener('resize', this.handleResize);\r\n    this.resizeObserver?.disconnect();\r\n    this.clearResults();\r\n    // Remove other event listeners if necessary\r\n  }\r\n}\r\n","import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",":host {\r\n  display: inline-flex;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  --search-height: 56px;\r\n\r\n  @include media-min(md) {\r\n    --search-height: 100%;\r\n  }\r\n}\r\n\r\n.search-toggle {\r\n  background: none;\r\n  border: none;\r\n  padding: 0;\r\n  height: var(--search-height);\r\n  width: var(--search-height);\r\n  display: grid;\r\n  place-content: center;\r\n  cursor: pointer;\r\n  background-color: $color-turquoise-01;\r\n  z-index: 1;\r\n\r\n  &.is-active {\r\n    z-index: 0;\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: 2px solid $color-dark-blue-02;\r\n    outline-offset: -12px;\r\n\r\n    @include media-min(md) {\r\n      outline-offset: -24px;\r\n    }\r\n  }\r\n\r\n  @include media-min(xl) {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.search-container {\r\n  height: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  width: 100vw;\r\n  transition:\r\n    height 0.3s ease,\r\n    overflow 0.3s ease;\r\n  transition-behavior: allow-discrete;\r\n\r\n  @include media-min(md) {\r\n    transition: width 0.3s ease;\r\n    height: var(--search-height);\r\n    top: 0;\r\n    width: 100%;\r\n  }\r\n\r\n  &.is-active {\r\n    height: var(--search-height);\r\n    overflow: visible;\r\n\r\n    @include media-min(md) {\r\n      height: var(--search-height);\r\n      width: var(--search-expand-size, 50%);\r\n    }\r\n\r\n    input {\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  .search-input-container {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n\r\n    @include media-min(md) {\r\n      position: relative;\r\n    }\r\n  }\r\n\r\n  input {\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-block: 16px;\r\n    padding-inline: 60px;\r\n    border: 0;\r\n    border-radius: 0;\r\n    font-size: 12px;\r\n    line-height: 20px;\r\n    font-weight: 400;\r\n    outline: none;\r\n    font-family: 'Bosch Sans';\r\n    background-color: $color-turquoise-01;\r\n    color: $color-black;\r\n    box-sizing: border-box;\r\n    transition: font-size 0.3s ease;\r\n\r\n    @include media-min(md) {\r\n      padding-block: 23px;\r\n      padding-inline: 60px;\r\n    }\r\n\r\n    //placeholder color\r\n    &::placeholder {\r\n      color: $color-black;\r\n    }\r\n\r\n    &::selection {\r\n      background-color: $color-turquoise-02;\r\n    }\r\n\r\n    // remove/hide x button for search input\r\n    &[type='search']::-webkit-search-decoration,\r\n    &[type='search']::-webkit-search-cancel-button,\r\n    &[type='search']::-webkit-search-results-button,\r\n    &[type='search']::-webkit-search-results-decoration {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n    }\r\n  }\r\n\r\n  .search-icon {\r\n    height: 32px;\r\n    width: 32px;\r\n    position: absolute;\r\n    left: 24px;\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: $color-dark-blue-02;\r\n    border-radius: 0;\r\n\r\n    &:focus-visible {\r\n      outline: 2px solid $color-dark-blue-02;\r\n    }\r\n\r\n    @include media-min(md) {\r\n      left: 24px;\r\n    }\r\n\r\n    @include media-min(lg) {\r\n      left: 24px;\r\n    }\r\n  }\r\n\r\n  .close-button {\r\n    height: 32px;\r\n    width: 32px;\r\n    position: absolute;\r\n    right: 24px;\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: $color-black;\r\n    border-radius: 0;\r\n\r\n    &:focus-visible {\r\n      outline: 2px solid $color-dark-blue-02;\r\n    }\r\n  }\r\n}\r\n\r\n@include autocomplete-results-container(48px);\r\n","import {\r\n  Component,\r\n  h,\r\n  State,\r\n  Listen,\r\n  Element,\r\n  Prop,\r\n  Method,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n} from '@stencil/core';\r\nimport {\r\n  Autocomplete,\r\n  AutocompleteConfig,\r\n  AutocompleteItem,\r\n  isBreakpointSmaller,\r\n} from '../../../utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-search',\r\n  styleUrl: 'dc-ui-header-search.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderSearch {\r\n  @Element() el: HTMLElement;\r\n  @Prop() placeholder?: string;\r\n  @Prop() value?: string;\r\n  @Prop() apiUrl?: string;\r\n  @Prop() formAction?: string;\r\n  @Prop() formTarget?: string;\r\n  @Prop() formMethod?: string;\r\n  @Prop() searchTermPlaceholder: string = '{query}';\r\n  @Prop() additionalParameters?: string;\r\n  @Prop() maxResults?: number = 10;\r\n  @Prop() highlightResults: boolean = true;\r\n\r\n  @Event() dcSearchSubmit: EventEmitter<{ value: string }>;\r\n  @Event() dcSearchSelect: EventEmitter<{ item: AutocompleteItem }>;\r\n\r\n  @State() isActive: boolean = false;\r\n  @State() isSmallViewport: boolean = isBreakpointSmaller('lg');\r\n  @State() inputValue: string = '';\r\n\r\n  private formRef?: HTMLFormElement;\r\n  private inputRef?: HTMLInputElement;\r\n  private autocomplete?: Autocomplete;\r\n\r\n  componentWillLoad() {\r\n    this.inputValue = this.value || '';\r\n  }\r\n\r\n  @Method()\r\n  async getSearchValue(): Promise<string> {\r\n    return this.inputRef?.value || '';\r\n  }\r\n\r\n  @Method()\r\n  async clearSearchValue() {\r\n    if (this.inputRef) {\r\n      this.inputRef.value = '';\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async setSearchValue(value: string) {\r\n    if (this.inputRef) {\r\n      this.inputRef.value = value;\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async toggleSearch() {\r\n    this.updateSearchDimensions();\r\n    this.isActive = !this.isActive;\r\n\r\n    // Add focus handling when opening the search\r\n    if (this.isActive) {\r\n      setTimeout(() => {\r\n        this.inputRef?.focus();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  @Listen('focusout')\r\n  handleFocusOut(event: FocusEvent) {\r\n    if (\r\n      !event.relatedTarget ||\r\n      !(event.relatedTarget as HTMLElement).closest('dc-ui-header-search')\r\n    ) {\r\n      this.isActive = false;\r\n    }\r\n  }\r\n\r\n  @Listen('keydown')\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (event.key === 'Escape') {\r\n      this.handleClose(event);\r\n    }\r\n  }\r\n\r\n  @Listen('dcHeaderHidden', { target: 'window' })\r\n  handleHeaderHidden() {\r\n    this.closeSearch();\r\n  }\r\n\r\n  private updateSearchDimensions = () => {\r\n    const parent = this.el.closest('dc-ui-header-base');\r\n    if (parent) {\r\n      parent.returnSearchExpandSize().then((size) => {\r\n        this.el.style.setProperty('--search-expand-size', `${size}px`);\r\n      });\r\n    }\r\n    this.isSmallViewport = isBreakpointSmaller('lg');\r\n  };\r\n\r\n  private handleFocus = () => {\r\n    this.updateSearchDimensions();\r\n    this.isActive = true;\r\n  };\r\n\r\n  private handleClear = () => {\r\n    if (this.inputRef) {\r\n      this.inputValue = '';\r\n    }\r\n    this.inputRef?.blur();\r\n    this.isActive = false;\r\n  };\r\n\r\n  private handleClose = (event: Event) => {\r\n    event.preventDefault();\r\n    this.closeSearch();\r\n  };\r\n\r\n  private handleToggleClick = () => {\r\n    this.handleFocus();\r\n    setTimeout(() => {\r\n      this.inputRef?.focus();\r\n    }, 0);\r\n  };\r\n\r\n  private handleInputChange = (event: Event) => {\r\n    const input = event.target as HTMLInputElement;\r\n    this.inputValue = input.value;\r\n  };\r\n\r\n  componentDidLoad() {\r\n    window.addEventListener('resize', this.updateSearchDimensions);\r\n\r\n    if (this.apiUrl && this.inputRef) {\r\n      const config: AutocompleteConfig = {\r\n        url: this.apiUrl,\r\n        searchTermPlaceholder: this.searchTermPlaceholder,\r\n        minChars: 1,\r\n        selector: '.search-input-container',\r\n        resultListClass: 'search-suggestions-list',\r\n        closeOnSelect: true,\r\n        maxResults: this.maxResults,\r\n        highlightResults: this.highlightResults,\r\n        ...(this.additionalParameters && {\r\n          additionalParameters: `&${this.additionalParameters}`,\r\n        }),\r\n        onSelect: (selectedItem) => {\r\n          if (this.inputRef) {\r\n            this.inputRef.value = selectedItem.name;\r\n            this.dcSearchSelect.emit({ item: selectedItem });\r\n\r\n            // submit the form\r\n            this.formRef?.submit();\r\n          }\r\n        },\r\n      };\r\n\r\n      this.autocomplete = new Autocomplete(config, this.el, this.inputRef);\r\n      this.autocomplete.init();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('resize', this.updateSearchDimensions);\r\n    this.autocomplete?.destroy();\r\n  }\r\n\r\n  render() {\r\n    const shouldDisableTabbing = !this.isActive && this.isSmallViewport;\r\n\r\n    return (\r\n      <Host>\r\n        <button\r\n          type=\"button\"\r\n          class={{ 'search-toggle': true, 'is-active': this.isActive }}\r\n          onClick={this.handleToggleClick}>\r\n          <dc-ui-icon\r\n            name=\"dc_search\"\r\n            size=\"medium\"\r\n            tabindex={shouldDisableTabbing ? -1 : null}></dc-ui-icon>\r\n        </button>\r\n\r\n        <form\r\n          action={this.formAction || ''}\r\n          target={this.formTarget || ''}\r\n          method={this.formMethod || ''}\r\n          ref={(el) => (this.formRef = el)}\r\n          class={{ 'search-container': true, 'is-active': this.isActive }}>\r\n          <div class=\"search-input-container\">\r\n            <button\r\n              type=\"submit\"\r\n              class=\"search-icon\"\r\n              tabindex={shouldDisableTabbing || !this.inputValue ? -1 : null}>\r\n              <dc-ui-icon\r\n                name=\"dc_search\"\r\n                size=\"medium\"></dc-ui-icon>\r\n            </button>\r\n            <input\r\n              type=\"search\"\r\n              ref={(el) => (this.inputRef = el)}\r\n              onFocus={this.handleFocus}\r\n              onInput={this.handleInputChange}\r\n              placeholder={this.placeholder}\r\n              value={this.inputValue}\r\n              tabindex={shouldDisableTabbing ? -1 : null}\r\n            />\r\n            {this.isActive && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"close-button\"\r\n                onClick={this.handleClear}>\r\n                <dc-ui-icon\r\n                  name=\"dc_close\"\r\n                  size=\"medium\"></dc-ui-icon>\r\n              </button>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  private closeSearch = () => {\r\n    this.isActive = false;\r\n    this.inputRef?.blur();\r\n  };\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["Autocomplete","constructor","config","hostElement","input","resultsContainer","resizeObserver","handleInput","query","this","value","trim","getSuggestions","clearResults","handleKeydown","event","items","querySelectorAll","activeIndex","Array","from","findIndex","item","classList","contains","key","handleArrowKeys","length","setActiveItem","preventDefault","handleEnterKey","itemsLength","selectedItem","handleItemSelection","name","textContent","type","getAttribute","handleBlur","setTimeout","handleFocus","inputValue","fetchOnFocus","defaultQuery","handleClickOutside","_a","shadowRoot","target","handleResize","containerParent","getContainerParent","setResultsContainerStyles","async","minChars","results","data","onFetch","url","Error","replace","searchTermPlaceholder","encodeURIComponent","additionalParameters","response","fetch","ok","status","json","displayResults","error","console","init","addEventListeners","setupResizeObserver","addEventListener","document","window","ResizeObserver","observe","createResultsContainer","limitedResults","maxResults","slice","populateResultsContainer","updateInputAttributes","querySelector","selector","createElement","className","resultListClass","setAttribute","id","insertAdjacentElement","container","parent","parentWidth","getBoundingClientRect","width","style","boxSizing","maxWidth","highlightRegex","RegExp","escapeRegExp","forEach","result","index","resultItem","highlightResults","innerHTML","appendChild","string","onSelect","closeOnSelect","toggle","scrollIntoView","block","inline","remove","destroy","removeEventListener","disconnect","getCurrentBreakpoint","currentBreakpoint","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeaderSearch","updateSearchDimensions","el","closest","returnSearchExpandSize","then","size","setProperty","isSmallViewport","isActive","handleClear","inputRef","blur","handleClose","closeSearch","handleToggleClick","focus","handleInputChange","componentWillLoad","getSearchValue","clearSearchValue","setSearchValue","toggleSearch","handleFocusOut","relatedTarget","handleKeyDown","handleHeaderHidden","componentDidLoad","apiUrl","Object","assign","dcSearchSelect","emit","formRef","submit","autocomplete","disconnectedCallback","render","shouldDisableTabbing","h","Host","class","onClick","tabindex","action","formAction","formTarget","method","formMethod","ref","onFocus","onInput","placeholder","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
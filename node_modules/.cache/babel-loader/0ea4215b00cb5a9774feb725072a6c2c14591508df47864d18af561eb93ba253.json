{"ast":null,"code":"import { f as forceUpdate, r as registerInstance, h, g as getElement } from './index-80864cdc.js';\nimport { g as getCss, m as mergeDeep, i as injectCSS } from './observeOptions-74693e66.js';\nimport { b as buildResponsiveStyles } from './breakpointCustom-9d1b1283.js';\nimport { p as pxToRemWithUnit } from './styles-255b1100.js';\nimport './mediaQuery-8afb3804.js';\nimport './text-styles-cd2dc550.js';\nimport './color-4d62bb24.js';\nconst getGutterJssStyle = gutter => {\n  const gutterRem = `-${pxToRemWithUnit(gutter / 2)}`;\n  return {\n    marginLeft: gutterRem,\n    marginRight: gutterRem\n  };\n};\nconst createStyles = (direction, wrap, gutter, rowGap) => {\n  return getCss({\n    '@global': {\n      ':host': Object.assign({\n        display: 'flex',\n        flex: 'auto',\n        width: 'auto'\n      }, mergeDeep(buildResponsiveStyles(direction, flexDirection => ({\n        flexDirection\n      })), buildResponsiveStyles(wrap, flexWrap => ({\n        flexWrap\n      })), buildResponsiveStyles(gutter, getGutterJssStyle), buildResponsiveStyles(rowGap, rowGap => ({\n        rowGap: pxToRemWithUnit(rowGap)\n      }))))\n    }\n  });\n};\nconst syncGridItemsProps = (host, gutter) => {\n  Array.from(host.children).forEach(item => {\n    item.gutter = gutter;\n    forceUpdate(item);\n  });\n};\nconst DcUiGrid = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.direction = 'row';\n    this.gutter = 16;\n    this.wrap = 'wrap';\n    this.rowGap = 0;\n  }\n  render() {\n    injectCSS(this.el, createStyles, this.direction, this.wrap, this.gutter, this.rowGap);\n    syncGridItemsProps(this.el, this.gutter);\n    return h(\"slot\", {\n      key: 'e4c2d4e0a5d1c19bfc104eb5c9fee511874d0697'\n    });\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { DcUiGrid as dc_ui_grid };","map":{"version":3,"names":["getGutterJssStyle","gutter","gutterRem","pxToRemWithUnit","marginLeft","marginRight","createStyles","direction","wrap","rowGap","getCss","Object","assign","display","flex","width","mergeDeep","buildResponsiveStyles","flexDirection","flexWrap","syncGridItemsProps","host","Array","from","children","forEach","item","forceUpdate","DcUiGrid","render","injectCSS","el","h","key"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-grid\\grid-styles.ts","C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-grid\\grid-utils.ts","C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-grid\\dc-ui-grid.tsx"],"sourcesContent":["import { JssStyle } from 'jss';\r\nimport {\r\n  getCss,\r\n  buildResponsiveStyles,\r\n  mergeDeep,\r\n  GetJssStyleFunction,\r\n  pxToRemWithUnit,\r\n} from '../../utils';\r\nimport {\r\n  TGridDirection,\r\n  GridDirectionType,\r\n  TGridWrap,\r\n  GridWrapType,\r\n  TGridGutterSize,\r\n  GridGutterSizeType,\r\n  TGridRowGapSize,\r\n  GridRowGapSizeType,\r\n} from './grid-utils';\r\n\r\nconst getGutterJssStyle: GetJssStyleFunction = (gutter: GridGutterSizeType): JssStyle => {\r\n  const gutterRem = `-${pxToRemWithUnit(gutter / 2)}`;\r\n\r\n  return {\r\n    marginLeft: gutterRem,\r\n    marginRight: gutterRem,\r\n  };\r\n};\r\n\r\nexport const createStyles = (\r\n  direction: TGridDirection,\r\n  wrap: TGridWrap,\r\n  gutter: TGridGutterSize,\r\n  rowGap: TGridRowGapSize\r\n): string => {\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'flex',\r\n        flex: 'auto',\r\n        width: 'auto',\r\n        ...mergeDeep(\r\n          buildResponsiveStyles(direction, (flexDirection: GridDirectionType) => ({\r\n            flexDirection,\r\n          })),\r\n          buildResponsiveStyles(wrap, (flexWrap: GridWrapType) => ({\r\n            flexWrap,\r\n          })),\r\n          buildResponsiveStyles(gutter, getGutterJssStyle),\r\n          buildResponsiveStyles(rowGap, (rowGap: GridRowGapSizeType) => ({\r\n            rowGap: pxToRemWithUnit(rowGap),\r\n          }))\r\n        ),\r\n      },\r\n    },\r\n  });\r\n};\r\n","import { forceUpdate } from '@stencil/core';\r\nimport { BreakpointCustomizable } from '../../utils';\r\nimport { DcUiGridItem } from '../dc-ui-grid-item/dc-ui-grid-item';\r\nimport { GridItemInternalHTMLProps } from '../dc-ui-grid-item/grid-item-utils';\r\n\r\nexport const GRID_DIRECTIONS = ['row', 'row-reverse', 'column', 'column-reverse'] as const;\r\nexport type GridDirectionType = typeof GRID_DIRECTIONS[number];\r\nexport type TGridDirection = BreakpointCustomizable<GridDirectionType>;\r\n\r\nexport const GRID_WRAPS = ['nowrap', 'wrap', 'wrap-reverse'] as const;\r\nexport type GridWrapType = typeof GRID_WRAPS[number];\r\nexport type TGridWrap = BreakpointCustomizable<GridWrapType>;\r\n\r\nexport const GRID_GUTTER_SIZES = [0, 8, 16, 24, 32, 40, 48] as const;\r\nexport type GridGutterSizeType = typeof GRID_GUTTER_SIZES[number];\r\nexport type TGridGutterSize = BreakpointCustomizable<GridGutterSizeType>;\r\n\r\nexport const GRID_ROW_GAP_SIZES = [0, 8, 16, 24, 32, 40, 48] as const;\r\nexport type GridRowGapSizeType = typeof GRID_ROW_GAP_SIZES[number];\r\nexport type TGridRowGapSize = BreakpointCustomizable<GridRowGapSizeType>;\r\n\r\nexport const syncGridItemsProps = (host: HTMLElement, gutter: TGridGutterSize): void => {\r\n  Array.from(host.children).forEach(\r\n    (item: HTMLElement & DcUiGridItem & GridItemInternalHTMLProps) => {\r\n      item.gutter = gutter;\r\n      forceUpdate(item);\r\n    }\r\n  );\r\n};\r\n","import { Component, h, Prop, Element } from '@stencil/core';\r\nimport { injectCSS } from '../../utils';\r\nimport { createStyles } from './grid-styles';\r\nimport {\r\n  syncGridItemsProps,\r\n  TGridDirection,\r\n  TGridGutterSize,\r\n  TGridWrap,\r\n  TGridRowGapSize,\r\n} from './grid-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-grid',\r\n  shadow: true,\r\n})\r\nexport class DcUiGrid {\r\n  @Element() el: HTMLElement;\r\n  @Prop() direction: TGridDirection = 'row';\r\n  @Prop({ mutable: true, reflect: true }) gutter: TGridGutterSize = 16;\r\n  @Prop() wrap: TGridWrap = 'wrap';\r\n  @Prop() rowGap: TGridRowGapSize = 0;\r\n\r\n  render() {\r\n    injectCSS(this.el, createStyles, this.direction, this.wrap, this.gutter, this.rowGap);\r\n    syncGridItemsProps(this.el, this.gutter);\r\n\r\n    return <slot />;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;AAmBA,MAAMA,iBAAiB,GAAyBC,MAA0B;EACxE,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACF,MAAM,GAAG,CAAC,CAAC,EAAE;EAEnD,OAAO;IACLG,UAAU,EAAEF,SAAS;IACrBG,WAAW,EAAEH;GACd;AACH,CAAC;AAEM,MAAMI,YAAY,GAAGA,CAC1BC,SAAyB,EACzBC,IAAe,EACfP,MAAuB,EACvBQ,MAAuB;EAEvB,OAAOC,MAAM,CAAC;IACZ,SAAS,EAAE;MACT,OAAO,EAAAC,MAAA,CAAAC,MAAA;QACLC,OAAO,EAAE,MAAM;QACfC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE;MAAM,GACVC,SAAS,CACVC,qBAAqB,CAACV,SAAS,EAAGW,aAAgC,KAAM;QACtEA;OACD,CAAC,CAAC,EACHD,qBAAqB,CAACT,IAAI,EAAGW,QAAsB,KAAM;QACvDA;OACD,CAAC,CAAC,EACHF,qBAAqB,CAAChB,MAAM,EAAED,iBAAiB,CAAC,EAChDiB,qBAAqB,CAACR,MAAM,EAAGA,MAA0B,KAAM;QAC7DA,MAAM,EAAEN,eAAe,CAACM,MAAM;OAC/B,CAAC,CAAC,CACJ;;GAGN,CAAC;AACJ,CAAC;AClCM,MAAMW,kBAAkB,GAAGA,CAACC,IAAiB,EAAEpB,MAAuB;EAC3EqB,KAAK,CAACC,IAAI,CAACF,IAAI,CAACG,QAAQ,CAAC,CAACC,OAAO,CAC9BC,IAA4D;IAC3DA,IAAI,CAACzB,MAAM,GAAGA,MAAM;IACpB0B,WAAW,CAACD,IAAI,CAAC;GAClB,CACF;AACH,CAAC;MCbYE,QAAQ;;;qBAEiB,KAAK;kBACyB,EAAE;gBAC1C,MAAM;kBACE,CAAC;;EAEnCC,MAAMA,CAAA;IACJC,SAAS,CAAC,IAAI,CAACC,EAAE,EAAEzB,YAAY,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACP,MAAM,EAAE,IAAI,CAACQ,MAAM,CAAC;IACrFW,kBAAkB,CAAC,IAAI,CAACW,EAAE,EAAE,IAAI,CAAC9B,MAAM,CAAC;IAExC,OAAO+B,CAAA;MAAAC,GAAA;IAAA,EAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
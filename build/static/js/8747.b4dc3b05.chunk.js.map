{"version":3,"file":"static/js/8747.b4dc3b05.chunk.js","mappings":"uHAAaA,EAAQ,CACnBC,WAAY,UAEZC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UAEbC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UAERC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,SAAU,UACVC,SAAU,UACVC,SAAU,UAEVC,MAAO,UACPC,MAAO,UACPC,MAAO,UAEPC,SAAU,UACVC,SAAU,UAEVC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,MAAO,UACPC,MAAO,U,kGC1CT,MA+BaC,EAAgBC,IAC3B,MAAM,eAAEC,EAAc,iBAAEC,GA/BxBF,KAEA,IAAIC,EACAC,EAEJ,OAAQF,GACN,IAAK,UAgBL,QAIE,OAHAC,EAAiBvC,EAAAA,EAAWiC,WAC5BO,EAAmBxC,EAAAA,EAAWmC,MAEvB,CAAEI,iBAAgBC,oBAf3B,IAAK,YAIH,OAHAD,EAAiBvC,EAAAA,EAAWK,YAC5BmC,EAAmBxC,EAAAA,EAAWiC,WAEvB,CAAEM,iBAAgBC,oBAC3B,IAAK,WAIH,OAHAD,EAAiBvC,EAAAA,EAAWY,OAC5B4B,EAAmBxC,EAAAA,EAAWiC,WAEvB,CAAEM,iBAAgBC,oB,EAWgBC,CAAgBH,GAqB7D,OAnBeI,EAAAA,EAAAA,GAAO,CACpB,UAAW,CACT,QAAS,CACPC,WAAY,yBACZC,cAAe,YACfC,SAAU,OACVC,WAAY,OACZC,cAAe,SACfC,WAAY,OACZC,QAAS,cACTC,WAAY,SACZC,eAAgB,SAChBC,gBAAiBb,EACjBvC,MAAOwC,EACPa,QAAS,aAKF,EC/CFC,EAAa,M,4CAEa,S,CAErCC,iBAAAA,IACEC,EAAAA,EAAAA,I,CAGFC,MAAAA,GAGE,OAFAC,EAAAA,EAAAA,GAAUC,KAAKC,KAAMvB,EAAcsB,KAAKrB,UAGtCuB,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAA,QAAAE,IAAA,6C,mECtBD,MAAMC,EAAO,CAClBC,IAAK,0DACLC,OAAQ,aACRC,KAAM,CACJC,MAAO,OACPC,OAAQ,SACRC,MAAO,S,SAKKd,IAId,GACEe,SAASC,cAAc,cAAcR,EAAKC,UAC1CM,SAASC,cAAc,4CAEvB,OAGF,MAAMC,EAAOF,SAASG,cAAc,QACpCD,EAAKE,IAAM,aACXF,EAAKG,KAAOZ,EAAKC,IACjBM,SAASM,KAAKC,YAAYL,EAC5B,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-indicator/indicator-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-indicator/dc-ui-indicator.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/font.ts"],"sourcesContent":["export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { getCss, color as colorUtils } from '../../utils';\r\nimport { TIndicatorVariant } from './indicator-utils';\r\n\r\nconst getVariantColor = (\r\n  variant: TIndicatorVariant\r\n): { variantBgColor: string; variantTextColor: string } => {\r\n  let variantBgColor;\r\n  let variantTextColor;\r\n\r\n  switch (variant) {\r\n    case 'primary':\r\n      variantBgColor = colorUtils.darkBlue02;\r\n      variantTextColor = colorUtils.white;\r\n\r\n      return { variantBgColor, variantTextColor };\r\n    case 'secondary':\r\n      variantBgColor = colorUtils.turquoise01;\r\n      variantTextColor = colorUtils.darkBlue02;\r\n\r\n      return { variantBgColor, variantTextColor };\r\n    case 'tertiary':\r\n      variantBgColor = colorUtils.grey02;\r\n      variantTextColor = colorUtils.darkBlue02;\r\n\r\n      return { variantBgColor, variantTextColor };\r\n\r\n    default:\r\n      variantBgColor = colorUtils.darkBlue02;\r\n      variantTextColor = colorUtils.white;\r\n\r\n      return { variantBgColor, variantTextColor };\r\n  }\r\n};\r\n\r\nexport const createStyles = (variant: TIndicatorVariant): string => {\r\n  const { variantBgColor, variantTextColor } = getVariantColor(variant);\r\n\r\n  const styles = getCss({\r\n    '@global': {\r\n      ':host': {\r\n        fontFamily: 'Bosch Sans, sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontSize: '12px',\r\n        lineHeight: '16px',\r\n        letterSpacing: '0.32px',\r\n        fontWeight: 'bold',\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: variantBgColor,\r\n        color: variantTextColor,\r\n        padding: '4px 8px',\r\n      },\r\n    },\r\n  });\r\n\r\n  return styles;\r\n};\r\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\r\nimport { TIndicatorVariant } from './indicator-utils';\r\nimport { createStyles } from './indicator-styles';\r\nimport { injectCSS, injectFont } from '../../utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-indicator',\r\n  shadow: true,\r\n})\r\nexport class DcUiIndicator {\r\n  @Element() public host!: HTMLElement;\r\n  @Prop() variant: TIndicatorVariant = 'primary';\r\n\r\n  componentWillLoad() {\r\n    injectFont();\r\n  }\r\n\r\n  render() {\r\n    injectCSS(this.host, createStyles, this.variant);\r\n\r\n    return (\r\n      <Host>\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export const font = {\r\n  url: 'https://dc-webtoolkit.azureedge.net/font/fontStyles.css',\r\n  family: 'Bosch Sans',\r\n  size: {\r\n    small: '1rem',\r\n    medium: '1.5rem',\r\n    large: '2rem',\r\n  },\r\n};\r\n\r\n// inject font into the document\r\nexport function injectFont() {\r\n  // console.log('injectFont -- disabled');\r\n\r\n  // check if the font is already injected\r\n  if (\r\n    document.querySelector(`link[href=\"${font.url}\"]`) ||\r\n    document.querySelector(`link[href*=\"nextgen-web-ui-toolkit.css\"]`)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const link = document.createElement('link');\r\n  link.rel = 'stylesheet';\r\n  link.href = font.url;\r\n  document.head.appendChild(link);\r\n}\r\n"],"names":["color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","variant","variantBgColor","variantTextColor","getVariantColor","getCss","fontFamily","textTransform","fontSize","lineHeight","letterSpacing","fontWeight","display","alignItems","justifyContent","backgroundColor","padding","DcUiIndicator","componentWillLoad","injectFont","render","injectCSS","this","host","h","Host","key","font","url","family","size","small","medium","large","document","querySelector","link","createElement","rel","href","head","appendChild"],"sourceRoot":""}
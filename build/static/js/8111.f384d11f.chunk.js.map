{"version":3,"file":"static/js/8111.f384d11f.chunk.js","mappings":"oKAEaA,EAAuBA,KAClC,IAAIC,EACJ,MAAMC,EAAQC,OAAOC,WAkBrB,OAfEH,EADEC,EAAQG,EAAAA,EAAYC,GACF,MACXJ,EAAQG,EAAAA,EAAYE,GACT,KACXL,EAAQG,EAAAA,EAAYG,GACT,KACXN,EAAQG,EAAAA,EAAYI,GACT,KACXP,EAAQG,EAAAA,EAAYK,GACT,KACXR,EAAQG,EAAAA,EAAYM,IACT,KAEA,MAGfV,CAAiB,EASbW,EAA6BC,GACjCV,OAAOC,YAAcC,EAAAA,EAAYQ,GAS7BC,EAA8BD,GAClCV,OAAOC,YAAcC,EAAAA,EAAYQ,GA8B7BE,EAAuBF,GAC3BV,OAAOC,WAAaC,EAAAA,EAAYQ,E,iGCzEzC,MCQaG,EAAgB,M,8EAsBV,KAAAC,aAAe,KAC9BC,KAAKC,SAAWD,KAAKE,aAAa,EAGnB,KAAAC,YAAc,KAC7BH,KAAKI,MAAQJ,KAAKI,KAClBJ,KAAKK,YAAYC,KAAKN,KAAKI,KAAK,E,WA3BO,E,cACDJ,KAAKE,a,CAI7C,oBAAMK,GACJP,KAAKI,MAAQJ,KAAKI,I,CAGpBI,gBAAAA,GACEvB,OAAOwB,iBAAiB,SAAUT,KAAKD,a,CAGzCW,oBAAAA,GACEzB,OAAO0B,oBAAoB,SAAUX,KAAKD,a,CAGpCG,WAAAA,GACN,OAAOL,EAAAA,EAAAA,GAAoB,MAAQ,SAAW,O,CAYhDe,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,UAAAC,IAAA,2CAAQC,QAASf,KAAKG,cACpBU,EAAAA,EAAAA,GAAA,cAAAC,IAAA,2CACEE,KAAMhB,KAAKI,KAAO,WAAa,iBAC/Ba,KAAMjB,KAAKC,W,WD5CO,yxB,uDECfd,EAAqD,CAChE+B,IAAK,EACL9B,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,IAAK,M,SAYS0B,EAAcC,GAC5B,MAAO,oBAAoBjC,EAAYiC,OACzC,C,SAQgBC,EAAcC,GAC5B,MAAO,oBAAoBnC,EAAYmC,GAAO,MAChD,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-burger/dc-ui-header-burger.scss?tag=dc-ui-header-burger&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-burger/dc-ui-header-burger.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",":host {\r\n  /* Component styles go here */\r\n}\r\n\r\nbutton {\r\n  display: grid;\r\n  place-items: center;\r\n  appearance: none;\r\n  border: none;\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: $color-red-brand-01;\r\n  padding: 0;\r\n\r\n  &:hover {\r\n    background-color: $color-red-brand-02;\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: 2px solid $color-black;\r\n    outline-offset: -12px;\r\n\r\n    @include media-min(md) {\r\n      outline-offset: -24px;\r\n    }\r\n  }\r\n\r\n  dc-ui-icon {\r\n    color: $color-white;\r\n  }\r\n}\r\n","import { Component, h, Prop, State, Event, EventEmitter, Method } from '@stencil/core';\r\nimport { isBreakpointSmaller } from '../../../utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-burger',\r\n  styleUrl: 'dc-ui-header-burger.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderBurger {\r\n  @Prop({ reflect: true }) open: boolean = false;\r\n  @State() iconSize: 'medium' | 'large' = this.getIconSize();\r\n  @Event() burgerClick: EventEmitter<boolean>;\r\n\r\n  @Method()\r\n  async dcToggleBurger() {\r\n    this.open = !this.open;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  private getIconSize() {\r\n    return isBreakpointSmaller('md') ? 'medium' : 'large';\r\n  }\r\n\r\n  private readonly handleResize = () => {\r\n    this.iconSize = this.getIconSize();\r\n  };\r\n\r\n  private readonly handleClick = () => {\r\n    this.open = !this.open;\r\n    this.burgerClick.emit(this.open);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button onClick={this.handleClick}>\r\n        <dc-ui-icon\r\n          name={this.open ? 'dc_close' : 'dc_list_mobile'}\r\n          size={this.iconSize}></dc-ui-icon>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeaderBurger","handleResize","this","iconSize","getIconSize","handleClick","open","burgerClick","emit","dcToggleBurger","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","render","h","key","onClick","name","size","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
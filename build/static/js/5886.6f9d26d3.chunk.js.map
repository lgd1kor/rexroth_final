{"version":3,"file":"static/js/5886.6f9d26d3.chunk.js","mappings":"wJAAA,MCSaA,EAAiB,M,+BAoBpB,KAAAC,eAAyB,IAiDzB,KAAAC,aAAe,KACrBC,KAAKC,OAASD,KAAKE,QAAUF,KAAKG,MAAM,E,oCA/DxB,E,mBAGsB,Q,sBAEL,Y,wBACE,Y,iBAEf,E,aACJ,C,CAMVC,uBAAAA,GAGDJ,KAAKK,mBACRL,KAAKK,iBAAmB,aAErBL,KAAKM,qBACRN,KAAKM,mBAAqB,Y,CAItBC,sBAAAA,GAGFP,KAAKQ,WAAaR,KAAKF,iBACzBE,KAAKS,SAAU,E,CAInBC,gBAAAA,GACEV,KAAKI,0BACLJ,KAAKO,yBACLP,KAAKW,qBACLX,KAAKY,sBACLZ,KAAKa,6BACLb,KAAKc,GAAGC,MAAMC,YAAY,WAAY,GAAGhB,KAAKQ,c,CAGhDS,oBAAAA,GACMjB,KAAKkB,gBACPlB,KAAKkB,eAAeC,Y,CAIhBP,mBAAAA,GACNZ,KAAKkB,eAAiB,IAAIE,gBAAe,KACvCpB,KAAKW,oBAAoB,IAG3BX,KAAKkB,eAAeG,QAAQrB,KAAKsB,U,CAG3BX,kBAAAA,GACN,MAAMY,EAAgBvB,KAAKsB,UAAUE,aACrCxB,KAAKyB,WAAaF,EAAgBvB,KAAKQ,S,CAOjCL,IAAAA,GACNH,KAAKC,QAAS,EACdD,KAAK0B,e,CAGCxB,KAAAA,GACNF,KAAKC,QAAS,EACdD,KAAK0B,e,CAGCA,aAAAA,GACN,GAAI1B,KAAKC,OAAQ,CAEf,MAAM0B,EAAc3B,KAAKQ,UACzBR,KAAKc,GAAGC,MAAMC,YAAY,WAAY,GAAGW,OAMzC,MAAMC,EAAY5B,KAAKsB,UAAUE,aACjCxB,KAAKc,GAAGC,MAAMC,YAAY,WAAY,GAAGY,M,MAEzC5B,KAAKc,GAAGC,MAAMC,YAAY,WAAY,GAAGhB,KAAKQ,c,CAI1CK,0BAAAA,GACNb,KAAKc,GAAGe,iBAAiB,iBAAiB,KACpC7B,KAAKC,QAEPD,KAAKc,GAAGC,MAAMC,YAAY,WAAY,O,IAK5Cc,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CACEC,MAAO,CACL,kBAAkB,EAClB,CAAC,4BAA4BjC,KAAKkC,iBAAkBlC,KAAKS,WAE3DsB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CACEG,IAAMrB,GAAQd,KAAKsB,UAAYR,EAC/BmB,MAAO,CACLG,SAAS,EACT,oBAAqBpC,KAAKC,OAC1B,oBAAqBD,KAAKS,UAAYT,KAAKC,QAAUD,KAAKyB,WAC1D,CAAC,qBAAqBzB,KAAKkC,iBAAkBlC,KAAKS,UAAYT,KAAKC,UAErE8B,EAAAA,EAAAA,GAAA,QAAAC,IAAA,8CAGDhC,KAAKyB,aACJM,EAAAA,EAAAA,GAAA,UAAAC,IAAA,2CACEC,MAAM,gBACNI,QAASrC,KAAKD,aAAY,gBACXC,KAAKC,OAAS,OAAS,UACtC8B,EAAAA,EAAAA,GAAA,cAAAC,IAAA,2CACEM,KAAMtC,KAAKC,OAAS,QAAU,UAC9BsC,KAAK,SACLN,MAAM,yBAERF,EAAAA,EAAAA,GAAA,cAAAC,IAAA,2CAAYQ,QAAQ,QACjBxC,KAAKC,OAASD,KAAKM,mBAAqBN,KAAKK,mB,wCDnJ/B,wyC","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-expand-wrapper/dc-ui-expand-wrapper.scss?tag=dc-ui-expand-wrapper&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-expand-wrapper/dc-ui-expand-wrapper.tsx"],"sourcesContent":[":host {\r\n  /* Component styles go here */\r\n  display: block;\r\n}\r\n\r\n.expand-wrapper {\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  row-gap: 24px;\r\n  justify-items: start;\r\n\r\n  .content {\r\n    overflow: hidden;\r\n    position: relative;\r\n    max-height: var(--height);\r\n    transition: max-height 0.25s ease-in-out;\r\n\r\n    &--soft-cut::after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      right: 0;\r\n      height: 150px;\r\n    }\r\n\r\n    &--gradient-white::after {\r\n      background: var(--White-Gradient);\r\n    }\r\n\r\n    &--gradient-grey::after {\r\n      background: var(--Grey-Gradient);\r\n    }\r\n\r\n    &--gradient-blue::after {\r\n      background: var(--Blue-Gradient);\r\n    }\r\n  }\r\n\r\n  .expand-button {\r\n    appearance: none;\r\n    border: none;\r\n    background: none;\r\n    cursor: pointer;\r\n    display: flex;\r\n    gap: 8px;\r\n    align-items: center;\r\n    color: $color-turquoise-04;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  &--gradient-blue {\r\n    .expand-button {\r\n      color: $color-turquoise-01;\r\n    }\r\n  }\r\n}\r\n","import { Component, h, Prop, State, Element } from '@stencil/core';\r\n\r\nexport type TGradientColor = 'white' | 'grey' | 'blue';\r\n\r\n@Component({\r\n  tag: 'dc-ui-expand-wrapper',\r\n  styleUrl: 'dc-ui-expand-wrapper.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiExpandWrapper {\r\n  @Element() el: HTMLElement;\r\n\r\n  /** Maximum height before content is collapsed */\r\n  @Prop() maxHeight: number;\r\n\r\n  /** Type of content cut-off (hard or soft gradient) */\r\n  @Prop() softCut = true;\r\n\r\n  /** Color of the gradient when using soft cut */\r\n  @Prop() gradientColor: TGradientColor = 'white';\r\n\r\n  @Prop() expandButtonText: string = 'Show More';\r\n  @Prop() collapseButtonText: string = 'Show Less';\r\n\r\n  @State() showButton = false;\r\n  @State() isOpen = false;\r\n\r\n  private contentEl: HTMLElement;\r\n  private resizeObserver: ResizeObserver;\r\n  private gradientHeight: number = 150; // height of the gradient pseudo element\r\n\r\n  private validateButtonTextProps() {\r\n    // check if the button text props are provided and if they are not empty\r\n    // if they are not provided or empty, set the default text\r\n    if (!this.expandButtonText) {\r\n      this.expandButtonText = 'Show More';\r\n    }\r\n    if (!this.collapseButtonText) {\r\n      this.collapseButtonText = 'Show Less';\r\n    }\r\n  }\r\n\r\n  private validateGradientHeight() {\r\n    // check if the max-height is >= the gradient height\r\n    // if not do not use soft cut\r\n    if (this.maxHeight <= this.gradientHeight) {\r\n      this.softCut = false;\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.validateButtonTextProps();\r\n    this.validateGradientHeight();\r\n    this.checkContentHeight();\r\n    this.setupResizeObserver();\r\n    this.setupTransitionEndListener();\r\n    this.el.style.setProperty('--height', `${this.maxHeight}px`);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  private setupResizeObserver() {\r\n    this.resizeObserver = new ResizeObserver(() => {\r\n      this.checkContentHeight();\r\n    });\r\n\r\n    this.resizeObserver.observe(this.contentEl);\r\n  }\r\n\r\n  private checkContentHeight() {\r\n    const contentHeight = this.contentEl.scrollHeight;\r\n    this.showButton = contentHeight > this.maxHeight;\r\n  }\r\n\r\n  private toggleExpand = () => {\r\n    this.isOpen ? this.close() : this.open();\r\n  };\r\n\r\n  private open() {\r\n    this.isOpen = true;\r\n    this.animateExpand();\r\n  }\r\n\r\n  private close() {\r\n    this.isOpen = false;\r\n    this.animateExpand();\r\n  }\r\n\r\n  private animateExpand() {\r\n    if (this.isOpen) {\r\n      // Start from current collapsed height\r\n      const startHeight = this.maxHeight;\r\n      this.el.style.setProperty('--height', `${startHeight}px`);\r\n\r\n      // Force a reflow\r\n      this.contentEl.offsetHeight;\r\n\r\n      // Animate to the final computed height\r\n      const endHeight = this.contentEl.scrollHeight;\r\n      this.el.style.setProperty('--height', `${endHeight}px`);\r\n    } else {\r\n      this.el.style.setProperty('--height', `${this.maxHeight}px`);\r\n    }\r\n  }\r\n\r\n  private setupTransitionEndListener() {\r\n    this.el.addEventListener('transitionend', () => {\r\n      if (this.isOpen) {\r\n        // Set to auto after animation to handle dynamic content\r\n        this.el.style.setProperty('--height', 'auto');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        class={{\r\n          'expand-wrapper': true,\r\n          [`expand-wrapper--gradient-${this.gradientColor}`]: this.softCut,\r\n        }}>\r\n        <div\r\n          ref={(el) => (this.contentEl = el)}\r\n          class={{\r\n            content: true,\r\n            'content--expanded': this.isOpen,\r\n            'content--soft-cut': this.softCut && !this.isOpen && this.showButton,\r\n            [`content--gradient-${this.gradientColor}`]: this.softCut && !this.isOpen,\r\n          }}>\r\n          <slot />\r\n        </div>\r\n\r\n        {this.showButton && (\r\n          <button\r\n            class=\"expand-button\"\r\n            onClick={this.toggleExpand}\r\n            aria-expanded={this.isOpen ? 'true' : 'false'}>\r\n            <dc-ui-icon\r\n              name={this.isOpen ? 'dc_up' : 'dc_down'}\r\n              size=\"medium\"\r\n              class=\"expand-button__icon\"\r\n            />\r\n            <dc-ui-text variant=\"text\">\r\n              {this.isOpen ? this.collapseButtonText : this.expandButtonText}\r\n            </dc-ui-text>\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"names":["DcUiExpandWrapper","gradientHeight","toggleExpand","this","isOpen","close","open","validateButtonTextProps","expandButtonText","collapseButtonText","validateGradientHeight","maxHeight","softCut","componentDidLoad","checkContentHeight","setupResizeObserver","setupTransitionEndListener","el","style","setProperty","disconnectedCallback","resizeObserver","disconnect","ResizeObserver","observe","contentEl","contentHeight","scrollHeight","showButton","animateExpand","startHeight","endHeight","addEventListener","render","h","key","class","gradientColor","ref","content","onClick","name","size","variant"],"sourceRoot":""}
{"version":3,"file":"static/js/8919.379064d5.chunk.js","mappings":"uHAAaA,EAAQ,CACnBC,WAAY,UAEZC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UAEbC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UAERC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,SAAU,UACVC,SAAU,UACVC,SAAU,UAEVC,MAAO,UACPC,MAAO,UACPC,MAAO,UAEPC,SAAU,UACVC,SAAU,UAEVC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,MAAO,UACPC,MAAO,U,4FC1CF,MAAMC,EAAeA,CAC1BC,EACAC,EACAC,KAEOC,EAAAA,EAAAA,GAAO,CACZ,UAAW,CACT,QAAS,CACPC,QAAS,SAEXC,IAAGC,OAAAC,OAAAD,OAAAC,OAAAD,OAAAC,OAAA,CACDH,QAAS,QACTI,MAAO,OACPC,OAAQ,SACLC,EAAAA,EAAAA,GAAiBV,KACjBW,EAAAA,EAAAA,GAAqBT,KACrBU,EAAAA,EAAAA,GAAsBX,IAE3B,UAAW,CACTY,SAAU,WACVJ,OAAQ,MACRD,MAAO,MACPM,QAAS,MChBJC,EAAS,M,4CAEa,O,0FAKC,U,sBAGlCC,MAAAA,GAGE,OAFAC,EAAAA,EAAAA,GAAUC,KAAKC,GAAIpB,EAAcmB,KAAKlB,MAAOkB,KAAKjB,WAAYiB,KAAKhB,YAGjEkB,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CACEC,GAAG,WACHC,IAAKN,KAAKO,aAAeP,KAAKM,IAC9BE,IAAKR,KAAKQ,IACVC,QAAST,KAAKS,UAEfT,KAAKO,aAAeP,KAAKM,MACxBJ,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CACEM,MAAM,SACNJ,IAAKN,KAAKM,IACVK,OAASC,IACPZ,KAAKC,GAAGY,WAAWC,eAAe,YAAYC,aAAa,MAAOf,KAAKM,KACtEM,EAAEI,OAA4BC,QAAQ,EAEzCR,QAAST,KAAKS,U,qIC7BbS,EAAmBC,GAA0BA,EAAK,GAAR,MAK1CC,EAA2BC,GACtCA,EACI,CACE1B,SAAU,WACVL,MAAO,MACPC,OAAQ,MACR+B,OAAQ,OACRC,SAAU,SACVC,KAAM,wBACNC,SAAU,aACVC,WAAY,UAEd,CACE/B,SAAU,SACVL,MAAO,OACPC,OAAQ,OACR+B,OAAQ,EACRC,SAAU,UACVC,KAAM,OACNC,SAAU,OACVC,WAAY,UAGPC,EAAuBC,GAClCA,EACI,CACEC,SAAU,OACVN,SAAU,SACVO,aAAc,WACdJ,WAAY,UAEd,CAAC,EAEMK,EAAwCC,GACnDA,EACI,CACExF,MAAOA,EAAAA,EAAWa,OAClB4E,OAAQ,WAEV,CACEzF,MAAOA,EAAAA,EAAWiC,YAuEbe,EAAoBV,GAC/BA,EACI,CACEoD,YAAapD,EACbS,OAAQ,OACRD,MAAO,QAET,CAAC,EAEMG,EAAwBT,GACnCA,EACI,CACEA,UAAWA,GAEb,CAAC,EAEMU,EAAyBX,GACpCA,EACI,CACEoD,aAA6B,WAAfpD,EAA0B,MAAQ,KAElD,CAAC,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-image/image-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-image/dc-ui-image.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/styles.ts"],"sourcesContent":["export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { getCss, getImageStyleJssStyle, getObjectFitJssStyle, getRatioJssStyle } from '../../utils';\r\nimport { TImageObjectFit, TImageStyle } from './image-utils';\r\n\r\nexport const createStyles = (\r\n  ratio: string,\r\n  imageStyle: TImageStyle,\r\n  objectFit: TImageObjectFit\r\n): string => {\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'block',\r\n      },\r\n      img: {\r\n        display: 'block',\r\n        width: '100%',\r\n        height: 'auto',\r\n        ...getRatioJssStyle(ratio),\r\n        ...getObjectFitJssStyle(objectFit),\r\n        ...getImageStyleJssStyle(imageStyle),\r\n      },\r\n      '.hidden': {\r\n        position: 'absolute',\r\n        height: '1px',\r\n        width: '1px',\r\n        opacity: 0,\r\n      },\r\n    },\r\n  });\r\n};\r\n","import { Component, h, Element, Prop, Host } from '@stencil/core';\r\nimport { TImageLoading, TImageObjectFit, TImageStyle } from './image-utils';\r\nimport { injectCSS } from '../../utils';\r\nimport { createStyles } from './image-styles';\r\n\r\n@Component({\r\n  tag: 'dc-ui-image',\r\n  shadow: true,\r\n})\r\nexport class DcUiImage {\r\n  @Element() el: HTMLElement;\r\n  @Prop() loading: TImageLoading = 'lazy';\r\n  @Prop() alt?: string;\r\n  @Prop() src: string;\r\n  @Prop() fallbackSrc?: string;\r\n  @Prop() ratio?: string;\r\n  @Prop() imageStyle: TImageStyle = 'default';\r\n  @Prop() objectFit: TImageObjectFit;\r\n\r\n  render() {\r\n    injectCSS(this.el, createStyles, this.ratio, this.imageStyle, this.objectFit);\r\n\r\n    return (\r\n      <Host>\r\n        <img\r\n          id=\"fallback\"\r\n          src={this.fallbackSrc || this.src}\r\n          alt={this.alt}\r\n          loading={this.loading}\r\n        />\r\n        {this.fallbackSrc && this.src && (\r\n          <img\r\n            class=\"hidden\"\r\n            src={this.src}\r\n            onLoad={(e) => {\r\n              this.el.shadowRoot.getElementById('fallback').setAttribute('src', this.src);\r\n              (e.target as HTMLImageElement).remove();\r\n            }}\r\n            loading={this.loading}\r\n          />\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import type { JssStyle } from 'jss';\r\nimport { color as colorUtils } from '../variables/color';\r\n\r\nexport const IMAGE_STYLE = ['default', 'circle'];\r\nexport type TImageStyle = (typeof IMAGE_STYLE)[number];\r\n\r\nexport const IMAGE_OBJECT_FIT = ['fill', 'contain', 'cover', 'none', 'scale-down'];\r\nexport type TImageObjectFit = (typeof IMAGE_OBJECT_FIT)[number];\r\n\r\nexport const pxToRemWithUnit = (px: number): string => `${px / 16}rem`;\r\n\r\n/**\r\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\r\n */\r\nexport const getScreenReaderJssStyle = (isHidden: boolean): JssStyle =>\r\n  isHidden\r\n    ? {\r\n        position: 'absolute',\r\n        width: '1px',\r\n        height: '1px',\r\n        margin: '-1px',\r\n        overflow: 'hidden',\r\n        clip: 'rect(1px,1px,1px,1px)',\r\n        clipPath: 'inset(50%)',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {\r\n        position: 'static',\r\n        width: 'auto',\r\n        height: 'auto',\r\n        margin: 0,\r\n        overflow: 'visible',\r\n        clip: 'auto',\r\n        clipPath: 'none',\r\n        whiteSpace: 'normal',\r\n      };\r\n\r\nexport const getEllipsisJssStyle = (isEllipsis: boolean): JssStyle =>\r\n  isEllipsis\r\n    ? {\r\n        maxWidth: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {};\r\n\r\nexport const getDisabledCheckboxRadioTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getDisabledInputTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getInputJssStyle = (type: string): JssStyle => {\r\n  let inputStyles = {};\r\n\r\n  switch (type) {\r\n    case 'date':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green01,\r\n      };\r\n      break;\r\n    case 'email':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green02,\r\n      };\r\n      break;\r\n    case 'file':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green03,\r\n      };\r\n      break;\r\n    case 'hidden':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red01,\r\n      };\r\n      break;\r\n    case 'number':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red02,\r\n      };\r\n      break;\r\n    case 'password':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red03,\r\n      };\r\n      break;\r\n    case 'search':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow01,\r\n      };\r\n      break;\r\n    case 'tel':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow02,\r\n      };\r\n      break;\r\n    case 'url':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow03,\r\n      };\r\n      break;\r\n    default:\r\n      inputStyles = {\r\n        borderColor: colorUtils.grey05,\r\n      };\r\n  }\r\n\r\n  return inputStyles;\r\n};\r\n\r\nexport const getRatioJssStyle = (ratio: string): JssStyle =>\r\n  ratio\r\n    ? {\r\n        aspectRatio: ratio,\r\n        height: '100%',\r\n        width: '100%',\r\n      }\r\n    : {};\r\n\r\nexport const getObjectFitJssStyle = (objectFit: TImageObjectFit): JssStyle =>\r\n  objectFit\r\n    ? {\r\n        objectFit: objectFit,\r\n      }\r\n    : {};\r\n\r\nexport const getImageStyleJssStyle = (imageStyle: TImageStyle): JssStyle =>\r\n  imageStyle\r\n    ? {\r\n        borderRadius: imageStyle === 'circle' ? '50%' : '0',\r\n      }\r\n    : {};\r\n"],"names":["color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","ratio","imageStyle","objectFit","getCss","display","img","Object","assign","width","height","getRatioJssStyle","getObjectFitJssStyle","getImageStyleJssStyle","position","opacity","DcUiImage","render","injectCSS","this","el","h","Host","key","id","src","fallbackSrc","alt","loading","class","onLoad","e","shadowRoot","getElementById","setAttribute","target","remove","pxToRemWithUnit","px","getScreenReaderJssStyle","isHidden","margin","overflow","clip","clipPath","whiteSpace","getEllipsisJssStyle","isEllipsis","maxWidth","textOverflow","getDisabledCheckboxRadioTextJssStyle","isDisabled","cursor","aspectRatio","borderRadius"],"sourceRoot":""}
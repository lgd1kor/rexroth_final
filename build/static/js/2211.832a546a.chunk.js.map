{"version":3,"file":"static/js/2211.832a546a.chunk.js","mappings":"sJAAA,MCOaA,EAAe,M,wEAmBlB,KAAAC,aAAuB,EACvB,KAAAC,gBAA0B,E,SAdZ,E,SAGA,I,WAGmB,E,UAGlB,G,CAefC,qBAAAA,CAAsBC,GAC5B,OAAMA,GAASC,KAAKC,IAChBF,EAAQC,KAAKE,IAAYF,KAAKE,IAC3BH,EAF0BC,KAAKC,G,CAShCE,aAAAA,CAAcJ,GACpBC,KAAKJ,cAAiBG,EAAQC,KAAKC,MAAQD,KAAKE,IAAMF,KAAKC,KAAQ,IACnED,KAAKH,gBAAmBE,EAAQC,KAAKE,IAAO,G,CAQ9C,cAAME,CAASL,GACbC,KAAKD,MAAQC,KAAKF,sBAAsBC,E,CAO1C,WAAMM,GACJL,KAAKD,MAAQC,KAAKC,G,CAQpBK,YAAAA,CAAaC,GACX,MAAMC,EAAaR,KAAKF,sBAAsBS,GAC9CP,KAAKS,SAASC,KAAKF,GACnBR,KAAKG,cAAcK,E,CAGrBG,iBAAAA,GACMX,KAAKY,KAAKC,OAASlB,EAAgBmB,iBACrCC,QAAQC,KACN,oFAAoFrB,EAAgBmB,+BAIxGd,KAAKD,MAAQC,KAAKF,sBAAsBE,KAAKD,OAC7CC,KAAKG,cAAcH,KAAKD,M,CAG1BkB,kBAAAA,GACEjB,KAAKkB,mB,CAGCA,iBAAAA,GACNC,YAAW,KACT,IAAKnB,KAAKoB,UAAYpB,KAAKqB,aAAc,OAEzC,MAAMC,EACJtB,KAAKoB,QAAQG,YACbvB,KAAKqB,aAAaE,YAAc5B,EAAgB6B,uBAElDxB,KAAKoB,QAAQK,UAAUC,OAAO,kBAAmBJ,EAAuB,GACvE3B,EAAgBgC,kB,CAGrBC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,iBACTF,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CACEE,IAAMC,GAAQjC,KAAKoB,QAAUa,EAC7BF,MAAO,CACL,sBAAsB,EACtB,kBAAmB/B,KAAKH,iBAAmB,IAE7CqC,MAAO,CAAEC,MAAO,GAAGnC,KAAKJ,mBACxBiC,EAAAA,EAAAA,GAAA,cAAAC,IAAA,2CACEE,IAAMC,GAAQjC,KAAKqB,aAAeY,EAClCG,IAAI,OACJC,QAAQ,KACRC,MAAM,aACNP,MAAM,SACL/B,KAAKD,MAAK,IAAGC,KAAKY,O,wDAnHLjB,EAAAmB,gBAAkB,EAClBnB,EAAA6B,uBAAyB,GACzB7B,EAAAgC,kBAAoB,I,QDVnB,k0B","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-progress-bar/dc-ui-progress-bar.scss?tag=dc-ui-progress-bar&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-progress-bar/dc-ui-progress-bar.tsx"],"sourcesContent":[".progress-bar {\r\n  background-color: $color-grey-02;\r\n  height: 54px;\r\n  overflow: hidden;\r\n\r\n  &__fill {\r\n    background-color: $color-turquoise-01;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 24px;\r\n    position: relative;\r\n    transition: width 0.1s ease-in-out;\r\n\r\n    .value {\r\n      padding: 0 24px;\r\n      position: absolute;\r\n      right: 0;\r\n      transition: translate 0.1s ease-in-out;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    &.value-overflows {\r\n      .value {\r\n        translate: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, h, Prop, Watch, EventEmitter, Event, Method } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dc-ui-progress-bar',\r\n  styleUrl: 'dc-ui-progress-bar.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiProgressBar {\r\n  private static readonly MAX_UNIT_LENGTH = 9;\r\n  private static readonly VALUE_OVERFLOW_PADDING = 10;\r\n  private static readonly CHECK_WIDTH_DELAY = 100;\r\n\r\n  /** Minimum value of the progress bar */\r\n  @Prop() min: number = 0;\r\n\r\n  /** Maximum value of the progress bar */\r\n  @Prop() max: number = 100;\r\n\r\n  /** Current value of the progress bar */\r\n  @Prop({ reflect: true }) value: number = 0;\r\n\r\n  /** Unit to display after the value (e.g., '%', 'MB') */\r\n  @Prop() unit: string = '%';\r\n\r\n  private fillBar?: HTMLElement;\r\n  private valueElement?: HTMLElement;\r\n  private fillBarWidth: number = 0;\r\n  private valuePercentage: number = 0;\r\n\r\n  /** Emitted when the progress bar value changes */\r\n  @Event() dcChange: EventEmitter;\r\n\r\n  /**\r\n   * Ensures the value is within the valid range between min and max\r\n   * @param value - The value to validate\r\n   * @returns The clamped value within the valid range\r\n   */\r\n  private validateAndClampValue(value: number): number {\r\n    if (!(value >= this.min)) return this.min;\r\n    if (value > this.max) return this.max;\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Updates the internal metrics used for rendering the progress bar\r\n   * @param value - The current value to calculate metrics for\r\n   */\r\n  private updateMetrics(value: number) {\r\n    this.fillBarWidth = ((value - this.min) / (this.max - this.min)) * 100;\r\n    this.valuePercentage = (value / this.max) * 100;\r\n  }\r\n\r\n  /**\r\n   * Sets the current value of the progress bar\r\n   * @param value - The new value to set\r\n   */\r\n  @Method()\r\n  async setValue(value: number) {\r\n    this.value = this.validateAndClampValue(value);\r\n  }\r\n\r\n  /**\r\n   * Resets the progress bar to its minimum value\r\n   */\r\n  @Method()\r\n  async reset() {\r\n    this.value = this.min;\r\n  }\r\n\r\n  /**\r\n   * Watches for changes to the value property\r\n   * @param newValue - The new value to process\r\n   */\r\n  @Watch('value')\r\n  valueChanged(newValue: number) {\r\n    const validValue = this.validateAndClampValue(newValue);\r\n    this.dcChange.emit(validValue);\r\n    this.updateMetrics(validValue);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    if (this.unit.length > DcUiProgressBar.MAX_UNIT_LENGTH) {\r\n      console.warn(\r\n        `dc-ui-progress-bar: Unit length is too long. Please use a unit with a maximum of ${DcUiProgressBar.MAX_UNIT_LENGTH} characters.`\r\n      );\r\n    }\r\n\r\n    this.value = this.validateAndClampValue(this.value);\r\n    this.updateMetrics(this.value);\r\n  }\r\n\r\n  componentDidRender() {\r\n    this.checkFillBarWidth();\r\n  }\r\n\r\n  private checkFillBarWidth() {\r\n    setTimeout(() => {\r\n      if (!this.fillBar || !this.valueElement) return;\r\n\r\n      const shouldAddOverflowClass =\r\n        this.fillBar.offsetWidth <\r\n        this.valueElement.offsetWidth + DcUiProgressBar.VALUE_OVERFLOW_PADDING;\r\n\r\n      this.fillBar.classList.toggle('value-overflows', shouldAddOverflowClass);\r\n    }, DcUiProgressBar.CHECK_WIDTH_DELAY);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"progress-bar\">\r\n        <div\r\n          ref={(el) => (this.fillBar = el)}\r\n          class={{\r\n            'progress-bar__fill': true,\r\n            'value-overflows': this.valuePercentage <= 50,\r\n          }}\r\n          style={{ width: `${this.fillBarWidth}%` }}>\r\n          <dc-ui-text\r\n            ref={(el) => (this.valueElement = el)}\r\n            tag=\"span\"\r\n            variant=\"h4\"\r\n            color=\"darkBlue02\"\r\n            class=\"value\">\r\n            {this.value} {this.unit}\r\n          </dc-ui-text>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"names":["DcUiProgressBar","fillBarWidth","valuePercentage","validateAndClampValue","value","this","min","max","updateMetrics","setValue","reset","valueChanged","newValue","validValue","dcChange","emit","componentWillLoad","unit","length","MAX_UNIT_LENGTH","console","warn","componentDidRender","checkFillBarWidth","setTimeout","fillBar","valueElement","shouldAddOverflowClass","offsetWidth","VALUE_OVERFLOW_PADDING","classList","toggle","CHECK_WIDTH_DELAY","render","h","key","class","ref","el","style","width","tag","variant","color"],"sourceRoot":""}
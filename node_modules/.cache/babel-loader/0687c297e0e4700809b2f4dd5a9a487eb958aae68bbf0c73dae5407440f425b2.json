{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LGD1KOR\\\\Desktop\\\\react\\\\my-app\\\\src\\\\WebViewer3D.js\",\n  _s = $RefreshSig$();\n/* global psol */\nimport React, { useEffect } from 'react';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebViewer3D = ({\n  apiData\n}) => {\n  _s();\n  useEffect(() => {\n    if (!apiData) return;\n    const loadScript = src => {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = src;\n        script.onload = () => resolve();\n        script.onerror = () => reject();\n        document.head.appendChild(script);\n      });\n    };\n    const initViewer = async () => {\n      try {\n        await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\n        await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\n        const settings = {\n          $container: $('#viewer'),\n          viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\n          webglViewerSettings: {\n            ColorTL: '#cccccc',\n            ColorTR: '#cccccc',\n            ColorML: '#eeeeee',\n            ColorMR: '#eeeeee',\n            ColorBL: '#ffffff',\n            ColorBR: '#ffffff'\n          }\n        };\n        const viewer = new psol.components.WebViewer3D(settings);\n        viewer.show().then(() => {\n          viewer.loadByUrl(apiData); // Use the API data here\n        });\n      } catch (error) {\n        console.error('Error loading PSOL scripts', error);\n      }\n    };\n    initViewer();\n  }, [apiData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"viewer\",\n    style: {\n      width: '640px',\n      height: '480px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(WebViewer3D, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = WebViewer3D;\nexport default WebViewer3D;\nvar _c;\n$RefreshReg$(_c, \"WebViewer3D\");","map":{"version":3,"names":["React","useEffect","$","jsxDEV","_jsxDEV","WebViewer3D","apiData","_s","loadScript","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","initViewer","settings","$container","viewerBackendType","psol","components","ViewerBackends","WebGL","webglViewerSettings","ColorTL","ColorTR","ColorML","ColorMR","ColorBL","ColorBR","viewer","show","then","loadByUrl","error","console","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LGD1KOR/Desktop/react/my-app/src/WebViewer3D.js"],"sourcesContent":["/* global psol */\r\nimport React, { useEffect } from 'react';\r\nimport $ from 'jquery';\r\n\r\nconst WebViewer3D = ({ apiData }) => {\r\n    useEffect(() => {\r\n        if (!apiData) return;\r\n\r\n        const loadScript = (src) => {\r\n            return new Promise((resolve, reject) => {\r\n                const script = document.createElement('script');\r\n                script.src = src;\r\n                script.onload = () => resolve();\r\n                script.onerror = () => reject();\r\n                document.head.appendChild(script);\r\n            });\r\n        };\r\n\r\n        const initViewer = async () => {\r\n            try {\r\n                await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\r\n                await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\r\n\r\n                const settings = {\r\n                    $container: $('#viewer'),\r\n                    viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\r\n                    webglViewerSettings: {\r\n                        ColorTL: '#cccccc',\r\n                        ColorTR: '#cccccc',\r\n                        ColorML: '#eeeeee',\r\n                        ColorMR: '#eeeeee',\r\n                        ColorBL: '#ffffff',\r\n                        ColorBR: '#ffffff'\r\n                    }\r\n                 };\r\n\r\n                const viewer = new psol.components.WebViewer3D(settings);\r\n\r\n                viewer.show().then(() => {\r\n                    viewer.loadByUrl(apiData);  // Use the API data here\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading PSOL scripts', error);\r\n            }\r\n        };\r\n\r\n        initViewer();\r\n    }, [apiData]);\r\n\r\n    return (\r\n        <div id=\"viewer\" style={{ width: '640px', height: '480px' }}></div>\r\n    );\r\n};\r\n\r\nexport default WebViewer3D;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,CAAC,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACjCN,SAAS,CAAC,MAAM;IACZ,IAAI,CAACK,OAAO,EAAE;IAEd,MAAME,UAAU,GAAIC,GAAG,IAAK;MACxB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/CF,MAAM,CAACJ,GAAG,GAAGA,GAAG;QAChBI,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAAC,CAAC;QAC/BE,MAAM,CAACI,OAAO,GAAG,MAAML,MAAM,CAAC,CAAC;QAC/BE,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;MACrC,CAAC,CAAC;IACN,CAAC;IAED,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMZ,UAAU,CAAC,8CAA8C,CAAC;QAChE,MAAMA,UAAU,CAAC,mDAAmD,CAAC;QAErE,MAAMa,QAAQ,GAAG;UACbC,UAAU,EAAEpB,CAAC,CAAC,SAAS,CAAC;UACxBqB,iBAAiB,EAAEC,IAAI,CAACC,UAAU,CAACpB,WAAW,CAACqB,cAAc,CAACC,KAAK;UACnEC,mBAAmB,EAAE;YACjBC,OAAO,EAAE,SAAS;YAClBC,OAAO,EAAE,SAAS;YAClBC,OAAO,EAAE,SAAS;YAClBC,OAAO,EAAE,SAAS;YAClBC,OAAO,EAAE,SAAS;YAClBC,OAAO,EAAE;UACb;QACH,CAAC;QAEF,MAAMC,MAAM,GAAG,IAAIX,IAAI,CAACC,UAAU,CAACpB,WAAW,CAACgB,QAAQ,CAAC;QAExDc,MAAM,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UACrBF,MAAM,CAACG,SAAS,CAAChC,OAAO,CAAC,CAAC,CAAE;QAChC,CAAC,CAAC;MACN,CAAC,CAAC,OAAOiC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IAEDnB,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACd,OAAO,CAAC,CAAC;EAEb,oBACIF,OAAA;IAAKqC,EAAE,EAAC,QAAQ;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAE3E,CAAC;AAACzC,EAAA,CAhDIF,WAAW;AAAA4C,EAAA,GAAX5C,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
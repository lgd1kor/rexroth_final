{"version":3,"file":"static/js/4945.4c1be323.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-image-wrapper/image-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-image-wrapper/dc-ui-image-wrapper.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/slottedStyles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/styles.ts"],"sourcesContent":["export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import {\r\n  buildSlottedStyles,\r\n  getCss,\r\n  getImageStyleJssStyle,\r\n  getObjectFitJssStyle,\r\n  getRatioJssStyle,\r\n} from '../../utils';\r\nimport { TImageObjectFit, TImageStyle } from './image-utils';\r\n\r\nexport const createStyles = (): string => {\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'block',\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nexport const getSlottedCss = (\r\n  el: HTMLElement,\r\n  ratio: string,\r\n  imageStyle: TImageStyle,\r\n  objectFit: TImageObjectFit\r\n): string => {\r\n  return getCss(\r\n    buildSlottedStyles(el, {\r\n      '& img': {\r\n        display: 'block',\r\n        width: '100%',\r\n        height: 'auto',\r\n        ...getRatioJssStyle(ratio),\r\n        ...getObjectFitJssStyle(objectFit),\r\n        ...getImageStyleJssStyle(imageStyle),\r\n      },\r\n    })\r\n  );\r\n};\r\n","import { Component, h, Host, Prop, Element } from '@stencil/core';\r\nimport { attachSlottedCss, injectCSS } from '../../utils';\r\nimport { createStyles, getSlottedCss } from './image-styles';\r\nimport { TImageObjectFit, TImageStyle } from './image-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-image-wrapper',\r\n  shadow: true,\r\n})\r\nexport class DcUiImageWrapper {\r\n  @Element() el: HTMLElement;\r\n  @Prop() imageStyle: TImageStyle;\r\n  @Prop() objectFit: TImageObjectFit;\r\n  @Prop() ratio?: string;\r\n\r\n  public connectedCallback(): void {\r\n    attachSlottedCss(this.el, getSlottedCss(this.el, this.ratio, this.imageStyle, this.objectFit));\r\n  }\r\n\r\n  render() {\r\n    injectCSS(this.el, createStyles);\r\n\r\n    return (\r\n      <Host>\r\n        <slot />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","type HTMLElementOrDocument = HTMLElement | Document;\r\n\r\nconst slottedStyleTagId = 'dc-ui-slotted-styles';\r\n\r\nexport const getNodeToPrependTo = (rootNode: HTMLElementOrDocument): HTMLElement => {\r\n  return rootNode === document ? rootNode.head : (rootNode as HTMLElement);\r\n};\r\n\r\n/**\r\n * Adds an inheritable style for slotted content.\r\n * @param host\r\n * @param slottedStyles\r\n * @returns void\r\n */\r\nexport const attachSlottedCss = (host: HTMLElement, slottedStyles: string): void => {\r\n  const css = slottedStyles;\r\n  const rootNode = host.getRootNode() as HTMLElementOrDocument;\r\n\r\n  // isConnected check is needed because component may be removed from DOM in \"parallel\" and therefore\r\n  // the style doesn't matter and could produce validation errors because it is appended as a child\r\n  if (!rootNode.isConnected) {\r\n    return;\r\n  }\r\n\r\n  let style = document.getElementById(slottedStyleTagId);\r\n  if (!style) {\r\n    style = document.createElement('style');\r\n    style.id = slottedStyleTagId;\r\n\r\n    const prependTo = getNodeToPrependTo(rootNode);\r\n    const charsetTag = prependTo.querySelector('meta[charset]');\r\n\r\n    if (charsetTag !== null) {\r\n      prependTo.insertBefore(style, charsetTag.nextSibling);\r\n    } else if (prependTo.childNodes.length > 0) {\r\n      prependTo.insertBefore(style, prependTo.firstChild);\r\n    } else {\r\n      prependTo.appendChild(style);\r\n    }\r\n  }\r\n\r\n  style.appendChild(document.createTextNode(css));\r\n  style.normalize(); // merge text nodes\r\n};\r\n","import type { JssStyle } from 'jss';\r\nimport { color as colorUtils } from '../variables/color';\r\n\r\nexport const IMAGE_STYLE = ['default', 'circle'];\r\nexport type TImageStyle = (typeof IMAGE_STYLE)[number];\r\n\r\nexport const IMAGE_OBJECT_FIT = ['fill', 'contain', 'cover', 'none', 'scale-down'];\r\nexport type TImageObjectFit = (typeof IMAGE_OBJECT_FIT)[number];\r\n\r\nexport const pxToRemWithUnit = (px: number): string => `${px / 16}rem`;\r\n\r\n/**\r\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\r\n */\r\nexport const getScreenReaderJssStyle = (isHidden: boolean): JssStyle =>\r\n  isHidden\r\n    ? {\r\n        position: 'absolute',\r\n        width: '1px',\r\n        height: '1px',\r\n        margin: '-1px',\r\n        overflow: 'hidden',\r\n        clip: 'rect(1px,1px,1px,1px)',\r\n        clipPath: 'inset(50%)',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {\r\n        position: 'static',\r\n        width: 'auto',\r\n        height: 'auto',\r\n        margin: 0,\r\n        overflow: 'visible',\r\n        clip: 'auto',\r\n        clipPath: 'none',\r\n        whiteSpace: 'normal',\r\n      };\r\n\r\nexport const getEllipsisJssStyle = (isEllipsis: boolean): JssStyle =>\r\n  isEllipsis\r\n    ? {\r\n        maxWidth: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {};\r\n\r\nexport const getDisabledCheckboxRadioTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getDisabledInputTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getInputJssStyle = (type: string): JssStyle => {\r\n  let inputStyles = {};\r\n\r\n  switch (type) {\r\n    case 'date':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green01,\r\n      };\r\n      break;\r\n    case 'email':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green02,\r\n      };\r\n      break;\r\n    case 'file':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green03,\r\n      };\r\n      break;\r\n    case 'hidden':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red01,\r\n      };\r\n      break;\r\n    case 'number':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red02,\r\n      };\r\n      break;\r\n    case 'password':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red03,\r\n      };\r\n      break;\r\n    case 'search':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow01,\r\n      };\r\n      break;\r\n    case 'tel':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow02,\r\n      };\r\n      break;\r\n    case 'url':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow03,\r\n      };\r\n      break;\r\n    default:\r\n      inputStyles = {\r\n        borderColor: colorUtils.grey05,\r\n      };\r\n  }\r\n\r\n  return inputStyles;\r\n};\r\n\r\nexport const getRatioJssStyle = (ratio: string): JssStyle =>\r\n  ratio\r\n    ? {\r\n        aspectRatio: ratio,\r\n        height: '100%',\r\n        width: '100%',\r\n      }\r\n    : {};\r\n\r\nexport const getObjectFitJssStyle = (objectFit: TImageObjectFit): JssStyle =>\r\n  objectFit\r\n    ? {\r\n        objectFit: objectFit,\r\n      }\r\n    : {};\r\n\r\nexport const getImageStyleJssStyle = (imageStyle: TImageStyle): JssStyle =>\r\n  imageStyle\r\n    ? {\r\n        borderRadius: imageStyle === 'circle' ? '50%' : '0',\r\n      }\r\n    : {};\r\n"],"names":["color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","getCss","display","DcUiImageWrapper","connectedCallback","getSlottedCss","el","ratio","imageStyle","objectFit","attachSlottedCss","this","buildSlottedStyles","Object","assign","width","height","getRatioJssStyle","getObjectFitJssStyle","getImageStyleJssStyle","render","injectCSS","h","Host","key","slottedStyleTagId","host","slottedStyles","css","rootNode","getRootNode","isConnected","style","document","getElementById","createElement","id","prependTo","head","getNodeToPrependTo","charsetTag","querySelector","insertBefore","nextSibling","childNodes","length","firstChild","appendChild","createTextNode","normalize","pxToRemWithUnit","px","getScreenReaderJssStyle","isHidden","position","margin","overflow","clip","clipPath","whiteSpace","getEllipsisJssStyle","isEllipsis","maxWidth","textOverflow","getDisabledCheckboxRadioTextJssStyle","isDisabled","cursor","aspectRatio","borderRadius"],"sourceRoot":""}
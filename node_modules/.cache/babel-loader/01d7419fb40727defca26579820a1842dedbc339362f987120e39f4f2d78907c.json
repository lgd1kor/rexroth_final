{"ast":null,"code":"import { b as breakpoints } from './mediaQuery-8afb3804.js';\nimport './observeOptions-74693e66.js';\nconst getCurrentBreakpoint = () => {\n  let currentBreakpoint;\n  const width = window.innerWidth;\n  if (width < breakpoints.xs) {\n    currentBreakpoint = 'xxs';\n  } else if (width < breakpoints.sm) {\n    currentBreakpoint = 'xs';\n  } else if (width < breakpoints.md) {\n    currentBreakpoint = 'sm';\n  } else if (width < breakpoints.lg) {\n    currentBreakpoint = 'md';\n  } else if (width < breakpoints.xl) {\n    currentBreakpoint = 'lg';\n  } else if (width < breakpoints.xxl) {\n    currentBreakpoint = 'xl';\n  } else {\n    currentBreakpoint = 'xxl';\n  }\n  return currentBreakpoint;\n};\n/**\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\n *\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\n */\nconst isBreakpointEqualOrLarger = breakpoint => {\n  return window.innerWidth >= breakpoints[breakpoint];\n};\n/**\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\n *\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\n */\nconst isBreakpointEqualOrSmaller = breakpoint => {\n  return window.innerWidth <= breakpoints[breakpoint];\n};\n/**\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\n *\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\n */\nconst isBreakpointSmaller = breakpoint => {\n  return window.innerWidth < breakpoints[breakpoint];\n};\nexport { isBreakpointEqualOrSmaller as a, isBreakpointSmaller as b, getCurrentBreakpoint as g, isBreakpointEqualOrLarger as i };","map":{"version":3,"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\utils\\functions\\breakPointChecker.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n"],"mappings":";;MAEaA,oBAAoB,GAAGA,CAAA;EAClC,IAAIC,iBAAmC;EACvC,MAAMC,KAAK,GAAGC,MAAM,CAACC,UAAU;EAE/B,IAAIF,KAAK,GAAGG,WAAW,CAACC,EAAE,EAAE;IAC1BL,iBAAiB,GAAG,KAAK;GAC1B,MAAM,IAAIC,KAAK,GAAGG,WAAW,CAACE,EAAE,EAAE;IACjCN,iBAAiB,GAAG,IAAI;GACzB,MAAM,IAAIC,KAAK,GAAGG,WAAW,CAACG,EAAE,EAAE;IACjCP,iBAAiB,GAAG,IAAI;GACzB,MAAM,IAAIC,KAAK,GAAGG,WAAW,CAACI,EAAE,EAAE;IACjCR,iBAAiB,GAAG,IAAI;GACzB,MAAM,IAAIC,KAAK,GAAGG,WAAW,CAACK,EAAE,EAAE;IACjCT,iBAAiB,GAAG,IAAI;GACzB,MAAM,IAAIC,KAAK,GAAGG,WAAW,CAACM,GAAG,EAAE;IAClCV,iBAAiB,GAAG,IAAI;GACzB,MAAM;IACLA,iBAAiB,GAAG,KAAK;;EAG3B,OAAOA,iBAAiB;AAC1B;AAEA;;;;;;MAMaW,yBAAyB,GAAIC,UAA4B;EACpE,OAAOV,MAAM,CAACC,UAAU,IAAIC,WAAW,CAACQ,UAAU,CAAC;AACrD;AAEA;;;;;;MAMaC,0BAA0B,GAAID,UAA4B;EACrE,OAAOV,MAAM,CAACC,UAAU,IAAIC,WAAW,CAACQ,UAAU,CAAC;AACrD;AAuBA;;;;;;MAMaE,mBAAmB,GAAIF,UAA4B;EAC9D,OAAOV,MAAM,CAACC,UAAU,GAAGC,WAAW,CAACQ,UAAU,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"version":3,"file":"static/js/987.51120415.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-main-nav/dc-ui-header-main-nav.scss?tag=dc-ui-header-main-nav&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-main-nav/dc-ui-header-main-nav.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",":host {\r\n  display: block;\r\n  position: relative;\r\n}\r\n\r\n.main-nav {\r\n  width: 100%;\r\n\r\n  &.is-mobile {\r\n    position: fixed;\r\n    top: var(--header-height);\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: $color-white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    visibility: hidden;\r\n    translate: 0 -100%;\r\n\r\n    interpolate-size: allow-keywords;\r\n    transition:\r\n      visibility 0.3s ease,\r\n      translate 0.3s ease;\r\n\r\n    &.is-open {\r\n      translate: 0 0;\r\n      opacity: 1;\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n\r\n.main-nav-content {\r\n  border-top: 1px solid $color-grey-01;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: calc(100% - var(--header-height));\r\n  padding: 32px 24px 48px;\r\n\r\n  @include media-min(xl) {\r\n    border-top: none;\r\n    display: block;\r\n    height: auto;\r\n    padding: 0;\r\n  }\r\n\r\n  .main-nav-content-wrapper {\r\n    padding-top: 56px;\r\n    display: grid;\r\n    row-gap: 12px;\r\n\r\n    @include media-min(xl) {\r\n      padding: 0;\r\n      row-gap: unset;\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  .meta-nav-wrapper {\r\n    display: grid;\r\n    gap: 10px;\r\n    padding-top: 32px;\r\n    border-top: 1px solid $color-grey-03;\r\n  }\r\n}\r\n","import { Component, h, State, Element, Listen, forceUpdate } from '@stencil/core';\r\nimport { isBreakpointSmaller } from '../../../utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-main-nav',\r\n  styleUrl: 'dc-ui-header-main-nav.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderMainNav {\r\n  @Element() el!: HTMLElement;\r\n  @State() isOpen: boolean = false;\r\n  @State() isMobile: boolean = this.checkIfMobile();\r\n\r\n  private ignoreNextClick: boolean = false;\r\n  private burger!: HTMLDcUiHeaderBurgerElement;\r\n\r\n  @Listen('click', { target: 'window' })\r\n  handleWindowClick(event: MouseEvent) {\r\n    if (this.ignoreNextClick) {\r\n      this.ignoreNextClick = false;\r\n      return;\r\n    }\r\n\r\n    // Elements that should not trigger nav closing\r\n    const excludedSelectors = [\r\n      'dc-ui-header-burger',\r\n      'dc-ui-header-language',\r\n      'dc-ui-header-user-menu',\r\n    ];\r\n\r\n    if (this.isOpen) {\r\n      const target = event.target as HTMLElement;\r\n      const isExcludedElement = excludedSelectors.some(\r\n        (selector) => target.closest(selector) !== null\r\n      );\r\n\r\n      if (!this.el.contains(target as Node) && !isExcludedElement) {\r\n        this.isOpen = false;\r\n        this.toggleScrollLock(false);\r\n        this.burger.dcToggleBurger();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen('burgerClick', { target: 'window' })\r\n  handleBurgerClick(event: CustomEvent<boolean>) {\r\n    this.isOpen = event.detail;\r\n    this.toggleScrollLock(event.detail);\r\n    this.ignoreNextClick = true;\r\n  }\r\n\r\n  @Listen('keydown', { target: 'window' })\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (event.key === 'Escape' && this.isOpen) {\r\n      this.isOpen = false;\r\n      this.toggleScrollLock(false);\r\n      this.burger?.dcToggleBurger();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.burger = document.querySelector('dc-ui-header-burger');\r\n    window.addEventListener('resize', this.handleResize);\r\n    this.el.addEventListener('languageButtonMoved', this.handleLanguageButtonMoved);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.toggleScrollLock(false);\r\n    window.removeEventListener('resize', this.handleResize);\r\n    this.el.removeEventListener('languageButtonMoved', this.handleLanguageButtonMoved);\r\n  }\r\n\r\n  private handleLanguageButtonMoved = () => {\r\n    // Handle the event, e.g., force update or any other logic\r\n    forceUpdate(this.el);\r\n  };\r\n\r\n  private checkIfMobile(): boolean {\r\n    return isBreakpointSmaller('xl');\r\n  }\r\n\r\n  private handleResize = () => {\r\n    const wasMobile = this.isMobile;\r\n    this.isMobile = this.checkIfMobile();\r\n\r\n    // If breakpoint changed, close navigation and flyouts\r\n    if (wasMobile !== this.isMobile) {\r\n      // Close the mobile navigation if it's open\r\n      if (this.isOpen) {\r\n        this.isOpen = false;\r\n        this.toggleScrollLock(false);\r\n        this.burger?.dcToggleBurger();\r\n      }\r\n\r\n      // Close all flyouts by finding all active nav items and removing their active state\r\n      const activeNavItems = this.el.querySelectorAll('dc-ui-header-main-nav-item');\r\n      activeNavItems.forEach((item: HTMLElement) => {\r\n        if (item.classList.contains('is-active')) {\r\n          // Access the component instance to call its closeFlyout method\r\n          const itemComponent = item as HTMLDcUiHeaderMainNavItemElement;\r\n          if (typeof itemComponent.closeFlyout === 'function') {\r\n            itemComponent.closeFlyout();\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  private toggleScrollLock(lock: boolean): void {\r\n    if (lock) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = '';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const hasMetaNavElements = this.el.querySelector('[slot=\"meta-nav\"]') !== null;\r\n\r\n    return (\r\n      <nav\r\n        class={{\r\n          'main-nav': true,\r\n          'is-mobile': this.isMobile,\r\n          'is-open': this.isOpen,\r\n        }}>\r\n        <div class=\"main-nav-content\">\r\n          <div class=\"main-nav-content-wrapper\">\r\n            <slot />\r\n          </div>\r\n\r\n          {hasMetaNavElements && (\r\n            <div class=\"meta-nav-wrapper\">\r\n              <slot name=\"meta-nav\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeaderMainNav","ignoreNextClick","handleLanguageButtonMoved","forceUpdate","this","el","handleResize","wasMobile","isMobile","checkIfMobile","isOpen","toggleScrollLock","_a","burger","dcToggleBurger","querySelectorAll","forEach","item","classList","contains","itemComponent","closeFlyout","handleWindowClick","event","excludedSelectors","target","isExcludedElement","some","selector","closest","handleBurgerClick","detail","handleKeyDown","key","componentDidLoad","document","querySelector","addEventListener","disconnectedCallback","removeEventListener","lock","body","style","overflow","render","hasMetaNavElements","h","class","name","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
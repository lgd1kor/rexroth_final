{"version":3,"file":"static/js/2436.1a7507a7.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-gallery/gallery-utils.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-gallery/dc-ui-gallery.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-gallery/dc-ui-gallery.scss?tag=dc-ui-gallery&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n","import { DcUiGallery } from './dc-ui-gallery';\r\nimport {\r\n  getCurrentBreakpoint,\r\n  isBreakpointEqualOrLarger,\r\n  isBreakpointEqualOrSmaller,\r\n  TBreakpointNames,\r\n} from '../../utils';\r\nimport { forceUpdate } from '@stencil/core';\r\nimport { DcUiGalleryItem } from '../dc-ui-gallery-item/dc-ui-gallery-item';\r\n\r\nexport const GALLERY_RATIOS = ['16:9', '1:1'] as const;\r\nexport type TGalleryRatio = (typeof GALLERY_RATIOS)[number];\r\n\r\nexport const THUMBNAIL_SHOWN_BREAKPOINT: TBreakpointNames = 'md';\r\n\r\n/**\r\n * Returns the active slide element and its index.\r\n *\r\n * @param {DcUiGallery} gallery\r\n * @returns {element: HTMLElement, index: number}\r\n */\r\nconst getActiveSlide = (gallery: DcUiGallery) => {\r\n  const activeSlide = gallery.el.querySelector('dc-ui-gallery-item.active');\r\n  const index = Array.from(gallery.el.querySelectorAll('dc-ui-gallery-item')).indexOf(\r\n    gallery.el.querySelector('dc-ui-gallery-item.active')\r\n  );\r\n\r\n  return {\r\n    element: activeSlide,\r\n    index,\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the active thumbnail element and its index.\r\n *\r\n * @param {DcUiGallery} gallery\r\n * @returns {element: HTMLElement, index: number}\r\n */\r\nconst getActiveThumbnail = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  const activeThumbnail = gallery.thumbnailList.querySelector('.active');\r\n  const index = Array.from(gallery.thumbnailList.children).indexOf(activeThumbnail);\r\n\r\n  return {\r\n    element: activeThumbnail,\r\n    index,\r\n  };\r\n};\r\n\r\n/**\r\n * Initializes the slides.\r\n *\r\n * @param {DcUiGallery} gallery\r\n */\r\nexport const initSlides = (gallery: DcUiGallery) => {\r\n  gallery.galleryWidth = gallery.galleryWrapper.offsetWidth;\r\n  gallery.slidesWrapper.style.width = `${gallery.galleryWidth * gallery.numSlides}px`;\r\n\r\n  // if any slides contain text, disable thumbnails (only show navigation dots)\r\n  if (Array.from(gallery.slides).some((slide: HTMLElement) => slide.children.length > 1)) {\r\n    gallery.hasThumbnails = false;\r\n  }\r\n\r\n  gallery.slides.forEach((slide: HTMLElement, index) => {\r\n    slide.style.width = `${gallery.galleryWidth}px`;\r\n\r\n    // add index to slide\r\n    slide.setAttribute('data-slide-index', `${index}`);\r\n\r\n    // create thumbnail element if applicable\r\n    if (gallery.hasThumbnails && !gallery.hasRendered) {\r\n      const li = createThumbnailElement(slide, index);\r\n      gallery.thumbnailList.appendChild(li);\r\n    }\r\n\r\n    // create navigation dot\r\n    if (!gallery.hasRendered) {\r\n      const dot = createNavigationDotElement(gallery, index);\r\n      gallery.navigationDotList.appendChild(dot);\r\n\r\n      if (gallery.hasModal) {\r\n        const dotInModal = createNavigationDotElement(gallery, index, true);\r\n        gallery.navigationDotListInModal.appendChild(dotInModal);\r\n      }\r\n    }\r\n  });\r\n\r\n  // show navigation dots only if thumbnails aren't available\r\n  const hasNavigationDots = !gallery.hasThumbnails || !shouldShowThumbnails();\r\n  gallery.navigationDotList.style.display = hasNavigationDots ? 'flex' : 'none';\r\n\r\n  // set the first slide, first thumbnail and first navigation dot to active\r\n  gallery.slides[0].classList.add('active');\r\n  gallery.navigationDotList.children[0].classList.add('active');\r\n  if (gallery.hasThumbnails && shouldShowThumbnails()) {\r\n    setThumbnailSpacing(gallery);\r\n    gallery.thumbnailList.children[0].classList.add('active');\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes the slides for the modal.\r\n *\r\n * @param {DcUiGallery} gallery\r\n */\r\nexport const initSlidesInModal = (gallery: DcUiGallery) => {\r\n  gallery.slides.forEach((slide: HTMLElement) => {\r\n    const modalSlide = createModalSlideElement(slide);\r\n    gallery.slidesWrapperInModal.appendChild(modalSlide);\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a thumbnail element (for the thumbnail list) from a given slide element.\r\n *\r\n * @param slide: HTMLElement\r\n * @param index: number\r\n */\r\nconst createThumbnailElement = (slide: HTMLElement, index: number) => {\r\n  // clone the slide (dc-ui-gallery-item) to make the thumbnail\r\n  const slideClone = slide.cloneNode(true) as HTMLElement;\r\n  const thumbnail = slideClone.querySelector(':scope > img, picture');\r\n\r\n  const button = document.createElement('button');\r\n  button.classList.add('thumbnail');\r\n  button.appendChild(thumbnail);\r\n  button.setAttribute('data-slide-index', slide.getAttribute('data-slide-index'));\r\n  button.setAttribute('aria-label', `Go to slide ${index + 1}`);\r\n\r\n  const listItem = document.createElement('li');\r\n  listItem.appendChild(button);\r\n\r\n  return listItem;\r\n};\r\n\r\n/**\r\n * Creates a modal slide element from a given slide element.\r\n *\r\n * @param {HTMLElement} slide - The slide element.\r\n */\r\nconst createModalSlideElement = (slide: HTMLElement) => {\r\n  const slideClone = slide.cloneNode(true) as HTMLElement;\r\n\r\n  // remove everything but the image\r\n  Array.from(slideClone.querySelectorAll(':scope > :not(img, picture)')).forEach((el) =>\r\n    el.remove()\r\n  );\r\n\r\n  // force 16:9 aspect ratio\r\n  slideClone.setAttribute('ratio', '16:9');\r\n\r\n  return slideClone;\r\n};\r\n\r\n/**\r\n * Creates a navigation dot element (for the navigation dot list) from a given slide index.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n * @param {number} index - The sldie index.\r\n */\r\nconst createNavigationDotElement = (gallery: DcUiGallery, index: number, inModal = false) => {\r\n  const button = document.createElement('button');\r\n  button.classList.add('dot');\r\n  button.setAttribute('data-slide-index', `${index}`);\r\n  button.setAttribute('aria-label', `Go to slide ${index + 1}`);\r\n\r\n  if (inModal) {\r\n    button.addEventListener('click', () => {\r\n      goToSlideInModal(gallery, index);\r\n    });\r\n  } else {\r\n    button.addEventListener('click', () => {\r\n      goToSlide(gallery, index);\r\n    });\r\n  }\r\n\r\n  const listItem = document.createElement('li');\r\n  listItem.appendChild(button);\r\n\r\n  return listItem;\r\n};\r\n\r\n/**\r\n * Checks if the desired aspect ratio fits the gallery on the screen vertically, and sets it to a working one if not.\r\n *\r\n * Currently this only checks if 1:1 is too big and sets it to 16:9 instead.\r\n * If there are more aspect ratios in the future, this function might need to be adjusted.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n */\r\nexport const checkAspectRatio = (gallery: DcUiGallery) => {\r\n  if (gallery.el.offsetHeight >= window.innerHeight) {\r\n    gallery.ratio = '16:9';\r\n  } else {\r\n    gallery.ratio = gallery.originalRatio;\r\n  }\r\n\r\n  setSlideAspectRatio(gallery);\r\n};\r\n\r\n/**\r\n * Sets the aspect ratio of all child elements to the gallery's aspect ratio.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n */\r\nexport const setSlideAspectRatio = (gallery: DcUiGallery) => {\r\n  Array.from(gallery.el.children).forEach((item: unknown) => {\r\n    (item as DcUiGalleryItem).ratio = gallery.ratio;\r\n    setTimeout(() => {\r\n      forceUpdate(item);\r\n    }, 0);\r\n  });\r\n};\r\n\r\n/**\r\n * Sets the thumbnail spacing.\r\n *\r\n * Thumbnails are spaced equally so that as many as possible are shown at a time (on one \"page\"),\r\n * accounting for a minimum gap.\r\n *\r\n * If there isn't enough space for more than one thumbnail, or if all thumbnails can fit on the same page,\r\n * the minimum gap is used (and the thumbnails are left-aligned instead of equally spaced).\r\n *\r\n * @param {DcUiGallery} gallery\r\n */\r\nconst setThumbnailSpacing = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  const isTablet = isBreakpointEqualOrSmaller('md');\r\n  const thumbnailWidth = isTablet ? gallery.thumbnailWidthTablet : gallery.thumbnailWidth;\r\n  gallery.el.style.setProperty('--_thumbnail-width', `${thumbnailWidth}px`);\r\n\r\n  const listWidth = gallery.thumbnailList.offsetWidth;\r\n  const isMobile = ['xxs', 'xs', 'sm'].includes(getCurrentBreakpoint());\r\n\r\n  const minGap = isMobile ? gallery.thumbnailMinGapMobile : gallery.thumbnailMinGap;\r\n  const leftAlignGap = isMobile ? gallery.thumbnailDefaultGapMobile : gallery.thumbnailDefaultGap;\r\n\r\n  gallery.thumbnailCalculatedGap = leftAlignGap;\r\n\r\n  gallery.numThumbnailsPerPage = Math.floor((listWidth + minGap) / (thumbnailWidth + minGap));\r\n  if (gallery.numThumbnailsPerPage > 1 && gallery.numThumbnailsPerPage <= gallery.numSlides) {\r\n    const remainingWidth = listWidth - gallery.numThumbnailsPerPage * thumbnailWidth;\r\n    gallery.thumbnailCalculatedGap = remainingWidth / (gallery.numThumbnailsPerPage - 1);\r\n  }\r\n\r\n  gallery.thumbnailList.style.gap = `${gallery.thumbnailCalculatedGap}px`;\r\n\r\n  // calculate the number of thumbnail pages\r\n  gallery.numThumbnailPages = Math.ceil(gallery.numSlides / gallery.numThumbnailsPerPage);\r\n\r\n  // disable arrow buttons if only one page\r\n  const thumbnailButtons = gallery.thumbnailButtonContainer.querySelectorAll('.thumbnail-button');\r\n  thumbnailButtons.forEach((btn: HTMLElement) => {\r\n    btn.style.display = gallery.numThumbnailPages === 1 ? 'none' : 'block';\r\n  });\r\n};\r\n\r\n/**\r\n * Initializes touch events for a gallery.\r\n *\r\n * This function adds touchstart, touchmove, and touchend event listeners to the gallery's slides wrapper.\r\n * It uses these events to detect swipes to the left or right. If a swipe is detected, it triggers the\r\n * appropriate action to move to the next or previous slide.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly adds event listeners\r\n * to the gallery's slides wrapper.\r\n */\r\nexport const setupEvents = (gallery: DcUiGallery) => {\r\n  // setup touch events for swiping\r\n\r\n  const minSwipeDistance = 50; // how far the touch has to move sideways to count as a swipe\r\n\r\n  gallery.slidesWrapper.addEventListener('touchstart', (e: TouchEvent) => {\r\n    gallery.swipeStartX = e.touches[0].screenX;\r\n  });\r\n\r\n  gallery.slidesWrapper.addEventListener('touchmove', (e: TouchEvent) => {\r\n    gallery.swipeEndX = e.touches[0].screenX;\r\n  });\r\n\r\n  gallery.slidesWrapper.addEventListener('touchend', () => {\r\n    if (!gallery.swipeStartX || !gallery.swipeEndX) {\r\n      return;\r\n    }\r\n    if (gallery.swipeStartX - gallery.swipeEndX > minSwipeDistance) {\r\n      goToNextSlide(gallery); // swiped to left => next slide\r\n    } else if (gallery.swipeEndX - gallery.swipeStartX > minSwipeDistance) {\r\n      goToPrevSlide(gallery); // swiped to right => previous slide\r\n    }\r\n    gallery.swipeStartX = undefined;\r\n    gallery.swipeEndX = undefined;\r\n  });\r\n\r\n  // go to the focused thumbnail page when tabbing through thumbnails\r\n  if (gallery.hasThumbnails) {\r\n    gallery.thumbnailList.addEventListener('focusin', (e) => {\r\n      const focusedThumbnail = e.target as HTMLElement;\r\n      const focusedThumbnailIndex = parseInt(focusedThumbnail.getAttribute('data-slide-index'));\r\n      const focusedThumbnailPage = Math.floor(focusedThumbnailIndex / gallery.numThumbnailsPerPage);\r\n      goToThumbnailPage(gallery, focusedThumbnailPage);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the slide number display in the bottom left.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly modifies text in the gallery element.\r\n */\r\nexport const updateSlideNumberDisplay = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  gallery.thumbnailInfo.innerHTML = `${gallery.activeSlideIndex + 1} / ${gallery.numSlides}`;\r\n};\r\n\r\n/**\r\n * Adjusts the widths of the gallery and its slides.\r\n *\r\n * This function calculates the width of the gallery and sets the width of each slide to match it.\r\n * It also sets the width of the slides wrapper to be the product of the gallery width and the number of slides.\r\n * If there is an active slide, it adjusts the transform of the slides wrapper to ensure the active slide is in view.\r\n * It temporarily removes the transition from the slides wrapper to prevent any animation during this adjustment.\r\n * Finally, it calls the setThumbnailSpacing function to adjust the spacing of the thumbnails.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery and its slides.\r\n */\r\nexport const adjustGalleryAndSlideWidths = (gallery: DcUiGallery) => {\r\n  // temporarily remove transition effects for the recalculations\r\n  gallery.slidesWrapper.classList.add('no-transition');\r\n  setTimeout(() => {\r\n    gallery.slidesWrapper.classList.remove('no-transition');\r\n  }, 0);\r\n\r\n  if (gallery.hasThumbnails) {\r\n    gallery.thumbnailList.classList.add('no-transition');\r\n    setTimeout(() => {\r\n      gallery.thumbnailList.classList.remove('no-transition');\r\n    }, 0);\r\n  }\r\n\r\n  gallery.galleryWidth = gallery.galleryWrapper.offsetWidth;\r\n\r\n  gallery.slides.forEach((slide) => {\r\n    slide.style.width = `${gallery.galleryWidth}px`;\r\n  });\r\n\r\n  gallery.slidesWrapper.style.width = `${gallery.galleryWidth * gallery.numSlides}px`;\r\n\r\n  const activeSlideIndex = getActiveSlide(gallery).index;\r\n  gallery.slidesWrapper.style.transform = `translateX(-${\r\n    gallery.galleryWidth * activeSlideIndex\r\n  }px)`;\r\n\r\n  // recalculate the thumbnail spacing (new viewport width might have changed it)\r\n  setThumbnailSpacing(gallery);\r\n\r\n  // recalculate the position of the current thumbnail page (new viewport width might have changed it)\r\n  goToActiveThumbnailPage(gallery);\r\n\r\n  // show navigation dots only if thumbnails aren't available\r\n  const hasNavigationDots = !gallery.hasThumbnails || !shouldShowThumbnails();\r\n  gallery.navigationDotList.style.display = hasNavigationDots ? 'flex' : 'none';\r\n};\r\n\r\n/**\r\n * Adjust the widths of the gallery inside the modal.\r\n *\r\n * This function calculates the width of the gallery and sets the width of each slide to match it.\r\n * It's called when the modal is opened to ensure the gallery is displayed correctly.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery and its slides.\r\n */\r\nexport const adjustGalleryAndSlideWidthsInModal = (gallery: DcUiGallery) => {\r\n  const modalGalleryWidth = gallery.galleryWrapperInModal.offsetWidth;\r\n  const modalSlides = gallery.slidesWrapperInModal.querySelectorAll('dc-ui-gallery-item');\r\n\r\n  modalSlides.forEach((slide: HTMLElement) => {\r\n    slide.style.width = `${modalGalleryWidth}px`;\r\n  });\r\n\r\n  gallery.slidesWrapperInModal.style.width = `${modalGalleryWidth * gallery.numSlides}px`;\r\n\r\n  // recalculate the slide position in the modal (new viewport width might have changed it)\r\n  goToSlideInModal(gallery, gallery.activeSlideIndexInModal, false);\r\n};\r\n\r\n/**\r\n * Navigates to a specific slide in the gallery.\r\n *\r\n * This function finds the index of the slide with the given ID,\r\n * calculates the transform needed to bring that slide into view, and applies that transform to the slides wrapper.\r\n * It also updates the active class on the slides and thumbnails to reflect the new active slide.\r\n * Finally, it calls the goToActiveThumbnailPage function to ensure the active thumbnail is in view.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n * @param {string} slideIndex - The ID of the slide to navigate to.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery and its slides.\r\n */\r\nexport const goToSlide = (gallery: DcUiGallery, slideIndex: number) => {\r\n  const slides = gallery.el.querySelectorAll('dc-ui-gallery-item');\r\n\r\n  // ensure slide index is within bounds\r\n  slideIndex = Math.max(Math.min(gallery.numSlides - 1, slideIndex), 0);\r\n\r\n  // scroll to the specified slide\r\n  const galleryWidth = gallery.galleryWrapper.offsetWidth;\r\n  gallery.slidesWrapper.style.transform = `translateX(-${galleryWidth * slideIndex}px)`;\r\n\r\n  // mark slide as active, and remove active class on all other slides\r\n  slides.forEach((slide) => {\r\n    slide.classList.remove('active');\r\n  });\r\n  slides[slideIndex].classList.add('active');\r\n\r\n  // mark thumbnail as active, and remove active class on all other thumbnails\r\n  if (gallery.hasThumbnails && shouldShowThumbnails()) {\r\n    gallery.thumbnailList.querySelectorAll('li').forEach((thumb) => {\r\n      thumb.classList.remove('active');\r\n    });\r\n    gallery.thumbnailList.children[slideIndex].classList.add('active');\r\n  }\r\n\r\n  // mark navigation dot as active and remove active class on all other navigation dots\r\n  gallery.navigationDotList.querySelectorAll('li').forEach((dot) => {\r\n    dot.classList.remove('active');\r\n  });\r\n  gallery.navigationDotList.children[slideIndex].classList.add('active');\r\n\r\n  // mark navigation dot in modal as active and remove active class on all other navigation dots\r\n  if (gallery.hasModal) {\r\n    gallery.navigationDotListInModal.querySelectorAll('li').forEach((dot) => {\r\n      dot.classList.remove('active');\r\n    });\r\n    gallery.navigationDotListInModal.children[slideIndex].classList.add('active');\r\n  }\r\n\r\n  // update active slide index\r\n  gallery.activeSlideIndex = slideIndex;\r\n\r\n  updateSlideNumberDisplay(gallery);\r\n  goToActiveThumbnailPage(gallery);\r\n};\r\n\r\n/**\r\n * Moves the gallery to the next slide.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's slides wrapper.\r\n */\r\nexport const goToNextSlide = (gallery: DcUiGallery) => {\r\n  const nextIndex = (gallery.activeSlideIndex + 1) % gallery.numSlides;\r\n  goToSlide(gallery, nextIndex);\r\n};\r\n\r\n/**\r\n * Moves the gallery to the previous slide.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's slides wrapper.\r\n */\r\nexport const goToPrevSlide = (gallery: DcUiGallery) => {\r\n  // add numSlides to ensure the number is positive after mod operation\r\n  const prevIndex = (gallery.numSlides + gallery.activeSlideIndex - 1) % gallery.numSlides;\r\n  goToSlide(gallery, prevIndex);\r\n};\r\n\r\n/**\r\n * Navigates to a specific slide in the gallery inside the modal.\r\n *\r\n * This function finds the index of the slide with the given ID,\r\n * calculates the transform needed to bring that slide into view,\r\n * and applies that transform to the slides wrapper.\r\n * It also updates the active class on the slides to reflect the new active slide.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n * @param {string} slideIndex - The ID of the slide to navigate to.\r\n * @param {boolean} animate - Whether to enable the smooth slide change animation.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery and its slides.\r\n */\r\nexport const goToSlideInModal = (\r\n  gallery: DcUiGallery,\r\n  slideIndex: number,\r\n  animate: boolean = true\r\n) => {\r\n  if (!gallery.hasModal) {\r\n    return;\r\n  }\r\n\r\n  // ensure slide index is within bounds\r\n  slideIndex = Math.max(Math.min(gallery.numSlides, slideIndex), 0);\r\n\r\n  if (!animate) {\r\n    // temporarily remove transition to prevent animation\r\n    gallery.slidesWrapperInModal.classList.add('no-transition');\r\n    setTimeout(() => {\r\n      gallery.slidesWrapperInModal.classList.remove('no-transition');\r\n    }, 0);\r\n  }\r\n\r\n  const slides = gallery.slidesWrapperInModal.querySelectorAll('dc-ui-gallery-item');\r\n  const galleryWidth = gallery.galleryWrapperInModal.offsetWidth;\r\n  gallery.slidesWrapperInModal.style.transform = `translateX(-${galleryWidth * slideIndex}px)`;\r\n\r\n  slides.forEach((slide) => slide.classList.remove('active'));\r\n  slides[slideIndex].classList.add('active');\r\n\r\n  // update active slide index\r\n  gallery.activeSlideIndexInModal = slideIndex;\r\n\r\n  // mark navigation dot in modal as active and remove active class on all other navigation dots\r\n  gallery.navigationDotListInModal.querySelectorAll('li').forEach((dot) => {\r\n    dot.classList.remove('active');\r\n  });\r\n  gallery.navigationDotListInModal.children[slideIndex].classList.add('active');\r\n};\r\n\r\n/**\r\n * Navigates to the next slide in the modal.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's slides wrapper.\r\n */\r\nexport const goToNextSlideInModal = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasModal) {\r\n    return;\r\n  }\r\n\r\n  const activeSlide = gallery.slidesWrapperInModal.querySelector('dc-ui-gallery-item.active');\r\n  const activeSlideIndex = Array.from(gallery.slidesWrapperInModal.children).indexOf(activeSlide);\r\n\r\n  const nextIndex = (activeSlideIndex + 1) % gallery.numSlides;\r\n\r\n  goToSlideInModal(gallery, nextIndex);\r\n};\r\n\r\n/**\r\n * Navigates to the previous slide in the modal.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's slides wrapper.\r\n */\r\nexport const goToPrevSlideInModal = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasModal) {\r\n    return;\r\n  }\r\n\r\n  const activeSlide = gallery.slidesWrapperInModal.querySelector('dc-ui-gallery-item.active');\r\n  const activeSlideIndex = Array.from(gallery.slidesWrapperInModal.children).indexOf(activeSlide);\r\n\r\n  // add numSlides to ensure the number is positive after mod operation\r\n  const prevIndex = (gallery.numSlides + activeSlideIndex - 1) % gallery.numSlides;\r\n\r\n  goToSlideInModal(gallery, prevIndex);\r\n};\r\n\r\n/**\r\n * Navigates to the specified page of thumbnails.\r\n *\r\n * This function scrolls (transforms) the gallery to the specified page.\r\n * The calculation considers the width of the thumbnail list, the number of thumbnails per view,\r\n * and the calculated gap between thumbnails.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n * @param {number} page - The page number.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's thumbnail list.\r\n */\r\nconst goToThumbnailPage = (gallery: DcUiGallery, page: number) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  // ensure page is within bounds\r\n  page = Math.max(Math.min(gallery.numThumbnailPages - 1, page), 0);\r\n\r\n  gallery.currentThumbnailPage = page;\r\n  const gapOffset = page * gallery.thumbnailCalculatedGap;\r\n  const xOffset = page * gallery.thumbnailList.offsetWidth + gapOffset;\r\n\r\n  gallery.thumbnailList.style.transform = `translateX(-${xOffset}px)`;\r\n};\r\n\r\n/**\r\n * Navigates to the next page of thumbnails.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's thumbnail list.\r\n */\r\nexport const goToNextThumbnailPage = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  const nextPage = gallery.currentThumbnailPage + 1;\r\n  goToThumbnailPage(gallery, nextPage % gallery.numThumbnailPages);\r\n};\r\n\r\n/**\r\n * Navigates to the previous page of thumbnails.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's thumbnail list.\r\n */\r\nexport const goToPrevThumbnailPage = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  // add numThumbnailPages to ensure the number is positive after mod operation\r\n  const prevPage = gallery.numThumbnailPages + gallery.currentThumbnailPage - 1;\r\n  goToThumbnailPage(gallery, prevPage % gallery.numThumbnailPages);\r\n};\r\n\r\n/**\r\n * Navigates to the thumbnail page that contains the active thumbnail.\r\n *\r\n * @param {DcUiGallery} gallery - The gallery object.\r\n *\r\n * @returns {void} - This function does not return anything; it directly manipulates the style\r\n * of the gallery's thumbnail list.\r\n */\r\nconst goToActiveThumbnailPage = (gallery: DcUiGallery) => {\r\n  if (!gallery.hasThumbnails || !shouldShowThumbnails()) {\r\n    return;\r\n  }\r\n\r\n  const activeThumbnailPage = Math.floor(\r\n    getActiveThumbnail(gallery).index / gallery.numThumbnailsPerPage\r\n  );\r\n  goToThumbnailPage(gallery, activeThumbnailPage);\r\n};\r\n\r\n/**\r\n * Determines if thumbnails should be shown (they should be hidden on mobile).\r\n *\r\n * @returns {boolean}\r\n */\r\nconst shouldShowThumbnails = () => {\r\n  return isBreakpointEqualOrLarger(THUMBNAIL_SHOWN_BREAKPOINT);\r\n};\r\n","import { Component, Element, Method, Prop, h } from '@stencil/core';\r\nimport { isBreakpointEqualOrLarger } from '../../utils';\r\nimport {\r\n  TGalleryRatio,\r\n  adjustGalleryAndSlideWidths,\r\n  adjustGalleryAndSlideWidthsInModal,\r\n  checkAspectRatio,\r\n  goToNextSlide,\r\n  goToNextSlideInModal,\r\n  goToNextThumbnailPage,\r\n  goToPrevSlide,\r\n  goToPrevSlideInModal,\r\n  goToPrevThumbnailPage,\r\n  goToSlide,\r\n  goToSlideInModal,\r\n  initSlides,\r\n  initSlidesInModal,\r\n  setSlideAspectRatio,\r\n  setupEvents,\r\n  updateSlideNumberDisplay,\r\n} from './gallery-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-gallery',\r\n  styleUrl: 'dc-ui-gallery.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiGallery {\r\n  @Element() el: HTMLElement;\r\n  @Prop() ratio: TGalleryRatio = '16:9';\r\n  @Prop() hasModal = true;\r\n  @Prop() hasThumbnails = true;\r\n\r\n  /**\r\n   * Navigates to the specified slide.\r\n   *\r\n   * @method\r\n   * @async\r\n   * @param {number} slideIndex - The index of the slide to navigate to.\r\n   */\r\n  @Method()\r\n  async goToSlide(slideIndex: number) {\r\n    goToSlide(this, slideIndex);\r\n  }\r\n\r\n  // Elements\r\n  slotEl: HTMLDivElement;\r\n  galleryModal: HTMLDcUiModalElement;\r\n  galleryWrapper: HTMLDivElement;\r\n  slidesWrapper: HTMLDivElement;\r\n  galleryWrapperInModal: HTMLDivElement;\r\n  slidesWrapperInModal: HTMLDivElement;\r\n  thumbnailList: HTMLElement;\r\n  thumbnailInfo: HTMLDcUiTextElement;\r\n  thumbnailButtonContainer: HTMLElement;\r\n  navigationDotList: HTMLElement;\r\n  navigationDotListInModal: HTMLElement;\r\n\r\n  // Slide properties\r\n  slides;\r\n  numSlides: number;\r\n  activeSlideIndex = 0;\r\n  activeSlideIndexInModal = 0;\r\n  swipeStartX: number;\r\n  swipeEndX: number;\r\n\r\n  // Thumbnail properties\r\n  thumbnailWidth = 70;\r\n  thumbnailWidthTablet = 60;\r\n  thumbnailMinGap = 30;\r\n  thumbnailMinGapMobile = 8;\r\n  thumbnailDefaultGap = 30;\r\n  thumbnailDefaultGapMobile = 16;\r\n  thumbnailCalculatedGap: number;\r\n  totalThumbnailWidth = this.thumbnailWidth + this.thumbnailMinGap;\r\n  numThumbnailsPerPage: number;\r\n  numThumbnailPages: number;\r\n  currentThumbnailPage = 0;\r\n\r\n  // Other properties\r\n  galleryWidth: number;\r\n  modalOpen = false;\r\n  originalRatio: TGalleryRatio;\r\n  originalHeight: number;\r\n  hasRendered = false; // checkAspectRatio can trigger a rerender, so this is a flag for things you only want to do once\r\n  truncateNavigationDots = false; // undocumented feature: only show a few dots before/after the active dot\r\n\r\n  GALLERY_RATIOS_CSS = {\r\n    '16:9': 'dc-ui-image-gallery--ratio-16-9',\r\n    '1:1': 'dc-ui-image-gallery--ratio-1-1',\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.slides = this.el.querySelectorAll('dc-ui-gallery-item');\r\n    this.numSlides = this.slides.length;\r\n    this.originalRatio = this.ratio;\r\n    setSlideAspectRatio(this);\r\n  }\r\n\r\n  componentDidRender() {\r\n    initSlides(this);\r\n\r\n    if (!this.hasRendered) {\r\n      setupEvents(this);\r\n    }\r\n\r\n    if (this.hasModal) {\r\n      initSlidesInModal(this);\r\n\r\n      this.galleryModal.addEventListener('dcOpen', () => {\r\n        this.modalOpen = true;\r\n        adjustGalleryAndSlideWidthsInModal(this);\r\n        goToSlideInModal(this, this.activeSlideIndex, false);\r\n      });\r\n\r\n      this.galleryModal.addEventListener('dcClose', () => {\r\n        this.modalOpen = false;\r\n      });\r\n    }\r\n\r\n    window.addEventListener('resize', () => {\r\n      adjustGalleryAndSlideWidths(this);\r\n      if (this.modalOpen && this.hasModal) {\r\n        adjustGalleryAndSlideWidthsInModal(this);\r\n      }\r\n      if (!isBreakpointEqualOrLarger('md') && this.hasModal && this.modalOpen) {\r\n        this.galleryModal.close();\r\n      }\r\n    });\r\n\r\n    updateSlideNumberDisplay(this);\r\n\r\n    if (!this.hasRendered) {\r\n      checkAspectRatio(this);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      adjustGalleryAndSlideWidths(this);\r\n    }, 100);\r\n    this.hasRendered = true;\r\n  }\r\n\r\n  onSlideClick = () => {\r\n    if (isBreakpointEqualOrLarger('md') && this.hasModal) {\r\n      this.galleryModal.open();\r\n    }\r\n  };\r\n\r\n  onLeftButtonClick = () => {\r\n    goToPrevSlide(this);\r\n  };\r\n\r\n  onRightButtonClick = () => {\r\n    goToNextSlide(this);\r\n  };\r\n\r\n  onLeftModalButtonClick = () => {\r\n    goToPrevSlideInModal(this);\r\n  };\r\n\r\n  onRightModalButtonClick = () => {\r\n    goToNextSlideInModal(this);\r\n  };\r\n\r\n  onRightThumbnailButtonClick = () => {\r\n    goToNextThumbnailPage(this);\r\n  };\r\n\r\n  onLeftThumbnailButtonClick = () => {\r\n    goToPrevThumbnailPage(this);\r\n  };\r\n\r\n  onThumbnailClick = (e) => {\r\n    const thumb = (e.target as HTMLElement).closest('button.thumbnail');\r\n    if (!thumb) {\r\n      return;\r\n    }\r\n    const slideIndex = Number(thumb.getAttribute('data-slide-index'));\r\n    goToSlide(this, slideIndex);\r\n  };\r\n\r\n  returnCSSClasses = () => {\r\n    return {\r\n      'dc-ui-image-gallery': true,\r\n      [this.GALLERY_RATIOS_CSS[this.ratio]]: true,\r\n      'dc-ui-image-gallery--thumbnails': this.hasThumbnails,\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class={this.returnCSSClasses()}>\r\n        <div\r\n          class=\"gallery-wrapper\"\r\n          ref={(el) => (this.galleryWrapper = el)}>\r\n          <div class=\"gallery-button-container gallery-button-container--left\">\r\n            <dc-ui-button\r\n              class=\"gallery-button\"\r\n              variant=\"secondary\"\r\n              icon=\"dc_backward_left\"\r\n              hide-label=\"true\"\r\n              onClick={this.onLeftButtonClick}>\r\n              Previous\r\n            </dc-ui-button>\r\n          </div>\r\n          <div\r\n            class=\"slides\"\r\n            onClick={this.onSlideClick}\r\n            ref={(el) => (this.slidesWrapper = el)}>\r\n            <slot></slot>\r\n          </div>\r\n          <div class=\"gallery-button-container gallery-button-container--right\">\r\n            <dc-ui-button\r\n              class=\"gallery-button\"\r\n              variant=\"secondary\"\r\n              icon=\"dc_forward_right\"\r\n              hide-label=\"true\"\r\n              onClick={this.onRightButtonClick}>\r\n              Next\r\n            </dc-ui-button>\r\n          </div>\r\n        </div>\r\n\r\n        {this.hasThumbnails && (\r\n          <div class=\"thumbnails\">\r\n            <ul\r\n              class=\"thumbnails__list\"\r\n              onClick={this.onThumbnailClick}\r\n              ref={(el) => (this.thumbnailList = el)}></ul>\r\n            <div class=\"thumbnails__info\">\r\n              <dc-ui-text\r\n                variant=\"small-text\"\r\n                ref={(el) => (this.thumbnailInfo = el)}></dc-ui-text>\r\n\r\n              <div\r\n                class=\"thumbnails__info__cta\"\r\n                ref={(el) => (this.thumbnailButtonContainer = el)}>\r\n                <dc-ui-button\r\n                  class=\"thumbnail-button thumbnail-button--left\"\r\n                  variant=\"link\"\r\n                  icon=\"dc_backward_left\"\r\n                  hide-label=\"true\"\r\n                  size=\"small\"\r\n                  onClick={this.onLeftThumbnailButtonClick}>\r\n                  Previous\r\n                </dc-ui-button>\r\n                <dc-ui-button\r\n                  class=\"thumbnail-button thumbnail-button--right\"\r\n                  variant=\"link\"\r\n                  icon=\"dc_forward_right\"\r\n                  hide-label=\"true\"\r\n                  size=\"small\"\r\n                  onClick={this.onRightThumbnailButtonClick}>\r\n                  Next\r\n                </dc-ui-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <ul\r\n          class={{ 'navigation-dots': true, truncated: this.truncateNavigationDots }}\r\n          ref={(el) => (this.navigationDotList = el)}></ul>\r\n\r\n        {this.hasModal && (\r\n          <dc-ui-modal\r\n            backdrop-color=\"dark\"\r\n            ref={(el) => (this.galleryModal = el)}>\r\n            <div\r\n              class=\"gallery-wrapper\"\r\n              ref={(el) => (this.galleryWrapperInModal = el)}>\r\n              <div class=\"gallery-button-container gallery-button-container--left\">\r\n                <dc-ui-button\r\n                  class=\"gallery-button\"\r\n                  variant=\"secondary\"\r\n                  icon=\"dc_backward_left\"\r\n                  onClick={this.onLeftModalButtonClick}\r\n                  hide-label=\"true\">\r\n                  Previous\r\n                </dc-ui-button>\r\n              </div>\r\n              <div\r\n                class=\"modal-slides\"\r\n                ref={(el) => (this.slidesWrapperInModal = el)}></div>\r\n              <div class=\"gallery-button-container gallery-button-container--right\">\r\n                <dc-ui-button\r\n                  class=\"gallery-button\"\r\n                  variant=\"secondary\"\r\n                  icon=\"dc_forward_right\"\r\n                  onClick={this.onRightModalButtonClick}\r\n                  hide-label=\"true\">\r\n                  Next\r\n                </dc-ui-button>\r\n              </div>\r\n            </div>\r\n            <ul\r\n              class={{ 'navigation-dots': true, truncated: this.truncateNavigationDots }}\r\n              ref={(el) => (this.navigationDotListInModal = el)}></ul>\r\n          </dc-ui-modal>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","$dc-ui-image-gallery-transition-time: 300ms;\r\n\r\n@media screen and (prefers-reduced-motion: reduce) {\r\n  // todo test if this works\r\n  $dc-ui-image-gallery-transition-time: 0s;\r\n}\r\n\r\n:host {\r\n  --_thumbnail-width: 70px;\r\n  --_aspect-ratio: initial;\r\n  --_aspect-ratio-padding-top: initial;\r\n}\r\n\r\n.dc-ui-image-gallery {\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  &--ratio-16-9 {\r\n    --_aspect-ratio: 16 / 9;\r\n    --_aspect-ratio-padding-top: 28.125%;\r\n  }\r\n\r\n  &--ratio-1-1 {\r\n    --_aspect-ratio: 1 / 1;\r\n    --_aspect-ratio-padding-top: 50%;\r\n  }\r\n\r\n  .gallery-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    overflow: hidden;\r\n\r\n    .gallery-button-container {\r\n      position: absolute;\r\n      top: 0;\r\n      padding-top: var(--_aspect-ratio-padding-top);\r\n      z-index: 1;\r\n\r\n      &--left {\r\n        left: 0;\r\n      }\r\n\r\n      &--right {\r\n        right: 0;\r\n      }\r\n    }\r\n\r\n    .gallery-button {\r\n      opacity: 0;\r\n      transform: translateY(-50%);\r\n      pointer-events: none;\r\n    }\r\n\r\n    @include media-min('md') {\r\n      &:hover,\r\n      &:focus-within {\r\n        .gallery-button {\r\n          opacity: 1;\r\n          pointer-events: all;\r\n        }\r\n      }\r\n    }\r\n\r\n    // if hover is available, show buttons regardless of viewport size\r\n    // (that way, in case swiping somehow doesn't work [e.g. small desktop windows], the buttons are still there)\r\n    @media (hover: hover) {\r\n      &:hover,\r\n      &:focus-within {\r\n        .gallery-button {\r\n          opacity: 1;\r\n          pointer-events: all;\r\n        }\r\n      }\r\n    }\r\n\r\n    &::after {\r\n      content: '';\r\n      display: block;\r\n      position: absolute;\r\n      inset: 0 0 auto;\r\n      border: 1px solid $color-dark-blue-01;\r\n      aspect-ratio: var(--_aspect-ratio);\r\n      pointer-events: none;\r\n    }\r\n  }\r\n\r\n  dc-ui-modal {\r\n    --_aspect-ratio-padding-top: 28.125%; // fixed 16:9 aspect ratio for modal\r\n\r\n    .navigation-dots {\r\n      margin-top: 24px;\r\n    }\r\n  }\r\n\r\n  .slides,\r\n  .modal-slides {\r\n    touch-action: pan-y;\r\n    display: flex;\r\n    height: 100%;\r\n    transition: transform $dc-ui-image-gallery-transition-time ease;\r\n\r\n    &.no-transition {\r\n      transition: none;\r\n    }\r\n  }\r\n\r\n  dc-ui-gallery-item {\r\n    flex-shrink: 0;\r\n\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      max-width: 100%;\r\n      max-height: 100%;\r\n      aspect-ratio: var(--_aspect-ratio);\r\n      object-fit: contain;\r\n      object-position: top;\r\n    }\r\n  }\r\n}\r\n\r\n.thumbnails {\r\n  overflow-x: clip;\r\n  display: none;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n\r\n  @include media-min('md') {\r\n    display: flex;\r\n  }\r\n\r\n  &__list {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 16px 0 0;\r\n    display: flex;\r\n    transition: transform $dc-ui-image-gallery-transition-time ease;\r\n\r\n    &.no-transition {\r\n      transition: none;\r\n    }\r\n\r\n    li {\r\n      display: flex;\r\n      border: 1px solid $color-dark-blue-01;\r\n      height: var(--_thumbnail-width);\r\n      width: var(--_thumbnail-width);\r\n      min-width: var(--_thumbnail-width);\r\n\r\n      &.active {\r\n        border-color: $color-dark-blue-02;\r\n      }\r\n\r\n      &:has(:focus-visible) {\r\n        border-color: $color-turquoise-03;\r\n      }\r\n\r\n      dc-ui-gallery-item {\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n    }\r\n\r\n    button.thumbnail {\r\n      border: none;\r\n      background: none;\r\n      cursor: pointer;\r\n      padding: 0;\r\n      margin: 0;\r\n      display: block;\r\n      width: 100%;\r\n      height: 100%;\r\n\r\n      &:focus-visible {\r\n        outline: 1px solid $color-turquoise-03;\r\n        outline-offset: -1px;\r\n      }\r\n\r\n      img,\r\n      picture {\r\n        width: 100%;\r\n        height: 100%;\r\n        max-width: 100%;\r\n        max-height: 100%;\r\n        object-fit: contain;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    &__cta {\r\n      display: flex;\r\n      gap: 8px;\r\n    }\r\n  }\r\n}\r\n\r\n.navigation-dots {\r\n  list-style-type: none;\r\n  margin: 16px 0 0;\r\n  padding: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n\r\n  li {\r\n    position: relative;\r\n    display: grid;\r\n    place-items: center;\r\n    width: 24px;\r\n    padding: 0;\r\n    aspect-ratio: 1;\r\n    line-height: 0;\r\n\r\n    button.dot {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0;\r\n      border: none;\r\n      background: none;\r\n      padding: 0;\r\n      cursor: pointer;\r\n    }\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      width: 8px;\r\n      aspect-ratio: 1;\r\n      border-radius: 100%;\r\n      background-color: $color-grey-05;\r\n      pointer-events: none;\r\n      transition: all $dc-ui-image-gallery-transition-time;\r\n      opacity: 1;\r\n    }\r\n\r\n    &.active {\r\n      width: 28px;\r\n\r\n      &::after {\r\n        width: 12px;\r\n        background-color: $color-dark-blue-02;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.truncated {\r\n    $num-dots: 3;\r\n\r\n    li {\r\n      transition: all $dc-ui-image-gallery-transition-time;\r\n    }\r\n\r\n    li:nth-child(#{$num-dots - 1} of .active ~ li),\r\n    li:nth-last-child(#{$num-dots - 1} of :has(~ .active)) {\r\n      &::after {\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n\r\n    li:nth-child(#{$num-dots} of .active ~ li),\r\n    li:nth-last-child(#{$num-dots} of :has(~ .active)) {\r\n      &::after {\r\n        opacity: 0.25;\r\n      }\r\n    }\r\n\r\n    li:nth-child(#{'n + #{$num-dots + 1} of .active ~ li'}),\r\n    li:nth-last-child(#{'n + #{$num-dots + 1} of :has(~ .active)'}) {\r\n      width: 0;\r\n\r\n      &::after {\r\n        opacity: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","createThumbnailElement","slide","index","thumbnail","cloneNode","querySelector","button","document","createElement","classList","add","appendChild","setAttribute","getAttribute","listItem","createModalSlideElement","slideClone","Array","from","querySelectorAll","forEach","el","remove","createNavigationDotElement","gallery","inModal","arguments","length","undefined","addEventListener","goToSlideInModal","goToSlide","setSlideAspectRatio","children","item","ratio","setTimeout","forceUpdate","setThumbnailSpacing","hasThumbnails","shouldShowThumbnails","thumbnailWidth","thumbnailWidthTablet","style","setProperty","listWidth","thumbnailList","offsetWidth","isMobile","includes","minGap","thumbnailMinGapMobile","thumbnailMinGap","leftAlignGap","thumbnailDefaultGapMobile","thumbnailDefaultGap","thumbnailCalculatedGap","numThumbnailsPerPage","Math","floor","numSlides","remainingWidth","gap","numThumbnailPages","ceil","thumbnailButtonContainer","btn","display","updateSlideNumberDisplay","thumbnailInfo","innerHTML","activeSlideIndex","adjustGalleryAndSlideWidths","slidesWrapper","galleryWidth","galleryWrapper","slides","element","indexOf","getActiveSlide","transform","goToActiveThumbnailPage","hasNavigationDots","navigationDotList","adjustGalleryAndSlideWidthsInModal","modalGalleryWidth","galleryWrapperInModal","slidesWrapperInModal","activeSlideIndexInModal","slideIndex","max","min","thumb","dot","hasModal","navigationDotListInModal","goToNextSlide","nextIndex","goToPrevSlide","prevIndex","animate","goToThumbnailPage","page","currentThumbnailPage","gapOffset","xOffset","activeThumbnailPage","activeThumbnail","getActiveThumbnail","DcUiGallery","totalThumbnailWidth","this","modalOpen","hasRendered","truncateNavigationDots","GALLERY_RATIOS_CSS","onSlideClick","galleryModal","open","onLeftButtonClick","onRightButtonClick","onLeftModalButtonClick","activeSlide","goToPrevSlideInModal","onRightModalButtonClick","goToNextSlideInModal","onRightThumbnailButtonClick","nextPage","goToNextThumbnailPage","onLeftThumbnailButtonClick","prevPage","goToPrevThumbnailPage","onThumbnailClick","e","target","closest","Number","returnCSSClasses","connectedCallback","originalRatio","componentDidRender","some","li","dotInModal","initSlides","swipeStartX","touches","screenX","swipeEndX","focusedThumbnail","focusedThumbnailIndex","parseInt","focusedThumbnailPage","modalSlide","initSlidesInModal","close","offsetHeight","innerHeight","checkAspectRatio","render","h","key","class","ref","variant","icon","onClick","size","truncated","xxs","mediaQueryMin","mediaQueryMax"],"sourceRoot":""}
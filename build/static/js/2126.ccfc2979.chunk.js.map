{"version":3,"file":"static/js/2126.ccfc2979.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/text-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakpointCustom.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/addAlphaToHex.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-list-result-item/list-result-item-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-list-result-item/dc-ui-list-result-item.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/slottedStyles.ts"],"sourcesContent":["export const FULL_TEXT_STYLES = {\r\n  'h-superbig': {\r\n    lg: {\r\n      fontSize: '72px',\r\n      lineHeight: '90px',\r\n    },\r\n    md: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    base: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'h-big': {\r\n    lg: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    md: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    base: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h1: {\r\n    lg: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    md: {\r\n      fontSize: '36px',\r\n      lineHeight: '48px',\r\n    },\r\n    base: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h2: {\r\n    lg: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n    },\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h3: {\r\n    lg: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n    },\r\n    base: {\r\n      fontSize: '24px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h4: {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h5: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h6: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-text': {\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-additional-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'intro-text': {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n    },\r\n  },\r\n  'text-line-spacing-big': {\r\n    base: {\r\n      fontSize: '18px',\r\n      lineHeight: '28px',\r\n    },\r\n  },\r\n  text: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'strong-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'strong-mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n  'strong-small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'btn-small': {\r\n    base: {\r\n      fontSize: '0.75rem',\r\n      lineHeight: '1rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '20px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-large': {\r\n    base: {\r\n      fontSize: '1.25rem',\r\n      lineHeight: '1.375rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'link-small': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'link-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'label-checkbox': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'label-textarea': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'label-input': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      letterSpacing: '0.32px',\r\n      lineHeight: '13px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'state-message': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { JssStyle, Styles } from 'jss';\r\nimport { TBreakpointNames, mediaQueryMin } from './mediaQuery';\r\nimport { FULL_TEXT_STYLES } from '../variables';\r\n\r\nexport const BREAKPOINTS = ['base', 'xs', 'sm', 'md', 'lg', 'xl'] as const;\r\nexport type BreakpointKey = (typeof BREAKPOINTS)[number];\r\nexport type BreakpointValues<T> = {\r\n  [key in BreakpointKey]?: T;\r\n} & {\r\n  base: T;\r\n};\r\n\r\n// string is needed in order to pass and parse objects via prop decorator\r\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\r\nexport type BreakpointValue = string | number | boolean;\r\n\r\nexport const parseJSON = (\r\n  prop: BreakpointCustomizable<BreakpointValue>\r\n): BreakpointValues<BreakpointValue> | BreakpointValue => {\r\n  if (typeof prop === 'string') {\r\n    try {\r\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\r\n      return JSON.parse(\r\n        prop\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\r\n      );\r\n    } catch {\r\n      // prop is string, e.g. \"block\" or \"inline\"\r\n      return prop;\r\n    }\r\n  } else {\r\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\r\n    return prop;\r\n  }\r\n};\r\n\r\n// do we need that ?\r\nexport const addImportantToRule = (value: any): string => `${value} !important`;\r\n\r\n// do we need that ?\r\nexport const addImportantToEachRule = (input: JssStyle): JssStyle => {\r\n  return Object.entries(input).reduce(\r\n    (result, [key, value]) =>\r\n      value === null\r\n        ? result\r\n        : ((result[key] =\r\n            typeof value === 'object'\r\n              ? addImportantToEachRule(value as JssStyle)\r\n              : addImportantToRule(value)),\r\n          result),\r\n    {} as JssStyle\r\n  );\r\n};\r\n\r\nexport type GetJssStyleFunction = (value?: any) => JssStyle;\r\nexport type GetJssStyleFunctionWithProp = (value: any, ...args: any[]) => JssStyle;\r\n\r\nexport const buildResponsiveStyles = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunction\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue]\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base) as Styles\r\n          )\r\n      : (getJssStyle(value) as Styles);\r\n\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveStylesWithProps = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunctionWithProp,\r\n  extraProp: string,\r\n  ...args: any[]\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue],\r\n                extraProp,\r\n                ...args\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base, extraProp, ...args) as Styles\r\n          )\r\n      : (getJssStyle(value, extraProp, ...args) as Styles);\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveTextStyles = (styleName: string) => {\r\n  const fontObject = FULL_TEXT_STYLES[styleName];\r\n  if (!fontObject) {\r\n    throw new Error(`Text style ${styleName} does not exist`);\r\n  }\r\n\r\n  let styles = {};\r\n\r\n  // itterate over fontObject\r\n  Object.keys(fontObject).forEach((key) => {\r\n    // check if key is 'base'\r\n    if (key === 'base') {\r\n      styles = {\r\n        ...styles,\r\n        ...fontObject[key],\r\n      };\r\n      return;\r\n    }\r\n\r\n    // get media query from object key\r\n    const mediaQuery = mediaQueryMin(key as any);\r\n\r\n    // add styles from fontObject to mediaQuery\r\n    styles = {\r\n      ...styles,\r\n      [mediaQuery]: {\r\n        ...fontObject[key],\r\n      },\r\n    };\r\n  });\r\n\r\n  return styles;\r\n};\r\n","export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","export const addAlphaToHex = (hex: string, alphaPercent: number): string => {\r\n  const alphaDecimal = alphaPercent / 100;\r\n  const alpha = Math.round(alphaDecimal * 255);\r\n  const alphaHex = alpha.toString(16).padStart(2, '0');\r\n  const newHex = hex + alphaHex;\r\n  return newHex;\r\n};\r\n","import {\r\n  addAlphaToHex,\r\n  addImportantToEachRule,\r\n  buildSlottedStyles,\r\n  color as colorUtils,\r\n  getCss,\r\n  mediaQueryMax,\r\n} from '../../utils';\r\n\r\nexport const getSlottedCss = (el) => {\r\n  return getCss(\r\n    buildSlottedStyles(\r\n      el,\r\n      addImportantToEachRule({\r\n        '& [slot=\"image-area\"] > *:not(dc-ui-indicator)': {\r\n          border: `1px solid ${colorUtils.grey03}`,\r\n        },\r\n        '& [slot=\"image-area\"] > dc-ui-indicator': {\r\n          position: 'absolute',\r\n          top: '4px',\r\n          left: '4px',\r\n          right: '4px',\r\n          width: 'fit-content',\r\n        },\r\n      })\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Defines the grid areas for desktop.\r\n *\r\n * some elements are optional,\r\n * but we can't leave their grid areas empty because the areas still take up space (and I don't even mean the grid gap),\r\n * so we have to dynamically define the grid areas depending on which elements exist\r\n * to ensure that only the non-empty areas are defined\r\n *\r\n * @param hasImage\r\n * @param hasDescription\r\n * @param hasSidebar\r\n */\r\nconst gridAreasDesktop = (hasImage: boolean, hasDescription: boolean, hasSidebar: boolean) => {\r\n  const area1 = hasImage\r\n    ? 'image-area'\r\n    : hasDescription\r\n    ? 'description-area'\r\n    : 'additional-content-area';\r\n  const area2 = hasImage ? 'image-area' : 'additional-content-area';\r\n  const area3 = hasDescription ? 'description-area' : 'additional-content-area';\r\n  const area4 = hasSidebar ? 'sidebar-area' : 'identifier-area';\r\n  const area5 = hasSidebar\r\n    ? 'sidebar-area'\r\n    : hasDescription\r\n    ? 'description-area'\r\n    : 'additional-content-area';\r\n  const area6 = hasSidebar ? 'sidebar-area' : 'additional-content-area';\r\n\r\n  return `\r\n    'identifier-area  identifier-area          ${area4}'\r\n    '${area1}         ${area3}                 ${area5}'\r\n    '${area2}         additional-content-area  ${area6}'`;\r\n};\r\n\r\n/**\r\n * Defines the grid areas for desktop.\r\n *\r\n * See above for why we have to do it this way.\r\n *\r\n * @param hasImage\r\n * @param hasDescription\r\n * @param hasSidebar\r\n */\r\nconst gridAreasMobile = (hasImage: boolean, hasDescription: boolean, hasSidebar: boolean) => {\r\n  return `\r\n  ${hasImage ? '\"image-area\"' : ''}\r\n  \"identifier-area\"\r\n   ${hasDescription ? '\"description-area\"' : ''}\r\n  \"additional-content-area\"\r\n  ${hasSidebar ? '\"sidebar-area\"' : ''}`;\r\n};\r\n\r\nexport const createStyles = (\r\n  hasImage: boolean,\r\n  hasDescription: boolean,\r\n  hasSidebar: boolean,\r\n  hasTopBorder: boolean\r\n): string => {\r\n  const breakpoint = 'md';\r\n\r\n  const styles = getCss({\r\n    '@global': {\r\n      '.dc-ui-list-result-item': {\r\n        borderBottom: `1px solid ${colorUtils.grey03}`,\r\n        ...(hasTopBorder ? { borderTop: `3px solid ${colorUtils.grey02}` } : {}),\r\n        padding: '24px 16px',\r\n\r\n        [mediaQueryMax(breakpoint)]: {\r\n          paddingInline: '0',\r\n        },\r\n\r\n        '&__grid': {\r\n          display: 'grid',\r\n          gridTemplateColumns: '120px 1fr fit-content(264px)',\r\n          gridTemplateAreas: gridAreasDesktop(hasImage, hasDescription, hasSidebar),\r\n          gap: '1rem',\r\n\r\n          [mediaQueryMax(breakpoint)]: {\r\n            gridTemplateColumns: 'auto',\r\n            gridTemplateAreas: gridAreasMobile(hasImage, hasDescription, hasSidebar),\r\n          },\r\n        },\r\n\r\n        '&.highlight': {\r\n          marginBlock: '1rem',\r\n          border: `1px solid ${colorUtils.grey03}`,\r\n          boxShadow: `0 2px 10px ${addAlphaToHex(colorUtils.black, 19)}`,\r\n          [mediaQueryMax(breakpoint)]: {\r\n            marginInline: '0',\r\n            paddingInline: '1rem',\r\n          },\r\n        },\r\n      },\r\n\r\n      '::slotted([slot=\"callout\"])': {\r\n        marginBottom: '1rem',\r\n      },\r\n\r\n      '::slotted([slot=\"identifier-area\"])': {\r\n        gridArea: 'identifier-area',\r\n      },\r\n\r\n      '::slotted([slot=\"image-area\"])': {\r\n        gridArea: 'image-area',\r\n        position: 'relative',\r\n      },\r\n\r\n      '::slotted([slot=\"description-area\"])': {\r\n        gridArea: 'description-area',\r\n      },\r\n\r\n      '::slotted([slot=\"additional-content-area\"])': {\r\n        gridArea: 'additional-content-area',\r\n      },\r\n\r\n      '.dc-ui-list-result-item__sidebar': {\r\n        gridArea: 'sidebar-area',\r\n        justifySelf: 'end',\r\n        textAlign: 'right',\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        gridTemplateRows: 'auto min-content min-content',\r\n        gridTemplateAreas:\r\n          '' + '\"secondary-conversion-area\"' + '\"value-area\"' + '\"primary-conversion-area\"',\r\n        gap: '1rem',\r\n        width: '100%',\r\n\r\n        [mediaQueryMax(breakpoint)]: {\r\n          gridTemplateColumns: '1fr',\r\n          gridTemplateRows: 'repeat(3, auto)',\r\n          gridTemplateAreas:\r\n            '\"value-area\"' + '\"primary-conversion-area\"' + '\"secondary-conversion-area\"',\r\n        },\r\n      },\r\n\r\n      '::slotted([slot=\"secondary-conversion-area\"])': {\r\n        gridArea: 'secondary-conversion-area',\r\n      },\r\n\r\n      '::slotted([slot=\"value-area\"])': {\r\n        gridArea: 'value-area',\r\n      },\r\n\r\n      '::slotted([slot=\"primary-conversion-area\"])': {\r\n        gridArea: 'primary-conversion-area',\r\n        textAlign: 'left',\r\n      },\r\n    },\r\n  });\r\n\r\n  return styles;\r\n};\r\n","import { Component, Host, h, Element, Prop } from '@stencil/core';\r\nimport { attachSlottedCss, injectCSS } from '../../utils';\r\nimport { createStyles, getSlottedCss } from './list-result-item-styles';\r\n\r\n@Component({\r\n  tag: 'dc-ui-list-result-item',\r\n  shadow: true,\r\n})\r\nexport class DcUiListResultItem {\r\n  @Element() el: HTMLElement;\r\n  @Prop() highlight: boolean = false;\r\n\r\n  hasImage: boolean = true;\r\n  hasDescription: boolean = true;\r\n  hasSidebar: boolean = true;\r\n  hasTopBorder: boolean = false;\r\n\r\n  componentWillLoad() {\r\n    if (!this.el.querySelector('[slot=\"image-area\"]')) {\r\n      this.hasImage = false;\r\n    }\r\n    if (!this.el.querySelector('[slot=\"description-area\"]')) {\r\n      this.hasDescription = false;\r\n    }\r\n    if (\r\n      !this.el.querySelector('[slot=\"primary-conversion-area\"]') &&\r\n      !this.el.querySelector('[slot=\"secondary-conversion-area\"]') &&\r\n      !this.el.querySelector('[slot=\"value-area\"]')\r\n    ) {\r\n      this.hasSidebar = false;\r\n    }\r\n    const prevEl = this.el.previousElementSibling;\r\n    if (\r\n      prevEl?.tagName.toLowerCase() !== 'dc-ui-list-result-item' ||\r\n      prevEl?.getAttribute('highlight') === 'true'\r\n    ) {\r\n      this.hasTopBorder = true;\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    attachSlottedCss(this.el, getSlottedCss(this.el));\r\n  }\r\n\r\n  render() {\r\n    injectCSS(\r\n      this.el,\r\n      createStyles,\r\n      this.hasImage,\r\n      this.hasDescription,\r\n      this.hasSidebar,\r\n      this.hasTopBorder\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <div class={{ 'dc-ui-list-result-item': true, highlight: this.highlight }}>\r\n          <slot name=\"callout\"></slot>\r\n          <div class=\"dc-ui-list-result-item__grid\">\r\n            <slot name=\"identifier-area\"></slot>\r\n            <slot name=\"image-area\"></slot>\r\n            <slot name=\"description-area\"></slot>\r\n            <slot name=\"additional-content-area\"></slot>\r\n            {this.hasSidebar && (\r\n              <div class=\"dc-ui-list-result-item__sidebar\">\r\n                <slot name=\"secondary-conversion-area\"></slot>\r\n                <slot name=\"value-area\"></slot>\r\n                <slot name=\"primary-conversion-area\"></slot>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n","type HTMLElementOrDocument = HTMLElement | Document;\r\n\r\nconst slottedStyleTagId = 'dc-ui-slotted-styles';\r\n\r\nexport const getNodeToPrependTo = (rootNode: HTMLElementOrDocument): HTMLElement => {\r\n  return rootNode === document ? rootNode.head : (rootNode as HTMLElement);\r\n};\r\n\r\n/**\r\n * Adds an inheritable style for slotted content.\r\n * @param host\r\n * @param slottedStyles\r\n * @returns void\r\n */\r\nexport const attachSlottedCss = (host: HTMLElement, slottedStyles: string): void => {\r\n  const css = slottedStyles;\r\n  const rootNode = host.getRootNode() as HTMLElementOrDocument;\r\n\r\n  // isConnected check is needed because component may be removed from DOM in \"parallel\" and therefore\r\n  // the style doesn't matter and could produce validation errors because it is appended as a child\r\n  if (!rootNode.isConnected) {\r\n    return;\r\n  }\r\n\r\n  let style = document.getElementById(slottedStyleTagId);\r\n  if (!style) {\r\n    style = document.createElement('style');\r\n    style.id = slottedStyleTagId;\r\n\r\n    const prependTo = getNodeToPrependTo(rootNode);\r\n    const charsetTag = prependTo.querySelector('meta[charset]');\r\n\r\n    if (charsetTag !== null) {\r\n      prependTo.insertBefore(style, charsetTag.nextSibling);\r\n    } else if (prependTo.childNodes.length > 0) {\r\n      prependTo.insertBefore(style, prependTo.firstChild);\r\n    } else {\r\n      prependTo.appendChild(style);\r\n    }\r\n  }\r\n\r\n  style.appendChild(document.createTextNode(css));\r\n  style.normalize(); // merge text nodes\r\n};\r\n"],"names":["FULL_TEXT_STYLES","lg","fontSize","lineHeight","md","base","fontWeight","h1","h2","h3","h4","h5","h6","text","letterSpacing","textTransform","focus","parseJSON","prop","JSON","parse","replace","_a","addImportantToEachRule","input","Object","entries","reduce","result","_ref","key","value","addImportantToRule","buildResponsiveStyles","rawValue","getJssStyle","keys","filter","breakpointValue","assign","mediaQueryMin","buildResponsiveStylesWithProps","extraProp","_len","arguments","length","args","Array","_key","buildResponsiveTextStyles","styleName","fontObject","Error","styles","forEach","mediaQuery","color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","addAlphaToHex","hex","alphaPercent","alphaDecimal","Math","round","toString","padStart","gridAreasDesktop","hasImage","hasDescription","hasSidebar","gridAreasMobile","createStyles","hasTopBorder","breakpoint","getCss","borderBottom","borderTop","padding","mediaQueryMax","paddingInline","display","gridTemplateColumns","gridTemplateAreas","gap","marginBlock","border","boxShadow","marginInline","marginBottom","gridArea","position","justifySelf","textAlign","gridTemplateRows","width","DcUiListResultItem","componentWillLoad","this","el","querySelector","prevEl","previousElementSibling","tagName","toLowerCase","getAttribute","componentDidLoad","attachSlottedCss","buildSlottedStyles","top","left","right","render","injectCSS","h","Host","class","highlight","name","breakpoints","xxs","xs","sm","xl","xxl","min","max","slottedStyleTagId","host","slottedStyles","css","rootNode","getRootNode","isConnected","style","document","getElementById","createElement","id","prependTo","head","getNodeToPrependTo","charsetTag","insertBefore","nextSibling","childNodes","firstChild","appendChild","createTextNode","normalize"],"sourceRoot":""}
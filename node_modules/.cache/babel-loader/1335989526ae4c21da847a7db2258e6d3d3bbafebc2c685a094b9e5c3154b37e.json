{"ast":null,"code":"import { c as color } from './color-4d62bb24.js';\nconst pxToRemWithUnit = px => \"\".concat(px / 16, \"rem\");\n/**\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\n */\nconst getScreenReaderJssStyle = isHidden => isHidden ? {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  clip: 'rect(1px,1px,1px,1px)',\n  clipPath: 'inset(50%)',\n  whiteSpace: 'nowrap'\n} : {\n  position: 'static',\n  width: 'auto',\n  height: 'auto',\n  margin: 0,\n  overflow: 'visible',\n  clip: 'auto',\n  clipPath: 'none',\n  whiteSpace: 'normal'\n};\nconst getEllipsisJssStyle = isEllipsis => isEllipsis ? {\n  maxWidth: '100%',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n} : {};\nconst getDisabledCheckboxRadioTextJssStyle = isDisabled => isDisabled ? {\n  color: color.grey03,\n  cursor: 'default'\n} : {\n  color: color.darkBlue02\n};\nconst getRatioJssStyle = ratio => ratio ? {\n  aspectRatio: ratio,\n  height: '100%',\n  width: '100%'\n} : {};\nconst getObjectFitJssStyle = objectFit => objectFit ? {\n  objectFit: objectFit\n} : {};\nconst getImageStyleJssStyle = imageStyle => imageStyle ? {\n  borderRadius: imageStyle === 'circle' ? '50%' : '0'\n} : {};\nexport { getScreenReaderJssStyle as a, getEllipsisJssStyle as b, getRatioJssStyle as c, getObjectFitJssStyle as d, getImageStyleJssStyle as e, getDisabledCheckboxRadioTextJssStyle as g, pxToRemWithUnit as p };","map":{"version":3,"names":["pxToRemWithUnit","px","concat","getScreenReaderJssStyle","isHidden","position","width","height","margin","overflow","clip","clipPath","whiteSpace","getEllipsisJssStyle","isEllipsis","maxWidth","textOverflow","getDisabledCheckboxRadioTextJssStyle","isDisabled","color","grey03","cursor","darkBlue02","getRatioJssStyle","ratio","aspectRatio","getObjectFitJssStyle","objectFit","getImageStyleJssStyle","imageStyle","borderRadius"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\utils\\functions\\styles.ts"],"sourcesContent":["import type { JssStyle } from 'jss';\r\nimport { color as colorUtils } from '../variables/color';\r\n\r\nexport const IMAGE_STYLE = ['default', 'circle'];\r\nexport type TImageStyle = (typeof IMAGE_STYLE)[number];\r\n\r\nexport const IMAGE_OBJECT_FIT = ['fill', 'contain', 'cover', 'none', 'scale-down'];\r\nexport type TImageObjectFit = (typeof IMAGE_OBJECT_FIT)[number];\r\n\r\nexport const pxToRemWithUnit = (px: number): string => `${px / 16}rem`;\r\n\r\n/**\r\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\r\n */\r\nexport const getScreenReaderJssStyle = (isHidden: boolean): JssStyle =>\r\n  isHidden\r\n    ? {\r\n        position: 'absolute',\r\n        width: '1px',\r\n        height: '1px',\r\n        margin: '-1px',\r\n        overflow: 'hidden',\r\n        clip: 'rect(1px,1px,1px,1px)',\r\n        clipPath: 'inset(50%)',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {\r\n        position: 'static',\r\n        width: 'auto',\r\n        height: 'auto',\r\n        margin: 0,\r\n        overflow: 'visible',\r\n        clip: 'auto',\r\n        clipPath: 'none',\r\n        whiteSpace: 'normal',\r\n      };\r\n\r\nexport const getEllipsisJssStyle = (isEllipsis: boolean): JssStyle =>\r\n  isEllipsis\r\n    ? {\r\n        maxWidth: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {};\r\n\r\nexport const getDisabledCheckboxRadioTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getDisabledInputTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getInputJssStyle = (type: string): JssStyle => {\r\n  let inputStyles = {};\r\n\r\n  switch (type) {\r\n    case 'date':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green01,\r\n      };\r\n      break;\r\n    case 'email':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green02,\r\n      };\r\n      break;\r\n    case 'file':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green03,\r\n      };\r\n      break;\r\n    case 'hidden':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red01,\r\n      };\r\n      break;\r\n    case 'number':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red02,\r\n      };\r\n      break;\r\n    case 'password':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red03,\r\n      };\r\n      break;\r\n    case 'search':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow01,\r\n      };\r\n      break;\r\n    case 'tel':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow02,\r\n      };\r\n      break;\r\n    case 'url':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow03,\r\n      };\r\n      break;\r\n    default:\r\n      inputStyles = {\r\n        borderColor: colorUtils.grey05,\r\n      };\r\n  }\r\n\r\n  return inputStyles;\r\n};\r\n\r\nexport const getRatioJssStyle = (ratio: string): JssStyle =>\r\n  ratio\r\n    ? {\r\n        aspectRatio: ratio,\r\n        height: '100%',\r\n        width: '100%',\r\n      }\r\n    : {};\r\n\r\nexport const getObjectFitJssStyle = (objectFit: TImageObjectFit): JssStyle =>\r\n  objectFit\r\n    ? {\r\n        objectFit: objectFit,\r\n      }\r\n    : {};\r\n\r\nexport const getImageStyleJssStyle = (imageStyle: TImageStyle): JssStyle =>\r\n  imageStyle\r\n    ? {\r\n        borderRadius: imageStyle === 'circle' ? '50%' : '0',\r\n      }\r\n    : {};\r\n"],"mappings":";MASaA,eAAe,GAAIC,EAAU,OAAAC,MAAA,CAAgBD,EAAE,GAAG,EAAE;AAEjE;;;MAGaE,uBAAuB,GAAIC,QAAiB,IACvDA,QAAQ,GACJ;EACEC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,KAAK;EACZC,MAAM,EAAE,KAAK;EACbC,MAAM,EAAE,MAAM;EACdC,QAAQ,EAAE,QAAQ;EAClBC,IAAI,EAAE,uBAAuB;EAC7BC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE;CACb,GACD;EACEP,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,MAAM;EACdC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,MAAM;EAChBC,UAAU,EAAE;;MAGPC,mBAAmB,GAAIC,UAAmB,IACrDA,UAAU,GACN;EACEC,QAAQ,EAAE,MAAM;EAChBN,QAAQ,EAAE,QAAQ;EAClBO,YAAY,EAAE,UAAU;EACxBJ,UAAU,EAAE;CACb,GACD;MAEOK,oCAAoC,GAAIC,UAAmB,IACtEA,UAAU,GACN;EACEC,KAAK,EAAEA,KAAU,CAACC,MAAM;EACxBC,MAAM,EAAE;CACT,GACD;EACEF,KAAK,EAAEA,KAAU,CAACG;;MAuEbC,gBAAgB,GAAIC,KAAa,IAC5CA,KAAK,GACD;EACEC,WAAW,EAAED,KAAK;EAClBjB,MAAM,EAAE,MAAM;EACdD,KAAK,EAAE;CACR,GACD;MAEOoB,oBAAoB,GAAIC,SAA0B,IAC7DA,SAAS,GACL;EACEA,SAAS,EAAEA;CACZ,GACD;MAEOC,qBAAqB,GAAIC,UAAuB,IAC3DA,UAAU,GACN;EACEC,YAAY,EAAED,UAAU,KAAK,QAAQ,GAAG,KAAK,GAAG;CACjD,GACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
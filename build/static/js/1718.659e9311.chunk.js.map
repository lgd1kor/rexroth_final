{"version":3,"file":"static/js/1718.659e9311.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-table/table-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-table/dc-ui-table.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/font.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/slottedStyles.ts"],"sourcesContent":["export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { getCss, color as colorUtils, buildSlottedStyles, mediaQueryMax } from '../../utils';\r\n\r\nexport const createStyles = (): string => {\r\n  const styles = getCss({\r\n    '@global': {\r\n      ':host': {},\r\n\r\n      '.table-container': {\r\n        overflowX: 'auto',\r\n      },\r\n    },\r\n  });\r\n\r\n  return styles;\r\n};\r\n\r\nexport const getSlottedCss = (el: HTMLElement): string => {\r\n  return getCss(\r\n    buildSlottedStyles(el, {\r\n      '& table': {\r\n        width: '100%',\r\n        fontFamily: 'Bosch Sans',\r\n        boxSizing: 'border-box',\r\n        borderSpacing: 0,\r\n        borderCollapse: 'collapse',\r\n        backgroundColor: colorUtils.white,\r\n\r\n        '& *': {\r\n          boxSizing: 'border-box',\r\n        },\r\n\r\n        '& tbody tr': {\r\n          transition: 'background-color 350ms',\r\n          '&:hover': {\r\n            backgroundColor: colorUtils.grey01,\r\n          },\r\n        },\r\n\r\n        '& tr': {\r\n          '&.no-padding': {\r\n            '& > th, & > td': {\r\n              height: 'auto',\r\n              padding: '0',\r\n            },\r\n          },\r\n\r\n          '&.align-left': {\r\n            textAlign: 'left',\r\n          },\r\n\r\n          '&.align-center': {\r\n            textAlign: 'center',\r\n          },\r\n\r\n          '&.align-right': {\r\n            textAlign: 'right',\r\n          },\r\n        },\r\n\r\n        '& th, & td': {\r\n          minWidth: '80px',\r\n          height: '48px',\r\n          padding: '0 1rem',\r\n          fontSize: '14px',\r\n          lineHeight: '18px',\r\n          color: colorUtils.black,\r\n\r\n          '&.no-padding': {\r\n            padding: '0',\r\n          },\r\n\r\n          '&.align-left': {\r\n            textAlign: 'left',\r\n          },\r\n\r\n          '&.align-center': {\r\n            textAlign: 'center',\r\n          },\r\n\r\n          '&.align-right': {\r\n            textAlign: 'right',\r\n          },\r\n\r\n          [mediaQueryMax('md')]: {\r\n            whiteSpace: 'nowrap',\r\n          },\r\n        },\r\n\r\n        '& th': {\r\n          borderTop: `1px solid ${colorUtils.grey05}`,\r\n          borderBottom: `1px solid ${colorUtils.grey05}`,\r\n          fontWeight: 'bold',\r\n          color: colorUtils.darkBlue02,\r\n          textAlign: 'left',\r\n        },\r\n\r\n        '& td': {\r\n          borderBottom: `1px solid ${colorUtils.grey02}`,\r\n        },\r\n      },\r\n    })\r\n  );\r\n};\r\n","import { Component, Element, Host, h } from '@stencil/core';\r\nimport { attachSlottedCss, injectCSS, injectFont } from '../../utils';\r\nimport { createStyles } from './table-styles';\r\nimport { getSlottedCss } from './table-styles';\r\n\r\n@Component({\r\n  tag: 'dc-ui-table',\r\n  shadow: true,\r\n})\r\nexport class DcUiTable {\r\n  @Element() el: HTMLElement;\r\n\r\n  componentWillLoad() {\r\n    injectFont();\r\n  }\r\n\r\n  public connectedCallback(): void {\r\n    attachSlottedCss(this.el, getSlottedCss(this.el));\r\n  }\r\n\r\n  render() {\r\n    injectCSS(this.el, createStyles);\r\n\r\n    return (\r\n      <Host>\r\n        <div class=\"table-container\">\r\n          <slot></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export const font = {\r\n  url: 'https://dc-webtoolkit.azureedge.net/font/fontStyles.css',\r\n  family: 'Bosch Sans',\r\n  size: {\r\n    small: '1rem',\r\n    medium: '1.5rem',\r\n    large: '2rem',\r\n  },\r\n};\r\n\r\n// inject font into the document\r\nexport function injectFont() {\r\n  // console.log('injectFont -- disabled');\r\n\r\n  // check if the font is already injected\r\n  if (\r\n    document.querySelector(`link[href=\"${font.url}\"]`) ||\r\n    document.querySelector(`link[href*=\"nextgen-web-ui-toolkit.css\"]`)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const link = document.createElement('link');\r\n  link.rel = 'stylesheet';\r\n  link.href = font.url;\r\n  document.head.appendChild(link);\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n","type HTMLElementOrDocument = HTMLElement | Document;\r\n\r\nconst slottedStyleTagId = 'dc-ui-slotted-styles';\r\n\r\nexport const getNodeToPrependTo = (rootNode: HTMLElementOrDocument): HTMLElement => {\r\n  return rootNode === document ? rootNode.head : (rootNode as HTMLElement);\r\n};\r\n\r\n/**\r\n * Adds an inheritable style for slotted content.\r\n * @param host\r\n * @param slottedStyles\r\n * @returns void\r\n */\r\nexport const attachSlottedCss = (host: HTMLElement, slottedStyles: string): void => {\r\n  const css = slottedStyles;\r\n  const rootNode = host.getRootNode() as HTMLElementOrDocument;\r\n\r\n  // isConnected check is needed because component may be removed from DOM in \"parallel\" and therefore\r\n  // the style doesn't matter and could produce validation errors because it is appended as a child\r\n  if (!rootNode.isConnected) {\r\n    return;\r\n  }\r\n\r\n  let style = document.getElementById(slottedStyleTagId);\r\n  if (!style) {\r\n    style = document.createElement('style');\r\n    style.id = slottedStyleTagId;\r\n\r\n    const prependTo = getNodeToPrependTo(rootNode);\r\n    const charsetTag = prependTo.querySelector('meta[charset]');\r\n\r\n    if (charsetTag !== null) {\r\n      prependTo.insertBefore(style, charsetTag.nextSibling);\r\n    } else if (prependTo.childNodes.length > 0) {\r\n      prependTo.insertBefore(style, prependTo.firstChild);\r\n    } else {\r\n      prependTo.appendChild(style);\r\n    }\r\n  }\r\n\r\n  style.appendChild(document.createTextNode(css));\r\n  style.normalize(); // merge text nodes\r\n};\r\n"],"names":["color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","getCss","overflowX","DcUiTable","componentWillLoad","injectFont","connectedCallback","el","attachSlottedCss","this","buildSlottedStyles","width","fontFamily","boxSizing","borderSpacing","borderCollapse","backgroundColor","transition","height","padding","textAlign","minWidth","fontSize","lineHeight","mediaQueryMax","whiteSpace","borderTop","borderBottom","fontWeight","render","injectCSS","h","Host","key","class","font","url","family","size","small","medium","large","document","querySelector","link","createElement","rel","href","head","appendChild","breakpoints","xxs","xs","sm","md","lg","xl","xxl","mediaQueryMin","min","max","slottedStyleTagId","host","slottedStyles","css","rootNode","getRootNode","isConnected","style","getElementById","id","prependTo","getNodeToPrependTo","charsetTag","insertBefore","nextSibling","childNodes","length","firstChild","createTextNode","normalize"],"sourceRoot":""}
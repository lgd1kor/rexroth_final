{"version":3,"file":"static/js/5163.7c4a364e.chunk.js","mappings":"oKAEaA,EAAuBA,KAClC,IAAIC,EACJ,MAAMC,EAAQC,OAAOC,WAkBrB,OAfEH,EADEC,EAAQG,EAAAA,EAAYC,GACF,MACXJ,EAAQG,EAAAA,EAAYE,GACT,KACXL,EAAQG,EAAAA,EAAYG,GACT,KACXN,EAAQG,EAAAA,EAAYI,GACT,KACXP,EAAQG,EAAAA,EAAYK,GACT,KACXR,EAAQG,EAAAA,EAAYM,IACT,KAEA,MAGfV,CAAiB,EASbW,EAA6BC,GACjCV,OAAOC,YAAcC,EAAAA,EAAYQ,GAS7BC,EAA8BD,GAClCV,OAAOC,YAAcC,EAAAA,EAAYQ,GA8B7BE,EAAuBF,GAC3BV,OAAOC,WAAaC,EAAAA,EAAYQ,E,8GCzEzC,MCSaG,EAA2B,M,0FAK9BC,WAAAA,GACN,OAAOL,EAAAA,EAAAA,GAA0B,MAAQ,mBAAqB,kB,CAGhEM,cAAAA,GACE,MAAO,CACL,oCAAoC,EACpC,4CAA6CC,KAAKC,UAClD,yCAA0CD,KAAKE,O,CAInDC,MAAAA,GACE,MAAMC,GACJC,EAAAA,EAAAA,GAACC,EAAAA,EAAQ,CAAAC,IAAA,4CACNP,KAAKQ,OACJR,KAAKC,YACLI,EAAAA,EAAAA,GAAA,cAAAE,IAAA,2CACEE,KAAMT,KAAKF,cACXY,KAAK,OACLC,MAAM,eAMd,OAAOX,KAAKC,WACVI,EAAAA,EAAAA,GAAA,QACEM,MAAOX,KAAKD,iBAAgB,eACf,QACZK,IAGHC,EAAAA,EAAAA,GAAA,UACEO,KAAK,SACLD,MAAOX,KAAKD,kBACXK,E,WDlD8B,q9B,uDEC1BlB,EAAqD,CAChE2B,IAAK,EACL1B,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,IAAK,M,SAYSsB,EAAcC,GAC5B,MAAO,oBAAoB7B,EAAY6B,OACzC,C,SAQgBC,EAAcC,GAC5B,MAAO,oBAAoB/B,EAAY+B,GAAO,MAChD,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header-nav-breadcrumb-item/dc-ui-header-nav-breadcrumb-item.scss?tag=dc-ui-header-nav-breadcrumb-item&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header-nav-breadcrumb-item/dc-ui-header-nav-breadcrumb-item.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",".dc-ui-header-nav-breadcrumb-item {\r\n  display: flex;\r\n  align-items: center;\r\n  appearance: none;\r\n  background: none;\r\n  border: none;\r\n  padding: 4px 0;\r\n  @include font-style('mid-size-text');\r\n  color: $color-grey-06;\r\n  cursor: pointer;\r\n\r\n  &--current {\r\n    cursor: default;\r\n    color: $color-dark-blue-02;\r\n    @include font-style('strong-mid-size-text');\r\n  }\r\n\r\n  @include media-max('xl') {\r\n    flex-direction: row-reverse;\r\n  }\r\n}\r\n\r\n.separator {\r\n  margin: 0 8px;\r\n  color: $color-grey-03;\r\n}\r\n","import { Component, Fragment, h, Prop } from '@stencil/core';\r\nimport { TIcon } from '../../components';\r\nimport { isBreakpointEqualOrLarger } from '../../utils/functions';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-nav-breadcrumb-item',\r\n  styleUrl: 'dc-ui-header-nav-breadcrumb-item.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderNavBreadcrumbItem {\r\n  @Prop() label: string;\r\n  @Prop() isCurrent: boolean;\r\n  @Prop() isRoot: boolean;\r\n\r\n  private getIconName(): TIcon {\r\n    return isBreakpointEqualOrLarger('xl') ? 'dc_forward_right' : 'dc_backward_left';\r\n  }\r\n\r\n  getItemClasses() {\r\n    return {\r\n      'dc-ui-header-nav-breadcrumb-item': true,\r\n      'dc-ui-header-nav-breadcrumb-item--current': this.isCurrent,\r\n      'dc-ui-header-nav-breadcrumb-item--root': this.isRoot,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const content = (\r\n      <Fragment>\r\n        {this.label}\r\n        {!this.isCurrent && (\r\n          <dc-ui-icon\r\n            name={this.getIconName()}\r\n            size=\"tiny\"\r\n            class=\"separator\"\r\n          />\r\n        )}\r\n      </Fragment>\r\n    );\r\n\r\n    return this.isCurrent ? (\r\n      <span\r\n        class={this.getItemClasses()}\r\n        aria-current=\"page\">\r\n        {content}\r\n      </span>\r\n    ) : (\r\n      <button\r\n        type=\"button\"\r\n        class={this.getItemClasses()}>\r\n        {content}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeaderNavBreadcrumbItem","getIconName","getItemClasses","this","isCurrent","isRoot","render","content","h","Fragment","key","label","name","size","class","type","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
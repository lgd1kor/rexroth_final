{"version":3,"file":"static/js/4919.787ac460.chunk.js","mappings":"qJAAA,MCOaA,EAAc,MAL3BC,WAAAA,CAAAC,I,eAqBU,KAAAC,0BAA4B,MAElCC,EAAAA,EAAAA,GAAYC,KAAKC,GAAG,C,CAZtBC,gBAAAA,GAEEF,KAAKC,GAAGE,iBAAiB,sBAAuBH,KAAKF,0B,CAGvDM,oBAAAA,GAEEJ,KAAKC,GAAGI,oBAAoB,sBAAuBL,KAAKF,0B,CAS1D,4BAAMQ,GACJ,IAAKN,KAAKO,YAAcP,KAAKQ,SAE3B,OAAO,GAGT,MAAMC,EAAcT,KAAKC,GAAGS,wBAAwBC,MAG9CA,EAFeX,KAAKO,UAAUG,wBAAwBC,MACxCX,KAAKQ,SAASE,wBAAwBC,MACf,GAG3C,OAAIA,EAAsB,GAAdF,EACHE,EAGY,GAAdF,C,CAGTG,MAAAA,GAEE,MAAMC,EAAUb,KAAKC,GAAGa,cAAc,iBAChCC,EAAaf,KAAKC,GAAGa,cAAc,qBACnCE,EAAYhB,KAAKC,GAAGa,cAAc,mBAGlCG,EAAU,CACd,uBAAuB,EACvB,aAAcJ,EACd,iBAAkBE,EAClB,eAAgBC,GAGZE,EATYlB,KAAKC,GAAGa,cAAc,oBAUtCK,EAAAA,EAAAA,GAAA,OAAKC,MAAM,mBACTD,EAAAA,EAAAA,GAAA,QAAME,KAAK,YAEX,KAEEC,EAAOT,GACXM,EAAAA,EAAAA,GAAA,OAAKC,MAAM,iBACTD,EAAAA,EAAAA,GAAA,QAAME,KAAK,UAEX,KAEEE,EAAUR,GACdI,EAAAA,EAAAA,GAAA,OACEC,MAAM,mBACNI,IAAMvB,GAAQD,KAAKO,UAAYN,IAC/BkB,EAAAA,EAAAA,GAAA,QAAME,KAAK,cAEX,KAEEI,EAAST,GACbG,EAAAA,EAAAA,GAAA,OACEC,MAAM,iBACNI,IAAMvB,GAAQD,KAAKQ,SAAWP,IAC9BkB,EAAAA,EAAAA,GAAA,QAAME,KAAK,YAEX,KAEJ,OACEF,EAAAA,EAAAA,GAAA,OAAAO,IAAA,2CAAKN,MAAOH,GACTC,EACAI,EACAC,EACAE,E,wCD/FiB,s7C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-base/dc-ui-header-base.scss?tag=dc-ui-header-base&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-base/dc-ui-header-base.tsx"],"sourcesContent":[".header-base-wrapper {\r\n  background-color: $color-white;\r\n  position: relative;\r\n  z-index: 1;\r\n  height: var(--header-height);\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  grid-template-columns:\r\n    [burger-start] 56px [burger-end] 16px [logo-start] 1fr [logo-end search-start] var(\r\n      --header-height\r\n    )\r\n    [search-end];\r\n\r\n  @include media-min(md) {\r\n    grid-template-columns:\r\n      [burger-start] 80px [burger-end] 32px [logo-start] 1fr [logo-end meta-start] auto [meta-end] 48px [search-start] var(\r\n        --header-height\r\n      )\r\n      [search-end];\r\n  }\r\n\r\n  @include media-min(xl) {\r\n    grid-template-columns: 32px [logo-start] 1fr [logo-end meta-start] auto [meta-end] 48px [search-start] 22% [search-end];\r\n  }\r\n}\r\n\r\n.burger-wrapper {\r\n  grid-column: burger;\r\n\r\n  @include media-min(xl) {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.logo-wrapper {\r\n  grid-column: logo;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.meta-nav-wrapper {\r\n  grid-column: meta;\r\n  align-items: center;\r\n  padding-block: 8px;\r\n  grid-auto-flow: column;\r\n  gap: 32px;\r\n  display: none;\r\n\r\n  @include media-min(md) {\r\n    display: grid;\r\n  }\r\n}\r\n\r\n.search-wrapper {\r\n  grid-column: search;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n","import { Component, h, Element, Method, forceUpdate } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-base',\r\n  styleUrl: 'dc-ui-header-base.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderBase {\r\n  @Element() el: HTMLElement;\r\n\r\n  private metaNavEl?: HTMLElement;\r\n  private searchEl?: HTMLElement;\r\n\r\n  componentDidLoad() {\r\n    // Listen for the custom event\r\n    this.el.addEventListener('languageButtonMoved', this.handleLanguageButtonMoved);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    // Clean up listener\r\n    this.el.removeEventListener('languageButtonMoved', this.handleLanguageButtonMoved);\r\n  }\r\n\r\n  private handleLanguageButtonMoved = () => {\r\n    // Handle the event, e.g., force update or any other logic\r\n    forceUpdate(this.el);\r\n  };\r\n\r\n  @Method()\r\n  async returnSearchExpandSize(): Promise<number> {\r\n    if (!this.metaNavEl || !this.searchEl) {\r\n      // as fallback set to half of the header width\r\n      return 50;\r\n    }\r\n\r\n    const headerWidth = this.el.getBoundingClientRect().width;\r\n    const metaNavWidth = this.metaNavEl.getBoundingClientRect().width;\r\n    const searchWidth = this.searchEl.getBoundingClientRect().width;\r\n    const width = metaNavWidth + searchWidth + 48;\r\n\r\n    // if width is greater than 50% of the header width, return the width\r\n    if (width > headerWidth * 0.5) {\r\n      return width;\r\n    }\r\n\r\n    return headerWidth * 0.5;\r\n  }\r\n\r\n  render() {\r\n    // Check if slots have content\r\n    const hasLogo = this.el.querySelector('[slot=\"logo\"]');\r\n    const hasMetaNav = this.el.querySelector('[slot=\"meta-nav\"]');\r\n    const hasSearch = this.el.querySelector('[slot=\"search\"]');\r\n    const hasBurger = this.el.querySelector('[slot=\"burger\"]');\r\n    // Build class string based on slot usage\r\n    const classes = {\r\n      'header-base-wrapper': true,\r\n      'has-logo': !!hasLogo,\r\n      'has-meta-nav': !!hasMetaNav,\r\n      'has-search': !!hasSearch,\r\n    };\r\n\r\n    const burger = hasBurger ? (\r\n      <div class=\"burger-wrapper\">\r\n        <slot name=\"burger\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    const logo = hasLogo ? (\r\n      <div class=\"logo-wrapper\">\r\n        <slot name=\"logo\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    const metaNav = hasMetaNav ? (\r\n      <div\r\n        class=\"meta-nav-wrapper\"\r\n        ref={(el) => (this.metaNavEl = el)}>\r\n        <slot name=\"meta-nav\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    const search = hasSearch ? (\r\n      <div\r\n        class=\"search-wrapper\"\r\n        ref={(el) => (this.searchEl = el)}>\r\n        <slot name=\"search\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    return (\r\n      <div class={classes}>\r\n        {burger}\r\n        {logo}\r\n        {metaNav}\r\n        {search}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"names":["DcUiHeaderBase","constructor","hostRef","handleLanguageButtonMoved","forceUpdate","this","el","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","returnSearchExpandSize","metaNavEl","searchEl","headerWidth","getBoundingClientRect","width","render","hasLogo","querySelector","hasMetaNav","hasSearch","classes","burger","h","class","name","logo","metaNav","ref","search","key"],"sourceRoot":""}
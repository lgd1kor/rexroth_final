{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LGD1KOR\\\\Desktop\\\\react\\\\my-app\\\\src\\\\ApiComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiComponent = () => {\n  _s();\n  const [names, setNames] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('https://webapi.partcommunity.com/cadqualifier.asp?apikey=e66120f9d9624823884cac1bf290ea88');\n        const xmlData = response.data;\n\n        // Parse the XML data\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n        const formatTags = xmlDoc.getElementsByTagName('format');\n        const extractedNames = Array.from(formatTags).map(format => {\n          const nameTag = format.getElementsByTagName('name')[0];\n          const versionTag = format.getElementsByTagName('version')[0];\n          const cad = format.getAttribute('cad');\n          const name = nameTag ? nameTag.textContent : '';\n          const version = versionTag && versionTag.textContent ? versionTag.textContent : '';\n          return `${name} ${version} (${cad})`.trim();\n        });\n\n        // Update the state with the extracted names\n        setNames(extractedNames);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Extracted Names:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ApiComponent, \"kJTuMd1lgF0E55dDL5OVpfTCbrk=\");\n_c = ApiComponent;\nexport default ApiComponent;\nvar _c;\n$RefreshReg$(_c, \"ApiComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ApiComponent","_s","names","setNames","loading","setLoading","error","setError","fetchData","response","get","xmlData","data","parser","DOMParser","xmlDoc","parseFromString","formatTags","getElementsByTagName","extractedNames","Array","from","map","format","nameTag","versionTag","cad","getAttribute","name","textContent","version","trim","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","_c","$RefreshReg$"],"sources":["C:/Users/LGD1KOR/Desktop/react/my-app/src/ApiComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ApiComponent = () => {\r\n  const [names, setNames] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('https://webapi.partcommunity.com/cadqualifier.asp?apikey=e66120f9d9624823884cac1bf290ea88');\r\n        const xmlData = response.data;\r\n\r\n        // Parse the XML data\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\r\n        const formatTags = xmlDoc.getElementsByTagName('format');\r\n\r\n        const extractedNames = Array.from(formatTags).map(format => {\r\n          const nameTag = format.getElementsByTagName('name')[0];\r\n          const versionTag = format.getElementsByTagName('version')[0];\r\n          const cad = format.getAttribute('cad');\r\n\r\n          const name = nameTag ? nameTag.textContent : '';\r\n          const version = versionTag && versionTag.textContent ? versionTag.textContent : '';\r\n          \r\n          return `${name} ${version} (${cad})`.trim();\r\n        });\r\n\r\n        // Update the state with the extracted names\r\n        setNames(extractedNames);\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error.message}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Extracted Names:</h1>\r\n      <ul>\r\n        {names.map((name, index) => (\r\n          <li key={index}>{name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ApiComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
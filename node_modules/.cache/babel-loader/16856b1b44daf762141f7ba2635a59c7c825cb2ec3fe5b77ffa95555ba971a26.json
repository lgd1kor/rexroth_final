{"ast":null,"code":"import { r as registerInstance, c as createEvent, h } from './index-f45b2301.js';\nconst dcUiProgressBarCss = \":root{--White-Gradient:linear-gradient(\\n    180deg,\\n    rgba(255, 255, 255, 0) 0%,\\n    rgba(255, 255, 255, 0.5) 60%,\\n    #ffffff 100%\\n  );--Grey-Gradient:linear-gradient(\\n    180deg,\\n    rgba(237, 241, 244, 0) 0%,\\n    rgba(237, 241, 244, 0.5) 60%,\\n    #edf1f4 100%\\n  );--Blue-Gradient:linear-gradient(\\n    180deg,\\n    rgba(0, 43, 73, 0) 0%,\\n    rgba(0, 43, 73, 0.5) 60%,\\n    #002b49 100%\\n  )}.progress-bar{background-color:#cad6dd;height:54px;overflow:hidden}.progress-bar__fill{background-color:#00c8f7;height:100%;display:flex;align-items:center;justify-content:flex-end;gap:24px;position:relative;transition:width 0.1s ease-in-out}.progress-bar__fill .value{padding:0 24px;position:absolute;right:0;transition:translate 0.1s ease-in-out;white-space:nowrap}.progress-bar__fill.value-overflows .value{translate:100%}\";\nconst DcUiProgressBarStyle0 = dcUiProgressBarCss;\nconst DcUiProgressBar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.dcChange = createEvent(this, \"dcChange\", 7);\n    this.fillBarWidth = 0;\n    this.valuePercentage = 0;\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.unit = '%';\n  }\n  /**\n   * Ensures the value is within the valid range between min and max\n   * @param value - The value to validate\n   * @returns The clamped value within the valid range\n   */\n  validateAndClampValue(value) {\n    if (!(value >= this.min)) return this.min;\n    if (value > this.max) return this.max;\n    return value;\n  }\n  /**\n   * Updates the internal metrics used for rendering the progress bar\n   * @param value - The current value to calculate metrics for\n   */\n  updateMetrics(value) {\n    this.fillBarWidth = (value - this.min) / (this.max - this.min) * 100;\n    this.valuePercentage = value / this.max * 100;\n  }\n  /**\n   * Sets the current value of the progress bar\n   * @param value - The new value to set\n   */\n  async setValue(value) {\n    this.value = this.validateAndClampValue(value);\n  }\n  /**\n   * Resets the progress bar to its minimum value\n   */\n  async reset() {\n    this.value = this.min;\n  }\n  /**\n   * Watches for changes to the value property\n   * @param newValue - The new value to process\n   */\n  valueChanged(newValue) {\n    const validValue = this.validateAndClampValue(newValue);\n    this.dcChange.emit(validValue);\n    this.updateMetrics(validValue);\n  }\n  componentWillLoad() {\n    if (this.unit.length > DcUiProgressBar.MAX_UNIT_LENGTH) {\n      console.warn(`dc-ui-progress-bar: Unit length is too long. Please use a unit with a maximum of ${DcUiProgressBar.MAX_UNIT_LENGTH} characters.`);\n    }\n    this.value = this.validateAndClampValue(this.value);\n    this.updateMetrics(this.value);\n  }\n  componentDidRender() {\n    this.checkFillBarWidth();\n  }\n  checkFillBarWidth() {\n    setTimeout(() => {\n      if (!this.fillBar || !this.valueElement) return;\n      const shouldAddOverflowClass = this.fillBar.offsetWidth < this.valueElement.offsetWidth + DcUiProgressBar.VALUE_OVERFLOW_PADDING;\n      this.fillBar.classList.toggle('value-overflows', shouldAddOverflowClass);\n    }, DcUiProgressBar.CHECK_WIDTH_DELAY);\n  }\n  render() {\n    return h(\"div\", {\n      key: '55f317a3d38bb659ebafefbc733fa17e507b1e86',\n      class: \"progress-bar\"\n    }, h(\"div\", {\n      key: '782e71f793c678d3845933aab3e1e38624b7e322',\n      ref: el => this.fillBar = el,\n      class: {\n        'progress-bar__fill': true,\n        'value-overflows': this.valuePercentage <= 50\n      },\n      style: {\n        width: `${this.fillBarWidth}%`\n      }\n    }, h(\"dc-ui-text\", {\n      key: '9c7e72bbf05fdeacc6c03a7ac53732bca83973de',\n      ref: el => this.valueElement = el,\n      tag: \"span\",\n      variant: \"h4\",\n      color: \"darkBlue02\",\n      class: \"value\"\n    }, this.value, \" \", this.unit)));\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"]\n    };\n  }\n};\nDcUiProgressBar.MAX_UNIT_LENGTH = 9;\nDcUiProgressBar.VALUE_OVERFLOW_PADDING = 10;\nDcUiProgressBar.CHECK_WIDTH_DELAY = 100;\nDcUiProgressBar.style = DcUiProgressBarStyle0;\nexport { DcUiProgressBar as dc_ui_progress_bar };","map":{"version":3,"names":["dcUiProgressBarCss","DcUiProgressBarStyle0","DcUiProgressBar","fillBarWidth","valuePercentage","validateAndClampValue","value","min","max","updateMetrics","setValue","reset","valueChanged","newValue","validValue","dcChange","emit","componentWillLoad","unit","length","MAX_UNIT_LENGTH","console","warn","componentDidRender","checkFillBarWidth","setTimeout","fillBar","valueElement","shouldAddOverflowClass","offsetWidth","VALUE_OVERFLOW_PADDING","classList","toggle","CHECK_WIDTH_DELAY","render","h","key","class","ref","el","style","width","tag","variant","color"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-progress-bar\\dc-ui-progress-bar.scss?tag=dc-ui-progress-bar&encapsulation=shadow","C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-progress-bar\\dc-ui-progress-bar.tsx"],"sourcesContent":[".progress-bar {\r\n  background-color: $color-grey-02;\r\n  height: 54px;\r\n  overflow: hidden;\r\n\r\n  &__fill {\r\n    background-color: $color-turquoise-01;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 24px;\r\n    position: relative;\r\n    transition: width 0.1s ease-in-out;\r\n\r\n    .value {\r\n      padding: 0 24px;\r\n      position: absolute;\r\n      right: 0;\r\n      transition: translate 0.1s ease-in-out;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    &.value-overflows {\r\n      .value {\r\n        translate: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, h, Prop, Watch, EventEmitter, Event, Method } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dc-ui-progress-bar',\r\n  styleUrl: 'dc-ui-progress-bar.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiProgressBar {\r\n  private static readonly MAX_UNIT_LENGTH = 9;\r\n  private static readonly VALUE_OVERFLOW_PADDING = 10;\r\n  private static readonly CHECK_WIDTH_DELAY = 100;\r\n\r\n  /** Minimum value of the progress bar */\r\n  @Prop() min: number = 0;\r\n\r\n  /** Maximum value of the progress bar */\r\n  @Prop() max: number = 100;\r\n\r\n  /** Current value of the progress bar */\r\n  @Prop({ reflect: true }) value: number = 0;\r\n\r\n  /** Unit to display after the value (e.g., '%', 'MB') */\r\n  @Prop() unit: string = '%';\r\n\r\n  private fillBar?: HTMLElement;\r\n  private valueElement?: HTMLElement;\r\n  private fillBarWidth: number = 0;\r\n  private valuePercentage: number = 0;\r\n\r\n  /** Emitted when the progress bar value changes */\r\n  @Event() dcChange: EventEmitter;\r\n\r\n  /**\r\n   * Ensures the value is within the valid range between min and max\r\n   * @param value - The value to validate\r\n   * @returns The clamped value within the valid range\r\n   */\r\n  private validateAndClampValue(value: number): number {\r\n    if (!(value >= this.min)) return this.min;\r\n    if (value > this.max) return this.max;\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Updates the internal metrics used for rendering the progress bar\r\n   * @param value - The current value to calculate metrics for\r\n   */\r\n  private updateMetrics(value: number) {\r\n    this.fillBarWidth = ((value - this.min) / (this.max - this.min)) * 100;\r\n    this.valuePercentage = (value / this.max) * 100;\r\n  }\r\n\r\n  /**\r\n   * Sets the current value of the progress bar\r\n   * @param value - The new value to set\r\n   */\r\n  @Method()\r\n  async setValue(value: number) {\r\n    this.value = this.validateAndClampValue(value);\r\n  }\r\n\r\n  /**\r\n   * Resets the progress bar to its minimum value\r\n   */\r\n  @Method()\r\n  async reset() {\r\n    this.value = this.min;\r\n  }\r\n\r\n  /**\r\n   * Watches for changes to the value property\r\n   * @param newValue - The new value to process\r\n   */\r\n  @Watch('value')\r\n  valueChanged(newValue: number) {\r\n    const validValue = this.validateAndClampValue(newValue);\r\n    this.dcChange.emit(validValue);\r\n    this.updateMetrics(validValue);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    if (this.unit.length > DcUiProgressBar.MAX_UNIT_LENGTH) {\r\n      console.warn(\r\n        `dc-ui-progress-bar: Unit length is too long. Please use a unit with a maximum of ${DcUiProgressBar.MAX_UNIT_LENGTH} characters.`\r\n      );\r\n    }\r\n\r\n    this.value = this.validateAndClampValue(this.value);\r\n    this.updateMetrics(this.value);\r\n  }\r\n\r\n  componentDidRender() {\r\n    this.checkFillBarWidth();\r\n  }\r\n\r\n  private checkFillBarWidth() {\r\n    setTimeout(() => {\r\n      if (!this.fillBar || !this.valueElement) return;\r\n\r\n      const shouldAddOverflowClass =\r\n        this.fillBar.offsetWidth <\r\n        this.valueElement.offsetWidth + DcUiProgressBar.VALUE_OVERFLOW_PADDING;\r\n\r\n      this.fillBar.classList.toggle('value-overflows', shouldAddOverflowClass);\r\n    }, DcUiProgressBar.CHECK_WIDTH_DELAY);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"progress-bar\">\r\n        <div\r\n          ref={(el) => (this.fillBar = el)}\r\n          class={{\r\n            'progress-bar__fill': true,\r\n            'value-overflows': this.valuePercentage <= 50,\r\n          }}\r\n          style={{ width: `${this.fillBarWidth}%` }}>\r\n          <dc-ui-text\r\n            ref={(el) => (this.valueElement = el)}\r\n            tag=\"span\"\r\n            variant=\"h4\"\r\n            color=\"darkBlue02\"\r\n            class=\"value\">\r\n            {this.value} {this.unit}\r\n          </dc-ui-text>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
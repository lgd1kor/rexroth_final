{"version":3,"file":"static/js/7974.882fab20.chunk.js","mappings":"yHAMO,MAqBMA,EAAoBA,CAACC,EAAiBC,KACjD,MAAM,MAAEC,EAAK,QAAEC,GAAYF,EACvBC,GAvBsB,SAACF,EAAiBI,GAA0C,IAAnBC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACpFN,EAAGS,aAAaL,EAAeC,EACjC,CAsBII,CAAaT,EAAI,aAAc,GAAGE,IAAQC,EAAU,KAAKA,IAAY,K,EAI5DO,EACXC,IAEA,GAAIA,EAAe,CACjB,MAAMC,EAtBoB,kBADQC,EAuBIF,GApBpCG,KAAKC,MACHF,EACGG,QAAQ,KAAM,KACdA,QAAQ,yBAA0B,UAGvCH,EAeII,EAAgBC,OAAOC,KAAKP,GAGlC,IAAK,MAAMQ,KAAOH,EACe,mBAApBL,EAAWQ,KACpBR,EAAWQ,GAAO,GAAGR,EAAWQ,MAIpC,OAAOR,C,CAjC2BC,K,oGCftC,MCSaQ,EAAe,M,4DAGA,Q,aACC,E,iCAGE,E,eACA,E,eACA,C,CAG7BC,YAAAA,GACOC,KAAKC,MAAsB,KAAdD,KAAKC,OACrBD,KAAKE,UAAW,E,CAIpBC,iBAAAA,IACEC,EAAAA,EAAAA,KACAJ,KAAKD,c,CAGPM,MAAAA,GACE,MAAMC,EAAiBN,KAAKE,SAAiC,CAAC,EAAvB,CAAED,KAAMD,KAAKC,MAC9CM,EAAoBP,KAAKQ,SAAW,CAAEA,SAAU,IAAO,CAAC,EACxDC,EAAoBT,KAAKE,SAAW,CAAEQ,aAAcV,KAAKE,SAAUS,KAAM,QAAW,CAAC,EAE3F,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAhB,IAAA,2CACHiB,MAAO,iBACDd,KAAKe,OAAS,SAAW,mBAE/BH,EAAAA,EAAAA,GAAA,IAAAjB,OAAAqB,OAAA,CAAAnB,IAAA,2CACEiB,MAAO,CACL,cAAc,EACd,uBAAuB,EACvBG,UAAWjB,KAAKiB,UAChBf,SAAUF,KAAKE,WAEbI,EACAC,EACAE,EAAiB,CACrBS,OAAQlB,KAAKkB,SACT/B,EAAAA,EAAAA,GAA0Ba,KAAKmB,QACnCP,EAAAA,EAAAA,GAAA,QAAAf,IAAA,8C,4FDtDiB,qiG,kCEApB,MAAMuB,EAAO,CAClBC,IAAK,0DACLC,OAAQ,aACRC,KAAM,CACJC,MAAO,OACPC,OAAQ,SACRC,MAAO,S,SAKKtB,IAId,GACEuB,SAASC,cAAc,cAAcR,EAAKC,UAC1CM,SAASC,cAAc,4CAEvB,OAGF,MAAMC,EAAOF,SAASG,cAAc,QACpCD,EAAKE,IAAM,aACXF,EAAK5B,KAAOmB,EAAKC,IACjBM,SAASK,KAAKC,YAAYJ,EAC5B,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/a11y.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-product-link/dc-ui-product-link.scss?tag=dc-ui-product-link&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-product-link/dc-ui-product-link.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/font.ts"],"sourcesContent":["import { AriaAttributes } from '../types';\r\n\r\nexport const removeAttribute = (el: HTMLElement, attributeName: string): void => {\r\n  el.removeAttribute(attributeName);\r\n};\r\n\r\nexport const setAttribute = (el: HTMLElement, attributeName: string, attributeValue = ''): void => {\r\n  el.setAttribute(attributeName, attributeValue);\r\n};\r\n\r\nexport type SetAriaAttributesOptions = {\r\n  label?: string;\r\n  message?: string;\r\n};\r\n\r\nexport const parseJSONAttribute = <T>(attribute: T | string): T => {\r\n  return typeof attribute === 'string'\r\n    ? // input is potentially JSON parsable string, e.g. \"{ aria-label: 'Some label' }\"\r\n      JSON.parse(\r\n        attribute\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([\\w-]+)[\\s\"]?:/g, '\"$1\":') // wrap keys in double quotes\r\n      )\r\n    : // input is object, e.g. { aria-label: 'Some label' }\r\n      attribute;\r\n};\r\n\r\nexport const setAriaAttributes = (el: HTMLElement, opts: SetAriaAttributesOptions): void => {\r\n  const { label, message } = opts;\r\n  if (label) {\r\n    setAttribute(el, 'aria-label', `${label}${message ? `. ${message}` : ''}`);\r\n  }\r\n};\r\n\r\nexport const parseAndGetAriaAttributes = (\r\n  rawAttributes: AriaAttributes | string\r\n): AriaAttributes => {\r\n  if (rawAttributes) {\r\n    const attributes = parseJSONAttribute(rawAttributes);\r\n    const attributeKeys = Object.keys(attributes);\r\n\r\n    // convert booleans to strings so that values are properly set and not just result in attributes without a value when true in jsx\r\n    for (const key of attributeKeys) {\r\n      if (typeof attributes[key] === 'boolean') {\r\n        attributes[key] = `${attributes[key]}`;\r\n      }\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n};\r\n","@import '../dc-ui-link/dc-ui-link';\r\n\r\n.dc-ui-link {\r\n  font-family: 'Bosch Sans';\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  &.uppercase {\r\n    text-transform: uppercase;\r\n  }\r\n}\r\n","import { Component, Host, h, Element, Prop, Watch } from '@stencil/core';\r\nimport { injectFont, parseAndGetAriaAttributes, SelectedAriaAttributes } from '../../utils';\r\nimport { TLinkAriaAttribute } from '../dc-ui-link/link-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-product-link',\r\n  styleUrl: './dc-ui-product-link.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiProductLink {\r\n  @Element() el: HTMLElement;\r\n  @Prop() href: string;\r\n  @Prop() target?: string = '_self';\r\n  @Prop() inline?: boolean = true;\r\n  @Prop() aria?: SelectedAriaAttributes<TLinkAriaAttribute>;\r\n  /* changed in v0.0.11: uppercase - default is false */\r\n  @Prop() uppercase: boolean = false;\r\n  @Prop() disabled?: boolean = false;\r\n  @Prop() download?: boolean = false;\r\n\r\n  @Watch('href')\r\n  checkForHref() {\r\n    if (!this.href || this.href === '') {\r\n      this.disabled = true;\r\n    }\r\n  }\r\n\r\n  componentWillLoad() {\r\n    injectFont();\r\n    this.checkForHref();\r\n  }\r\n\r\n  render() {\r\n    const hrefAttribute = !this.disabled ? { href: this.href } : {};\r\n    const downloadAttribute = this.download ? { download: '' } : {};\r\n    const disabledAttribute = this.disabled ? { ariaDisabled: this.disabled, role: 'link' } : {};\r\n\r\n    return (\r\n      <Host\r\n        class={`\r\n            ${this.inline ? 'inline' : ''}\r\n          `}>\r\n        <a\r\n          class={{\r\n            'dc-ui-link': true,\r\n            'dc-ui-link--primary': true,\r\n            uppercase: this.uppercase,\r\n            disabled: this.disabled,\r\n          }}\r\n          {...hrefAttribute}\r\n          {...downloadAttribute}\r\n          {...disabledAttribute}\r\n          target={this.target}\r\n          {...parseAndGetAriaAttributes(this.aria)}>\r\n          <slot></slot>\r\n        </a>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export const font = {\r\n  url: 'https://dc-webtoolkit.azureedge.net/font/fontStyles.css',\r\n  family: 'Bosch Sans',\r\n  size: {\r\n    small: '1rem',\r\n    medium: '1.5rem',\r\n    large: '2rem',\r\n  },\r\n};\r\n\r\n// inject font into the document\r\nexport function injectFont() {\r\n  // console.log('injectFont -- disabled');\r\n\r\n  // check if the font is already injected\r\n  if (\r\n    document.querySelector(`link[href=\"${font.url}\"]`) ||\r\n    document.querySelector(`link[href*=\"nextgen-web-ui-toolkit.css\"]`)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const link = document.createElement('link');\r\n  link.rel = 'stylesheet';\r\n  link.href = font.url;\r\n  document.head.appendChild(link);\r\n}\r\n"],"names":["setAriaAttributes","el","opts","label","message","attributeName","attributeValue","arguments","length","undefined","setAttribute","parseAndGetAriaAttributes","rawAttributes","attributes","attribute","JSON","parse","replace","attributeKeys","Object","keys","key","DcUiProductLink","checkForHref","this","href","disabled","componentWillLoad","injectFont","render","hrefAttribute","downloadAttribute","download","disabledAttribute","ariaDisabled","role","h","Host","class","inline","assign","uppercase","target","aria","font","url","family","size","small","medium","large","document","querySelector","link","createElement","rel","head","appendChild"],"sourceRoot":""}
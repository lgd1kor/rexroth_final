{"version":3,"file":"static/js/4065.db99a999.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-range-slider/range-slider-utils.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-range-slider/dc-ui-range-slider.scss?tag=dc-ui-range-slider&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-range-slider/dc-ui-range-slider.tsx"],"sourcesContent":["import { Direction } from './types';\r\n\r\nexport function getEventPosition(event: MouseEvent | TouchEvent, direction: Direction): number {\r\n  if (event instanceof MouseEvent) {\r\n    return direction === 'horizontal' ? event.clientX : event.clientY;\r\n  }\r\n  const touch = event.touches[0] || event.changedTouches[0];\r\n  return direction === 'horizontal' ? touch.clientX : touch.clientY;\r\n}\r\n\r\nexport function getPositionPercentage(\r\n  position: number,\r\n  rect: DOMRect,\r\n  direction: Direction\r\n): number {\r\n  if (direction === 'horizontal') {\r\n    return (position - rect.left) / rect.width;\r\n  }\r\n  return 1 - (position - rect.top) / rect.height;\r\n}\r\n\r\nexport function percentageToValue(\r\n  percentage: number,\r\n  rangeMin: number,\r\n  rangeMax: number,\r\n  rangeStep: number\r\n): number {\r\n  const range = rangeMax - rangeMin;\r\n  let value = rangeMin + range * percentage;\r\n  value = Math.round(value / rangeStep) * rangeStep;\r\n  return Math.max(rangeMin, Math.min(rangeMax, value));\r\n}\r\n\r\nexport function getTooltipPosition(direction: Direction, tooltipPosition: string): string {\r\n  if (direction === 'horizontal') {\r\n    return tooltipPosition === 'bottom' ? 'bottom' : 'top';\r\n  }\r\n  return tooltipPosition === 'left' ? 'left' : 'right';\r\n}\r\n",":host {\r\n  display: flex;\r\n\r\n  --handle-background-color: #{$color-dark-blue-02};\r\n  --handle-background-color-hover: #{$color-grey-07};\r\n  --handle-background-color-focus: #{$color-turquoise-03};\r\n  --handle-background-color-active: #{$color-turquoise-03};\r\n  --handle-background-color-disabled: #{$color-grey-02};\r\n\r\n  --handle-size: 14px;\r\n  --handle-size-hover: 20px;\r\n  --handle-size-focus: 14px;\r\n  --handle-size-active: 20px;\r\n  --handle-size-disabled: 14px;\r\n  --handle-focus-offset: 1px;\r\n\r\n  --range-height: 2px;\r\n  --range-width: 2px; // when vertical\r\n  --range-click-padding: 12px;\r\n\r\n  --range-background-color: #{$color-grey-02};\r\n\r\n  --range-fill-background-color: #{$color-dark-blue-02};\r\n  --range-fill-background-color-hover: #{$color-grey-07};\r\n  --range-fill-background-color-focus: #{$color-turquoise-03};\r\n  --range-fill-background-color-active: #{$color-turquoise-03};\r\n  --range-fill-background-color-disabled: #{$color-grey-02};\r\n\r\n  // tooltip variables\r\n  --tooltip-background-color: #{$color-dark-blue-02};\r\n  --tooltip-background-color-hover: #{$color-grey-07};\r\n  --tooltip-background-color-pressed: #{$color-turquoise-03};\r\n  --tooltip-background-color-focus: #{$color-white};\r\n  --tooltip-background-color-active: #{$color-white};\r\n  --tooltip-background-color-disabled: #{$color-grey-02};\r\n  --tooltip-background-color-error: #{$color-white};\r\n\r\n  --tooltip-border-color: #{$color-dark-blue-02};\r\n  --tooltip-border-color-hover: #{$color-grey-07};\r\n  --tooltip-border-color-pressed: #{$color-turquoise-03};\r\n  --tooltip-border-color-focus: #{$color-turquoise-03};\r\n  --tooltip-border-color-active: #{$color-white};\r\n  --tooltip-border-color-disabled: #{$color-grey-02};\r\n  --tooltip-border-color-error: #{$color-red-02};\r\n\r\n  --tooltip-pointer-color: var(--tooltip-border-color);\r\n\r\n  --tooltip-text-color: #{$color-white};\r\n  --tooltip-text-color-hover: #{$color-white};\r\n  --tooltip-text-color-pressed: #{$color-dark-blue-02};\r\n  --tooltip-text-color-focus: #{$color-black};\r\n  --tooltip-text-color-active: #{$color-black};\r\n  --tooltip-text-color-disabled: #{$color-white};\r\n  --tooltip-text-color-error: #{$color-dark-blue-02};\r\n\r\n  --tooltip-border-size: 1px;\r\n  --tooltip-border-radius: 0;\r\n  --tooltip-distance-from-track: 14px;\r\n  --tooltip-distance-from-track-calculated: calc(\r\n    var(--tooltip-distance-from-track) - var(--range-click-padding)\r\n  );\r\n\r\n  // input variables\r\n  --input-max-width-horizontal: 150px;\r\n  --input-max-width-vertical: 100px;\r\n\r\n  font-family: 'Bosch Sans';\r\n}\r\n\r\n:host(.dc-ui-range-slider--inline) {\r\n  display: inline-flex;\r\n}\r\n\r\n.dc-ui-range-slider {\r\n  display: grid;\r\n  grid-template-columns: minmax(auto, var(--input-max-width-horizontal)) 1fr minmax(\r\n      auto,\r\n      var(--input-max-width-horizontal)\r\n    );\r\n  grid-template-rows: auto auto auto;\r\n  flex: 1;\r\n\r\n  // Common styles for track, handle, tooltip, etc.\r\n  &__track-container {\r\n    grid-column: 1 / -1;\r\n    grid-row: 2;\r\n    width: 100%;\r\n    position: relative;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    // Add a row for labels and track\r\n    .track-row {\r\n      display: flex;\r\n      align-items: center;\r\n      width: 100%;\r\n    }\r\n\r\n    // Add a row for inputs\r\n    .inputs-row {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      width: 100%;\r\n      margin-top: 10px;\r\n    }\r\n  }\r\n\r\n  &__track {\r\n    position: relative;\r\n    width: 100%;\r\n    height: var(--range-height);\r\n    border-radius: 3px;\r\n    padding: var(--range-click-padding) 0;\r\n    margin: calc(var(--range-click-padding) * -1) 0;\r\n    cursor: pointer;\r\n\r\n    &::before {\r\n      content: '';\r\n      position: absolute;\r\n      left: 0;\r\n      right: 0;\r\n      top: 50%;\r\n      height: var(--range-height);\r\n      background-color: var(--range-background-color);\r\n      border-radius: 3px;\r\n      transform: translateY(-50%);\r\n    }\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      width: 2px;\r\n      height: 4px;\r\n      background-color: $color-grey-02;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      bottom: calc(50% + 2px);\r\n    }\r\n  }\r\n\r\n  &__handle {\r\n    position: absolute;\r\n    width: var(--handle-size);\r\n    height: var(--handle-size);\r\n    background-color: var(--handle-background-color);\r\n    border: none;\r\n    border-radius: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    cursor: pointer;\r\n    padding: 0;\r\n    margin: 0;\r\n    transition:\r\n      background-color 0.2s ease-in-out,\r\n      width 0.2s ease-in-out,\r\n      height 0.2s ease-in-out,\r\n      outline-color 0.2s ease-in-out;\r\n    z-index: 1;\r\n\r\n    &--focus {\r\n      outline: 2px solid var(--handle-background-color-focus);\r\n      outline-offset: var(--handle-focus-offset);\r\n      width: var(--handle-size-focus);\r\n      height: var(--handle-size-focus);\r\n      background-color: var(--handle-background-color-focus);\r\n\r\n      &.dc-ui-range-slider__handle--hover {\r\n        background-color: var(--handle-background-color-focus);\r\n      }\r\n    }\r\n\r\n    &--hover {\r\n      width: var(--handle-size-hover);\r\n      height: var(--handle-size-hover);\r\n      background-color: var(--handle-background-color-hover);\r\n    }\r\n\r\n    &--active {\r\n      width: var(--handle-size-active);\r\n      height: var(--handle-size-active);\r\n      background-color: var(--handle-background-color-active);\r\n    }\r\n\r\n    &--disabled {\r\n      width: var(--handle-size-disabled);\r\n      height: var(--handle-size-disabled);\r\n      background-color: var(--handle-background-color-disabled);\r\n    }\r\n\r\n    .dc-ui-range-slider--vertical & {\r\n      left: 50%;\r\n      transform: translate(-50%, 50%);\r\n    }\r\n  }\r\n\r\n  &__tooltip {\r\n    position: absolute;\r\n    background-color: var(--tooltip-background-color);\r\n    color: var(--tooltip-text-color);\r\n    padding: 4px 8px;\r\n    border-radius: var(--tooltip-border-radius);\r\n    border: var(--tooltip-border-size) solid var(--tooltip-border-color);\r\n    font-size: 12px;\r\n    white-space: nowrap;\r\n    transition: opacity 0.2s ease-in-out;\r\n    width: fit-content;\r\n    margin-bottom: 0;\r\n\r\n    // tooltip pointer (small)\r\n    &::before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 100%;\r\n      left: 50%;\r\n      transform: translate(-50%, -5%);\r\n      border-width: 5px;\r\n      border-style: solid;\r\n      border-color: var(--tooltip-pointer-color) transparent transparent transparent;\r\n      z-index: 1;\r\n    }\r\n\r\n    // tooltip pointer (large)\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      top: 100%;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      border-width: 6px;\r\n      border-style: solid;\r\n      border-color: var(--tooltip-pointer-color) transparent transparent transparent;\r\n    }\r\n\r\n    input {\r\n      background: transparent;\r\n      border: none;\r\n      color: inherit;\r\n      font-size: inherit;\r\n      width: var(--tooltip-input-width);\r\n      text-align: center;\r\n      outline: none;\r\n      padding: 0;\r\n      min-width: 50px;\r\n      transition: width 0.2s ease;\r\n    }\r\n\r\n    &--hover {\r\n      background-color: var(--tooltip-background-color-hover);\r\n      border-color: var(--tooltip-border-color-hover);\r\n      color: var(--tooltip-text-color-hover);\r\n\r\n      --tooltip-pointer-color: var(--tooltip-border-color-hover);\r\n    }\r\n\r\n    &--active {\r\n      background-color: var(--tooltip-background-color-pressed);\r\n      border-color: var(--tooltip-border-color-pressed);\r\n      color: var(--tooltip-text-color-pressed);\r\n\r\n      --tooltip-pointer-color: var(--tooltip-border-color-pressed);\r\n    }\r\n\r\n    &--focus {\r\n      background-color: var(--tooltip-background-color-focus);\r\n      border-color: var(--tooltip-border-color-focus);\r\n      color: var(--tooltip-text-color-focus);\r\n\r\n      --tooltip-pointer-color: var(--tooltip-border-color-focus);\r\n\r\n      &::before {\r\n        --tooltip-pointer-color: #{$color-white};\r\n      }\r\n    }\r\n\r\n    &--disabled {\r\n      background-color: var(--tooltip-background-color-disabled);\r\n      border-color: var(--tooltip-border-color-disabled);\r\n      color: var(--tooltip-text-color-disabled);\r\n\r\n      --tooltip-pointer-color: var(--tooltip-border-color-disabled);\r\n    }\r\n\r\n    .dc-ui-range-slider--tooltip-top & {\r\n      bottom: calc(100% + var(--tooltip-distance-from-track-calculated));\r\n      top: auto;\r\n      left: 0;\r\n      right: auto;\r\n      transform: translateX(-50%);\r\n\r\n      &::after {\r\n        top: 100%;\r\n        bottom: auto;\r\n        left: 50%;\r\n        right: auto;\r\n        transform: translateX(-50%);\r\n        border-color: var(--tooltip-pointer-color) transparent transparent transparent;\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider--tooltip-bottom & {\r\n      top: calc(100% + var(--tooltip-distance-from-track-calculated));\r\n      bottom: auto;\r\n      left: 0;\r\n      right: auto;\r\n      transform: translateX(-50%);\r\n\r\n      &::before {\r\n        bottom: 100%;\r\n        top: auto;\r\n        transform: translate(-50%, 5%);\r\n        border-color: transparent transparent var(--tooltip-pointer-color) transparent;\r\n      }\r\n\r\n      &::after {\r\n        bottom: 100%;\r\n        top: auto;\r\n        left: 50%;\r\n        right: auto;\r\n        transform: translateX(-50%);\r\n        border-color: transparent transparent var(--tooltip-pointer-color) transparent;\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider--tooltip-left & {\r\n      right: calc(100% + var(--tooltip-distance-from-track-calculated));\r\n      left: auto;\r\n      top: auto;\r\n      bottom: 0;\r\n      transform: translateY(50%);\r\n      margin-left: 0;\r\n      margin-bottom: 0;\r\n\r\n      &::before {\r\n        right: unset;\r\n        left: 100%;\r\n        top: 50%;\r\n        transform: translate(-5%, -50%);\r\n        border-color: transparent transparent transparent var(--tooltip-pointer-color);\r\n      }\r\n\r\n      &::after {\r\n        right: unset;\r\n        left: 100%;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        border-color: transparent transparent transparent var(--tooltip-pointer-color);\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider--tooltip-right & {\r\n      left: calc(100% + var(--tooltip-distance-from-track-calculated));\r\n      right: auto;\r\n      top: auto;\r\n      bottom: 0;\r\n      transform: translateY(50%);\r\n      margin-left: 0;\r\n      margin-bottom: 0;\r\n\r\n      &::before {\r\n        right: 100%;\r\n        left: auto;\r\n        top: 50%;\r\n        transform: translate(5%, -50%);\r\n        border-color: transparent var(--tooltip-pointer-color) transparent transparent;\r\n      }\r\n\r\n      &::after {\r\n        right: 100%;\r\n        left: auto;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        border-color: transparent var(--tooltip-pointer-color) transparent transparent;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__input-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    grid-row: 3;\r\n    grid-column: 1 / -1;\r\n  }\r\n\r\n  &__input {\r\n    margin: 0; // Remove the side margins since we're using space-between\r\n\r\n    &--start {\r\n      grid-column: 1;\r\n      grid-row: 3;\r\n    }\r\n\r\n    &--end {\r\n      grid-column: 3;\r\n      grid-row: 3;\r\n    }\r\n\r\n    input {\r\n      width: 60px;\r\n      padding: 5px;\r\n      text-align: center;\r\n      border: 1px solid #ccc;\r\n      border-radius: 3px;\r\n      -moz-appearance: textfield;\r\n      appearance: textfield;\r\n\r\n      &::-webkit-outer-spin-button,\r\n      &::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n        margin: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__label {\r\n    font-size: 12px;\r\n    color: $color-black;\r\n    white-space: nowrap;\r\n\r\n    &--min {\r\n      margin-right: 10px;\r\n    }\r\n\r\n    &--max {\r\n      margin-left: 10px;\r\n    }\r\n  }\r\n\r\n  &__fill {\r\n    position: absolute;\r\n    background-color: var(--range-fill-background-color);\r\n    pointer-events: none;\r\n    height: var(--range-height);\r\n    left: 0;\r\n    transition: background-color 0.2s ease-in-out;\r\n\r\n    &--hover {\r\n      background-color: var(--range-fill-background-color-hover);\r\n    }\r\n\r\n    &--active {\r\n      background-color: var(--range-fill-background-color-active);\r\n    }\r\n\r\n    // When handle is focused, fill should match focus state\r\n    &--focus {\r\n      background-color: var(--range-fill-background-color-focus);\r\n    }\r\n\r\n    &:disabled {\r\n      background-color: var(--range-fill-background-color-disabled);\r\n    }\r\n  }\r\n\r\n  &__component-label {\r\n    grid-column: 1 / -1;\r\n    grid-row: 1;\r\n    margin-bottom: 12px;\r\n    display: block;\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    color: $color-grey-06;\r\n  }\r\n\r\n  // Vertical orientation styles\r\n  &--vertical {\r\n    height: 100%; // Takes full available height when no specific height is set\r\n    min-height: 300px; // Ensures a minimum usable height\r\n    padding: 0; // Add horizontal padding for tooltip\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto auto 1fr auto;\r\n    justify-self: center;\r\n    margin-inline: auto;\r\n    flex: unset;\r\n\r\n    .dc-ui-range-slider__track-container {\r\n      width: fit-content;\r\n      height: auto;\r\n      margin: 0;\r\n      grid-column: 1;\r\n      grid-row: 3;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .dc-ui-range-slider__track {\r\n      width: var(--range-width);\r\n      height: 100%;\r\n      padding: 0 12px;\r\n      margin: 0 -12px;\r\n\r\n      &::before {\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 50%;\r\n        right: auto;\r\n        width: var(--range-width);\r\n        height: 100%;\r\n        transform: translateX(-50%);\r\n      }\r\n\r\n      &::after {\r\n        width: 4px;\r\n        height: 2px;\r\n        bottom: 50%;\r\n        transform: translate(0, 50%);\r\n        left: calc(50% + 2px);\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider__handle {\r\n      left: 50%;\r\n      top: auto;\r\n      transform: translate(-50%, 50%);\r\n    }\r\n\r\n    .dc-ui-range-slider__label {\r\n      &--min {\r\n        margin-right: 0;\r\n        margin-top: 10px;\r\n      }\r\n\r\n      &--max {\r\n        margin-left: 0;\r\n        margin-bottom: 10px;\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider__input-container {\r\n      &--vertical-start {\r\n        grid-row: 4;\r\n      }\r\n\r\n      &--vertical-end {\r\n        grid-row: 2;\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider__input {\r\n      max-width: var(--input-max-width-vertical);\r\n\r\n      &--start {\r\n        grid-column: 1;\r\n      }\r\n\r\n      &--end {\r\n        grid-column: 1;\r\n      }\r\n    }\r\n\r\n    .dc-ui-range-slider__fill {\r\n      width: var(--range-width);\r\n      left: var(--range-click-padding);\r\n      bottom: 0;\r\n    }\r\n\r\n    .track-row,\r\n    .inputs-row {\r\n      flex-direction: column;\r\n    }\r\n\r\n    .inputs-row {\r\n      margin-top: 0;\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  &--dual-handles {\r\n    &.dc-ui-range-slider--vertical {\r\n      .dc-ui-range-slider__track-container {\r\n        margin: 8px 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  Prop,\r\n  State,\r\n  Element,\r\n  Host,\r\n  Watch,\r\n  Listen,\r\n  Event,\r\n  EventEmitter,\r\n  Method,\r\n} from '@stencil/core';\r\nimport { HandleType, Direction, TooltipPosition, StepRange } from './types';\r\nimport * as utils from './range-slider-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-range-slider',\r\n  styleUrl: 'dc-ui-range-slider.scss',\r\n  shadow: true,\r\n  formAssociated: true,\r\n})\r\nexport class DcUiRangeSlider {\r\n  @Element() el: HTMLElement;\r\n  @Prop({ reflect: true }) rangeMin: number = 0;\r\n  @Prop({ reflect: true }) rangeMax: number = 100;\r\n  @Prop({ reflect: true }) rangeStart: number = 0;\r\n  @Prop({ reflect: true }) rangeEnd?: number;\r\n  @Prop({ reflect: true }) rangeStep?: number = 1;\r\n  @Prop({ reflect: true, mutable: true }) rangeDecimals?: number = 0;\r\n  @Prop({ reflect: true }) rangeSuffix?: string = '';\r\n  @Prop({ reflect: true }) direction?: Direction = 'horizontal';\r\n  @Prop({ reflect: true }) height?: number;\r\n  @Prop({ reflect: true }) minLabel?: string;\r\n  @Prop({ reflect: true }) maxLabel?: string;\r\n  @Prop({ reflect: true, mutable: true }) tooltipPosition?: TooltipPosition;\r\n  @Prop({ reflect: true }) label?: string;\r\n  @Prop({ reflect: true }) snapToMiddle?: boolean = false;\r\n  @Prop({ reflect: true }) stepsCustom?: string;\r\n  @Prop({ reflect: true }) inline?: boolean = false;\r\n  @Prop() ariaLabelStart?: string = 'Start Handle';\r\n  @Prop() ariaLabelEnd?: string = 'End Handle';\r\n  @Prop() ariaLabelTooltip?: string = 'Tooltip Input for Handle';\r\n\r\n  @State() startValue: number;\r\n  @State() endValue: number;\r\n  @State() isDragging: boolean = false;\r\n  @State() activeHandle: HandleType = null;\r\n  @State() isTooltipActive: boolean = false;\r\n  @State() isTooltipFocused: boolean = false;\r\n  @State() isTooltipHovered: boolean = false;\r\n  @State() tooltipInputValue: string;\r\n  @State() startInputValue: string;\r\n  @State() endInputValue: string;\r\n  @State() isHandleActive: boolean = false;\r\n  @State() isHandleFocus: boolean = false;\r\n  @State() isHandleHovered: boolean = false;\r\n  @State() startHandleActive: boolean = false;\r\n  @State() startHandleFocus: boolean = false;\r\n  @State() startHandleHovered: boolean = false;\r\n  @State() endHandleActive: boolean = false;\r\n  @State() endHandleFocus: boolean = false;\r\n  @State() endHandleHovered: boolean = false;\r\n\r\n  private track: HTMLDivElement;\r\n  private startHandle: HTMLButtonElement;\r\n  private endHandle: HTMLButtonElement;\r\n  private startInput: HTMLInputElement;\r\n  private endInput?: HTMLInputElement;\r\n  private tooltip: HTMLDivElement;\r\n  private tooltipInput: HTMLInputElement;\r\n  private fill: HTMLDivElement;\r\n  private internals: ElementInternals;\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  private parsedSteps: StepRange[] = [];\r\n\r\n  @Event() tooltipPositionChange: EventEmitter<TooltipPosition>;\r\n  @Event({ bubbles: false }) dcChange: EventEmitter<{\r\n    start: number;\r\n    end?: number;\r\n    suffix?: string;\r\n  }>;\r\n\r\n  // Add this as a class property\r\n  private originalTooltipPosition: string;\r\n\r\n  private debounceTimeout: number | null = null;\r\n  private lastPosition: TooltipPosition | null = null;\r\n\r\n  componentWillLoad() {\r\n    if (this.rangeDecimals === 0) {\r\n      this.rangeDecimals = this.calculateDecimalPlaces(this.rangeStep);\r\n    }\r\n\r\n    // warning for rangeSuffix character limit\r\n    if (this.rangeSuffix && this.rangeSuffix.length > 9) {\r\n      console.warn(\r\n        'dc-ui-range-slider: Unit length is too long. Please use a unit with a maximum of 9 characters.'\r\n      );\r\n    }\r\n\r\n    this.parseCustomSteps();\r\n    this.internals = this.el.attachInternals();\r\n    this.startValue = Math.max(this.rangeMin, this.rangeStart);\r\n    this.endValue =\r\n      this.rangeEnd !== undefined ? Math.min(this.rangeMax, this.rangeEnd) : this.rangeMax;\r\n    this.startInputValue = this.formatValue(this.startValue);\r\n    this.endInputValue = this.formatValue(this.endValue);\r\n  }\r\n\r\n  @Watch('rangeMin')\r\n  @Watch('rangeMax')\r\n  @Watch('rangeStart')\r\n  @Watch('rangeEnd')\r\n  @Watch('rangeStep')\r\n  handlePropChanges() {\r\n    this.startValue = Math.max(this.rangeMin, Math.min(this.startValue, this.rangeMax));\r\n    if (this.rangeEnd !== undefined) {\r\n      this.endValue = Math.max(this.rangeMin, Math.min(this.endValue, this.rangeMax));\r\n      this.startValue = Math.min(this.startValue, this.endValue);\r\n    }\r\n    this.updateSliderPositions();\r\n  }\r\n\r\n  @Watch('stepsCustom')\r\n  handleStepsCustomChange() {\r\n    this.parseCustomSteps();\r\n  }\r\n\r\n  @Watch('rangeStep')\r\n  handleRangeStepChange() {\r\n    if (this.rangeDecimals === 0) {\r\n      this.rangeDecimals = this.calculateDecimalPlaces(this.rangeStep);\r\n    }\r\n  }\r\n\r\n  private calculateDecimalPlaces(step: number): number {\r\n    if (!step || step >= 1) return 0;\r\n    const stepString = step.toString();\r\n    const decimalPart = stepString.split('.')[1];\r\n    return decimalPart ? decimalPart.length : 0;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.resizeObserver = new ResizeObserver(() => {\r\n      this.updateSliderPositions();\r\n    });\r\n    this.resizeObserver.observe(this.track);\r\n\r\n    // Add window resize listener for tooltip position\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n\r\n    this.updateTooltipWidth();\r\n\r\n    this.track.addEventListener('mousedown', this.handleDragStart);\r\n    this.track.addEventListener('touchstart', this.handleDragStart);\r\n    this.startHandle.addEventListener('mousedown', this.handleDragStart);\r\n    this.startHandle.addEventListener('touchstart', this.handleDragStart);\r\n    if (this.endHandle) {\r\n      this.endHandle.addEventListener('mousedown', this.handleDragStart);\r\n      this.endHandle.addEventListener('touchstart', this.handleDragStart);\r\n    }\r\n    window.addEventListener('mousemove', this.handleDrag);\r\n    window.addEventListener('touchmove', this.handleDrag);\r\n    window.addEventListener('mouseup', this.handleDragEnd);\r\n    window.addEventListener('touchend', this.handleDragEnd);\r\n    this.startHandle.addEventListener('mouseenter', () =>\r\n      this.handleMouseEvent('handle', 'start', 'enter')\r\n    );\r\n    this.startHandle.addEventListener('mouseleave', () =>\r\n      this.handleMouseEvent('handle', 'start', 'leave')\r\n    );\r\n    if (this.endHandle) {\r\n      this.endHandle.addEventListener('mouseenter', () =>\r\n        this.handleMouseEvent('handle', 'end', 'enter')\r\n      );\r\n      this.endHandle.addEventListener('mouseleave', () =>\r\n        this.handleMouseEvent('handle', 'end', 'leave')\r\n      );\r\n    }\r\n    // Add tooltip event listeners\r\n    if (this.tooltip) {\r\n      this.tooltip.addEventListener('mousedown', this.handleDragStart);\r\n      this.tooltip.addEventListener('touchstart', this.handleDragStart);\r\n      this.tooltip.addEventListener('mouseenter', () =>\r\n        this.handleMouseEvent('tooltip', null, 'enter')\r\n      );\r\n      this.tooltip.addEventListener('mouseleave', () =>\r\n        this.handleMouseEvent('tooltip', null, 'leave')\r\n      );\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.resizeObserver.disconnect();\r\n    // Remove window resize listener\r\n    window.removeEventListener('resize', this.handleWindowResize);\r\n\r\n    this.track.removeEventListener('mousedown', this.handleDragStart);\r\n    this.track.removeEventListener('touchstart', this.handleDragStart);\r\n    this.startHandle.removeEventListener('mousedown', this.handleDragStart);\r\n    this.startHandle.removeEventListener('touchstart', this.handleDragStart);\r\n    if (this.endHandle) {\r\n      this.endHandle.removeEventListener('mousedown', this.handleDragStart);\r\n      this.endHandle.removeEventListener('touchstart', this.handleDragStart);\r\n    }\r\n    window.removeEventListener('mousemove', this.handleDrag);\r\n    window.removeEventListener('touchmove', this.handleDrag);\r\n    window.removeEventListener('mouseup', this.handleDragEnd);\r\n    window.removeEventListener('touchend', this.handleDragEnd);\r\n    this.startHandle.removeEventListener('mouseenter', () =>\r\n      this.handleMouseEvent('handle', 'start', 'enter')\r\n    );\r\n    this.startHandle.removeEventListener('mouseleave', () =>\r\n      this.handleMouseEvent('handle', 'start', 'leave')\r\n    );\r\n    if (this.endHandle) {\r\n      this.endHandle.removeEventListener('mouseenter', () =>\r\n        this.handleMouseEvent('handle', 'end', 'enter')\r\n      );\r\n      this.endHandle.removeEventListener('mouseleave', () =>\r\n        this.handleMouseEvent('handle', 'end', 'leave')\r\n      );\r\n    }\r\n    // Remove tooltip event listeners\r\n    if (this.tooltip) {\r\n      this.tooltip.removeEventListener('mousedown', this.handleDragStart);\r\n      this.tooltip.removeEventListener('touchstart', this.handleDragStart);\r\n      this.tooltip.removeEventListener('mouseenter', () =>\r\n        this.handleMouseEvent('tooltip', null, 'enter')\r\n      );\r\n      this.tooltip.removeEventListener('mouseleave', () =>\r\n        this.handleMouseEvent('tooltip', null, 'leave')\r\n      );\r\n    }\r\n\r\n    if (this.debounceTimeout) {\r\n      window.clearTimeout(this.debounceTimeout);\r\n    }\r\n  }\r\n\r\n  private readonly handleDragStart = (event: MouseEvent | TouchEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    if (target.tagName.toLowerCase() === 'input') {\r\n      return;\r\n    }\r\n\r\n    this.isDragging = true;\r\n\r\n    // Handle clicks on track\r\n    if (target === this.track || target === this.fill) {\r\n      const trackRect = this.track.getBoundingClientRect();\r\n      const position = utils.getEventPosition(event, this.direction);\r\n      const percentage = utils.getPositionPercentage(position, trackRect, this.direction);\r\n      const clickValue = this.rangeMin + (this.rangeMax - this.rangeMin) * percentage;\r\n\r\n      // For dual handles, determine which handle to move based on proximity\r\n      if (this.rangeEnd !== undefined) {\r\n        const distanceToStart = Math.abs(clickValue - this.startValue);\r\n        const distanceToEnd = Math.abs(clickValue - this.endValue);\r\n        this.activeHandle = distanceToStart < distanceToEnd ? 'start' : 'end';\r\n      } else {\r\n        this.activeHandle = 'start';\r\n      }\r\n\r\n      // Update the active handle state\r\n      if (this.activeHandle === 'start') {\r\n        this.startHandleActive = true;\r\n      } else {\r\n        this.endHandleActive = true;\r\n      }\r\n\r\n      // Immediately update the value\r\n      this.handleDrag(event);\r\n    } else if (\r\n      target.classList.contains('dc-ui-range-slider__handle') ||\r\n      target.closest('.dc-ui-range-slider__tooltip')\r\n    ) {\r\n      const isEndHandle = target.classList.contains('end');\r\n      this.activeHandle = isEndHandle ? 'end' : 'start';\r\n      if (isEndHandle) {\r\n        this.endHandleActive = true;\r\n      } else {\r\n        this.startHandleActive = true;\r\n      }\r\n    }\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  private readonly handleDrag = (event: MouseEvent | TouchEvent) => {\r\n    if (this.isDragging) {\r\n      const trackRect = this.track.getBoundingClientRect();\r\n      const position = utils.getEventPosition(event, this.direction);\r\n      const percentage = utils.getPositionPercentage(position, trackRect, this.direction);\r\n\r\n      // Get approximate value first\r\n      const approximateValue = this.rangeMin + (this.rangeMax - this.rangeMin) * percentage;\r\n      // Get appropriate step for this value\r\n      const step = this.getStepForValue(approximateValue);\r\n      // Calculate final value with correct step\r\n      let value = utils.percentageToValue(percentage, this.rangeMin, this.rangeMax, step);\r\n\r\n      // Apply custom step\r\n      value = Math.round(value / step) * step;\r\n\r\n      // Only apply snapping if snapToMiddle is true\r\n      if (this.snapToMiddle) {\r\n        const midPoint = (this.rangeMax + this.rangeMin) / 2;\r\n        const snapThreshold = this.rangeStep || 1;\r\n        if (Math.abs(value - midPoint) < snapThreshold) {\r\n          value = midPoint;\r\n        }\r\n      }\r\n\r\n      if (this.activeHandle === 'start') {\r\n        this.startValue = Math.min(value, this.endValue);\r\n      } else {\r\n        this.endValue = Math.max(value, this.startValue);\r\n      }\r\n\r\n      this.updateSliderPositions();\r\n    }\r\n  };\r\n\r\n  private readonly handleDragEnd = () => {\r\n    if (this.isDragging) {\r\n      this.dcChange.emit({\r\n        start: Number(this.startValue.toFixed(this.rangeDecimals)),\r\n        end:\r\n          this.rangeEnd !== undefined\r\n            ? Number(this.endValue.toFixed(this.rangeDecimals))\r\n            : undefined,\r\n        suffix: this.rangeSuffix || undefined,\r\n      });\r\n    }\r\n    this.isDragging = false;\r\n    this.activeHandle = null;\r\n    this.startHandleActive = false;\r\n    this.endHandleActive = false;\r\n  };\r\n\r\n  private updateHorizontalPositions(\r\n    startPercentage: number,\r\n    endPercentage: number,\r\n    showDualHandles: boolean\r\n  ) {\r\n    this.startHandle.style.left = `${startPercentage * 100}%`;\r\n    if (showDualHandles) {\r\n      this.fill.style.left = `${startPercentage * 100}%`;\r\n      this.fill.style.width = `${(endPercentage - startPercentage) * 100}%`;\r\n      this.endHandle.style.left = `${endPercentage * 100}%`;\r\n    } else {\r\n      this.fill.style.left = '0';\r\n      this.fill.style.width = `${startPercentage * 100}%`;\r\n    }\r\n\r\n    if (this.tooltip) {\r\n      const handlePosition = startPercentage * this.track.offsetWidth;\r\n      this.tooltip.style.left = `${handlePosition}px`;\r\n    }\r\n  }\r\n\r\n  private updateVerticalPositions(\r\n    startPercentage: number,\r\n    endPercentage: number,\r\n    showDualHandles: boolean\r\n  ) {\r\n    this.startHandle.style.bottom = `${startPercentage * 100}%`;\r\n    if (showDualHandles) {\r\n      this.fill.style.bottom = `${startPercentage * 100}%`;\r\n      this.fill.style.height = `${(endPercentage - startPercentage) * 100}%`;\r\n      this.endHandle.style.bottom = `${endPercentage * 100}%`;\r\n    } else {\r\n      this.fill.style.bottom = '0';\r\n      this.fill.style.height = `${startPercentage * 100}%`;\r\n    }\r\n\r\n    if (this.tooltip) {\r\n      const handlePosition = startPercentage * this.track.offsetHeight;\r\n      this.tooltip.style.bottom = `${handlePosition}px`;\r\n      this.updateTooltipPosition();\r\n    }\r\n  }\r\n\r\n  private updateTooltipPosition() {\r\n    if (!this.tooltipPosition || !['left', 'right'].includes(this.tooltipPosition)) {\r\n      return;\r\n    }\r\n\r\n    // Clear any existing timeout\r\n    if (this.debounceTimeout) {\r\n      window.clearTimeout(this.debounceTimeout);\r\n    }\r\n\r\n    // Store original position if not already set\r\n    if (!this.originalTooltipPosition) {\r\n      this.originalTooltipPosition = this.tooltipPosition;\r\n    }\r\n\r\n    // Debounce the position update\r\n    this.debounceTimeout = window.setTimeout(() => {\r\n      const tooltipRect = this.tooltip.getBoundingClientRect();\r\n      const viewportWidth = window.innerWidth;\r\n\r\n      let newPosition = this.tooltipPosition;\r\n\r\n      // If currently on the right\r\n      if (this.tooltipPosition === 'right') {\r\n        if (tooltipRect.right > viewportWidth) {\r\n          newPosition = 'left';\r\n        }\r\n      }\r\n      // If currently on the left\r\n      else if (this.tooltipPosition === 'left') {\r\n        if (tooltipRect.left < 0) {\r\n          newPosition = 'right';\r\n        }\r\n      }\r\n\r\n      // Only switch back to original position if there's enough space (hysteresis)\r\n      if (this.originalTooltipPosition && newPosition !== this.originalTooltipPosition) {\r\n        const wouldOverflowRight =\r\n          this.originalTooltipPosition === 'right' && tooltipRect.right > viewportWidth;\r\n        const wouldOverflowLeft = this.originalTooltipPosition === 'left' && tooltipRect.left < 0;\r\n\r\n        if (!wouldOverflowRight && !wouldOverflowLeft) {\r\n          newPosition = this.originalTooltipPosition as TooltipPosition;\r\n        }\r\n      }\r\n\r\n      // Only update if position actually changed\r\n      if (newPosition !== this.lastPosition) {\r\n        this.tooltipPosition = newPosition;\r\n        this.lastPosition = newPosition;\r\n        this.tooltipPositionChange.emit(newPosition);\r\n      }\r\n    }, 100); // 100ms debounce\r\n  }\r\n\r\n  private readonly updateSliderPositions = () => {\r\n    const startPercentage = (this.startValue - this.rangeMin) / (this.rangeMax - this.rangeMin);\r\n    const endPercentage = (this.endValue - this.rangeMin) / (this.rangeMax - this.rangeMin);\r\n    const showDualHandles = this.rangeEnd !== undefined;\r\n\r\n    if (this.direction === 'horizontal') {\r\n      this.updateHorizontalPositions(startPercentage, endPercentage, showDualHandles);\r\n    } else {\r\n      this.updateVerticalPositions(startPercentage, endPercentage, showDualHandles);\r\n    }\r\n\r\n    this.updateInputs();\r\n    this.updateFormValue();\r\n  };\r\n\r\n  private updateInputs() {\r\n    this.startInputValue = this.formatValue(this.startValue);\r\n    this.endInputValue = this.formatValue(this.endValue);\r\n    setTimeout(() => {\r\n      this.updateTooltipWidth();\r\n    }, 100);\r\n  }\r\n\r\n  private formatValue(value: number): string {\r\n    return `${value.toFixed(this.rangeDecimals)}${this.rangeSuffix ? ` ${this.rangeSuffix}` : ''}`;\r\n  }\r\n\r\n  private handleInputChange(input: HandleType) {\r\n    if (input === 'start') {\r\n      this.startInputValue = this.startInput.value;\r\n    } else {\r\n      this.endInputValue = this.endInput.value;\r\n    }\r\n  }\r\n\r\n  private handleInputBlur(input: HandleType) {\r\n    this.updateInputValue(input);\r\n  }\r\n\r\n  private handleInputKeyDown = (input: HandleType, event: KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.handleInputChange(input);\r\n      this.updateInputValue(input);\r\n    }\r\n  };\r\n\r\n  private updateInputValue(input: HandleType) {\r\n    const value = parseFloat(input === 'start' ? this.startInputValue : this.endInputValue);\r\n    if (!isNaN(value)) {\r\n      const step = this.getStepForValue(value);\r\n      const roundedValue = Math.round(value / step) * step;\r\n\r\n      if (input === 'start') {\r\n        this.startValue = Math.max(this.rangeMin, Math.min(this.endValue, roundedValue));\r\n        this.startInputValue = this.formatValue(this.startValue);\r\n        this.startInput.value = this.startInputValue;\r\n      } else {\r\n        this.endValue = Math.max(this.startValue, Math.min(this.rangeMax, roundedValue));\r\n        this.endInputValue = this.formatValue(this.endValue);\r\n        this.endInput.value = this.endInputValue;\r\n      }\r\n      this.updateSliderPositions();\r\n      this.dcChange.emit({\r\n        start: Number(this.startValue.toFixed(this.rangeDecimals)),\r\n        end:\r\n          this.rangeEnd !== undefined\r\n            ? Number(this.endValue.toFixed(this.rangeDecimals))\r\n            : undefined,\r\n        suffix: this.rangeSuffix || undefined,\r\n      });\r\n    } else {\r\n      this.updateInputs();\r\n    }\r\n  }\r\n\r\n  private handleTooltipFocus = () => {\r\n    this.isTooltipFocused = true;\r\n    // select the text in the tooltip input so the user can overwrite it\r\n    this.tooltipInput.select();\r\n  };\r\n\r\n  private handleTooltipBlur = () => {\r\n    this.isTooltipFocused = false;\r\n    // set the value of the tooltip input to the value of the start input\r\n    this.tooltipInput.value = this.startInputValue;\r\n  };\r\n\r\n  private handleTooltipInput = () => {\r\n    this.tooltipInputValue = this.tooltipInput.value;\r\n  };\r\n\r\n  private handleTooltipKeyDown = (event: KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.updateTooltipValue();\r\n    }\r\n  };\r\n\r\n  private updateTooltipValue() {\r\n    const value = parseFloat(this.tooltipInputValue);\r\n    if (!isNaN(value)) {\r\n      // Get the appropriate step for this value\r\n      const step = this.getStepForValue(value);\r\n      // Round the value to the nearest step\r\n      const roundedValue = Math.round(value / step) * step;\r\n\r\n      this.startValue = Math.max(this.rangeMin, Math.min(this.rangeMax, roundedValue));\r\n      this.updateSliderPositions();\r\n    }\r\n  }\r\n\r\n  @Listen('keydown')\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (this.activeHandle) {\r\n      const currentValue = this.activeHandle === 'start' ? this.startValue : this.endValue;\r\n      const step = this.getStepForValue(currentValue);\r\n      let newValue = currentValue;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowRight':\r\n        case 'ArrowUp':\r\n          newValue += step;\r\n          break;\r\n        case 'ArrowLeft':\r\n        case 'ArrowDown':\r\n          newValue -= step;\r\n          break;\r\n        case 'Home':\r\n          newValue = this.rangeMin;\r\n          break;\r\n        case 'End':\r\n          newValue = this.rangeMax;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      this.updateHandleValue(this.activeHandle, newValue);\r\n    }\r\n  }\r\n\r\n  private updateHandleValue(handle: HandleType, value: number) {\r\n    value = Math.max(this.rangeMin, Math.min(this.rangeMax, value));\r\n    if (handle === 'start') {\r\n      this.startValue = Math.min(value, this.endValue);\r\n    } else {\r\n      this.endValue = Math.max(value, this.startValue);\r\n    }\r\n    this.updateSliderPositions();\r\n    this.updateFormValue(); // Add this line at the end\r\n  }\r\n\r\n  private handleFocus = (handle: HandleType) => {\r\n    this.activeHandle = handle;\r\n    if (handle === 'start') {\r\n      this.startHandleFocus = true;\r\n    } else {\r\n      this.endHandleFocus = true;\r\n    }\r\n  };\r\n\r\n  private handleBlur = (handle: HandleType) => {\r\n    if (this.activeHandle === handle) {\r\n      this.activeHandle = null;\r\n    }\r\n    if (handle === 'start') {\r\n      this.startHandleFocus = false;\r\n    } else {\r\n      this.endHandleFocus = false;\r\n    }\r\n  };\r\n\r\n  private handleMouseEvent = (\r\n    element: 'handle' | 'tooltip',\r\n    handle: HandleType | null,\r\n    type: 'enter' | 'leave'\r\n  ) => {\r\n    const isEntering = type === 'enter';\r\n\r\n    if (element === 'handle') {\r\n      if (handle === 'start') {\r\n        this.startHandleHovered = isEntering;\r\n      } else {\r\n        this.endHandleHovered = isEntering;\r\n      }\r\n    } else if (element === 'tooltip') {\r\n      this.isTooltipHovered = isEntering;\r\n    }\r\n  };\r\n\r\n  private parseCustomSteps() {\r\n    if (!this.stepsCustom) {\r\n      this.parsedSteps = [];\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Remove spaces and split by '],['\r\n      const stepPairs = this.stepsCustom\r\n        .replace(/\\s/g, '')\r\n        .replace(/^\\[|\\]$/g, '')\r\n        .split('],[')\r\n        .map((pair) => pair.split(',').map(Number));\r\n\r\n      this.parsedSteps = stepPairs\r\n        .map(([value, step]) => ({ value, step }))\r\n        .filter(({ value }) => value >= this.rangeMin && value <= this.rangeMax)\r\n        .sort((a, b) => a.value - b.value);\r\n    } catch (e) {\r\n      console.error('Invalid custom steps format');\r\n      this.parsedSteps = [];\r\n    }\r\n  }\r\n\r\n  private getStepForValue(value: number): number {\r\n    if (!this.parsedSteps.length) {\r\n      return this.rangeStep || 1;\r\n    }\r\n\r\n    for (let i = this.parsedSteps.length - 1; i >= 0; i--) {\r\n      if (value >= this.parsedSteps[i].value) {\r\n        return this.parsedSteps[i].step;\r\n      }\r\n    }\r\n\r\n    return this.rangeStep || 1;\r\n  }\r\n\r\n  @Method()\r\n  async setValues(start: number, end?: number): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      this.startValue = Math.max(this.rangeMin, Math.min(this.rangeMax, start));\r\n\r\n      if (this.rangeEnd !== undefined && end !== undefined) {\r\n        this.endValue = Math.max(this.rangeMin, Math.min(this.rangeMax, end));\r\n        this.startValue = Math.min(this.startValue, this.endValue);\r\n      }\r\n\r\n      this.updateSliderPositions();\r\n      this.dcChange.emit({\r\n        start: Number(this.startValue.toFixed(this.rangeDecimals)),\r\n        end:\r\n          this.rangeEnd !== undefined\r\n            ? Number(this.endValue.toFixed(this.rangeDecimals))\r\n            : undefined,\r\n        suffix: this.rangeSuffix || undefined,\r\n      });\r\n      resolve(true);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const showDualHandles = this.rangeEnd !== undefined;\r\n    const minLabelText = this.minLabel || this.formatValue(this.rangeMin);\r\n    const maxLabelText = this.maxLabel || this.formatValue(this.rangeMax);\r\n\r\n    const hostStyle = {\r\n      height: this.direction === 'vertical' && !this.height ? '100%' : null,\r\n    };\r\n\r\n    const startInput = (\r\n      <div class=\"dc-ui-range-slider__input dc-ui-range-slider__input--start\">\r\n        <dc-ui-input-wrapper\r\n          label={showDualHandles ? 'Start value' : 'Value'}\r\n          labelPosition=\"above\"\r\n          hideLabel={true}>\r\n          <input\r\n            ref={(el) => (this.startInput = el)}\r\n            type=\"text\"\r\n            value={this.startInputValue}\r\n            onBlur={() => this.handleInputBlur('start')}\r\n            onKeyDown={(e) => this.handleInputKeyDown('start', e)}\r\n            pattern=\"[0-9]*\"\r\n            tabindex=\"2\"\r\n          />\r\n        </dc-ui-input-wrapper>\r\n      </div>\r\n    );\r\n\r\n    const endInput = (\r\n      <div class=\"dc-ui-range-slider__input dc-ui-range-slider__input--end\">\r\n        <dc-ui-input-wrapper\r\n          label=\"End value\"\r\n          labelPosition=\"above\"\r\n          hideLabel={true}>\r\n          <input\r\n            ref={(el) => (this.endInput = el)}\r\n            type=\"text\"\r\n            value={this.endInputValue}\r\n            onBlur={() => this.handleInputBlur('end')}\r\n            onKeyDown={(e) => this.handleInputKeyDown('end', e)}\r\n            pattern=\"[0-9]*\"\r\n            tabindex=\"3\"\r\n          />\r\n        </dc-ui-input-wrapper>\r\n      </div>\r\n    );\r\n\r\n    const startLabel = (\r\n      <dc-ui-text\r\n        class=\"dc-ui-range-slider__label dc-ui-range-slider__label--min\"\r\n        variant=\"mid-size-text\">\r\n        {minLabelText}\r\n      </dc-ui-text>\r\n    );\r\n\r\n    const endLabel = (\r\n      <dc-ui-text\r\n        class=\"dc-ui-range-slider__label dc-ui-range-slider__label--max\"\r\n        variant=\"mid-size-text\">\r\n        {maxLabelText}\r\n      </dc-ui-text>\r\n    );\r\n\r\n    const hostClasses = {\r\n      'dc-ui-range-slider--inline': this.inline,\r\n    };\r\n\r\n    const classes = {\r\n      'dc-ui-range-slider': true,\r\n      'dc-ui-range-slider--vertical': this.direction === 'vertical',\r\n      'dc-ui-range-slider--dual-handles': showDualHandles,\r\n      [`dc-ui-range-slider--tooltip-${utils.getTooltipPosition(this.direction, this.tooltipPosition)}`]:\r\n        true,\r\n    };\r\n\r\n    const handleClasses = (handle: HandleType) => ({\r\n      'dc-ui-range-slider__handle': true,\r\n      [`${handle}`]: true,\r\n      'dc-ui-range-slider__handle--hover':\r\n        handle === 'start'\r\n          ? this.startHandleHovered || this.isTooltipHovered\r\n          : this.endHandleHovered,\r\n      'dc-ui-range-slider__handle--active':\r\n        handle === 'start' ? this.startHandleActive || this.isTooltipActive : this.endHandleActive,\r\n      'dc-ui-range-slider__handle--focus':\r\n        handle === 'start' ? this.startHandleFocus || this.isTooltipFocused : this.endHandleFocus,\r\n    });\r\n\r\n    const fillClasses = {\r\n      'dc-ui-range-slider__fill': true,\r\n      'dc-ui-range-slider__fill--hover': this.startHandleHovered || this.endHandleHovered,\r\n      'dc-ui-range-slider__fill--active': this.startHandleActive || this.endHandleActive,\r\n      'dc-ui-range-slider__fill--focus': this.startHandleFocus || this.endHandleFocus,\r\n    };\r\n\r\n    const tooltipClasses = {\r\n      'dc-ui-range-slider__tooltip': true,\r\n      'dc-ui-range-slider__tooltip--hover': this.isTooltipHovered || this.startHandleHovered,\r\n      'dc-ui-range-slider__tooltip--active': this.isTooltipActive || this.startHandleActive,\r\n      'dc-ui-range-slider__tooltip--focus': this.isTooltipFocused || this.startHandleFocus,\r\n    };\r\n\r\n    return (\r\n      <Host\r\n        style={hostStyle}\r\n        class={hostClasses}>\r\n        <div\r\n          class={classes}\r\n          style={{\r\n            height: this.direction === 'vertical' && this.height ? `${this.height}px` : null,\r\n          }}>\r\n          {this.label && <span class=\"dc-ui-range-slider__component-label\">{this.label}</span>}\r\n\r\n          {this.direction === 'vertical' && showDualHandles && (\r\n            <div class=\"dc-ui-range-slider__input-container dc-ui-range-slider__input-container--vertical-end\">\r\n              {endInput}\r\n            </div>\r\n          )}\r\n\r\n          <div class=\"dc-ui-range-slider__track-container\">\r\n            {this.direction === 'vertical' ? endLabel : startLabel}\r\n            <div\r\n              class=\"dc-ui-range-slider__track\"\r\n              ref={(el) => (this.track = el)}>\r\n              <div\r\n                class={fillClasses}\r\n                ref={(el) => (this.fill = el)}></div>\r\n              <button\r\n                role=\"slider\"\r\n                class={handleClasses('start')}\r\n                ref={(el) => (this.startHandle = el)}\r\n                onFocus={() => this.handleFocus('start')}\r\n                onBlur={() => this.handleBlur('start')}\r\n                aria-label={this.ariaLabelStart}\r\n                aria-valuemin={this.rangeMin}\r\n                aria-valuemax={this.rangeMax}\r\n                aria-valuenow={this.startValue}\r\n                aria-valuetext={this.formatValue(this.startValue)}></button>\r\n              {showDualHandles && (\r\n                <button\r\n                  role=\"slider\"\r\n                  class={handleClasses('end')}\r\n                  ref={(el) => (this.endHandle = el)}\r\n                  onFocus={() => this.handleFocus('end')}\r\n                  onBlur={() => this.handleBlur('end')}\r\n                  aria-label={this.ariaLabelEnd}\r\n                  aria-valuemin={this.rangeMin}\r\n                  aria-valuemax={this.rangeMax}\r\n                  aria-valuenow={this.endValue}\r\n                  aria-valuetext={this.formatValue(this.endValue)}></button>\r\n              )}\r\n              {!showDualHandles && (\r\n                <div\r\n                  class={tooltipClasses}\r\n                  ref={(el) => (this.tooltip = el)}>\r\n                  <input\r\n                    ref={(el) => (this.tooltipInput = el)}\r\n                    type=\"text\"\r\n                    value={this.formatValue(this.startValue)}\r\n                    onFocus={this.handleTooltipFocus}\r\n                    onBlur={this.handleTooltipBlur}\r\n                    onInput={this.handleTooltipInput}\r\n                    onKeyDown={this.handleTooltipKeyDown}\r\n                    aria-label={this.ariaLabelTooltip}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {this.direction === 'vertical' ? startLabel : endLabel}\r\n          </div>\r\n\r\n          {showDualHandles && this.direction === 'horizontal' && (\r\n            <div class=\"dc-ui-range-slider__input-container\">\r\n              {startInput}\r\n              {endInput}\r\n            </div>\r\n          )}\r\n\r\n          {this.direction === 'vertical' && showDualHandles && (\r\n            <div class=\"dc-ui-range-slider__input-container dc-ui-range-slider__input-container--vertical-start\">\r\n              {startInput}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  // Add this method to update form value\r\n  private updateFormValue() {\r\n    const roundedStart = Number(this.startValue.toFixed(this.rangeDecimals));\r\n    const value = {\r\n      start: roundedStart,\r\n      end:\r\n        this.rangeEnd !== undefined ? Number(this.endValue.toFixed(this.rangeDecimals)) : undefined,\r\n      suffix: this.rangeSuffix || undefined,\r\n    };\r\n    this.internals.setFormValue(JSON.stringify(value));\r\n  }\r\n\r\n  private updateTooltipWidth() {\r\n    if (this.tooltipInput) {\r\n      const value = this.tooltipInput.value || this.formatValue(this.startValue);\r\n      // Calculate width in ch units (add 1ch for padding/buffer)\r\n      const width = Math.max(4, value.length + 1); // Minimum 4ch width\r\n      this.tooltip.style.setProperty('--tooltip-input-width', `${width}ch`);\r\n    }\r\n  }\r\n\r\n  private readonly handleWindowResize = () => {\r\n    if (this.tooltip) {\r\n      this.updateTooltipPosition();\r\n    }\r\n  };\r\n}\r\n"],"names":["getEventPosition","event","direction","MouseEvent","clientX","clientY","touch","touches","changedTouches","getPositionPercentage","position","rect","left","width","top","height","DcUiRangeSlider","parsedSteps","debounceTimeout","lastPosition","handleDragStart","target","tagName","toLowerCase","this","isDragging","track","fill","trackRect","getBoundingClientRect","percentage","clickValue","rangeMin","rangeMax","undefined","rangeEnd","distanceToStart","Math","abs","startValue","distanceToEnd","endValue","activeHandle","startHandleActive","endHandleActive","handleDrag","classList","contains","closest","isEndHandle","preventDefault","approximateValue","step","getStepForValue","value","rangeStep","round","max","min","percentageToValue","snapToMiddle","midPoint","snapThreshold","updateSliderPositions","handleDragEnd","dcChange","emit","start","Number","toFixed","rangeDecimals","end","suffix","rangeSuffix","startPercentage","endPercentage","showDualHandles","updateHorizontalPositions","updateVerticalPositions","updateInputs","updateFormValue","handleInputKeyDown","input","key","handleInputChange","updateInputValue","handleTooltipFocus","isTooltipFocused","tooltipInput","select","handleTooltipBlur","startInputValue","handleTooltipInput","tooltipInputValue","handleTooltipKeyDown","updateTooltipValue","handleFocus","handle","startHandleFocus","endHandleFocus","handleBlur","handleMouseEvent","element","type","isEntering","startHandleHovered","endHandleHovered","isTooltipHovered","handleWindowResize","tooltip","updateTooltipPosition","componentWillLoad","calculateDecimalPlaces","length","console","warn","parseCustomSteps","internals","el","attachInternals","rangeStart","formatValue","endInputValue","handlePropChanges","handleStepsCustomChange","handleRangeStepChange","decimalPart","toString","split","componentDidLoad","resizeObserver","ResizeObserver","observe","window","addEventListener","updateTooltipWidth","startHandle","endHandle","disconnectedCallback","disconnect","removeEventListener","clearTimeout","style","handlePosition","offsetWidth","bottom","offsetHeight","tooltipPosition","includes","originalTooltipPosition","setTimeout","tooltipRect","viewportWidth","innerWidth","newPosition","right","wouldOverflowRight","wouldOverflowLeft","tooltipPositionChange","startInput","endInput","handleInputBlur","parseFloat","isNaN","roundedValue","handleKeyDown","currentValue","newValue","updateHandleValue","stepsCustom","stepPairs","replace","map","pair","_ref","filter","_ref2","sort","a","b","e","error","i","setValues","Promise","resolve","render","minLabelText","minLabel","maxLabelText","maxLabel","hostStyle","h","class","label","labelPosition","hideLabel","ref","onBlur","onKeyDown","pattern","tabindex","startLabel","variant","endLabel","hostClasses","inline","classes","handleClasses","isTooltipActive","fillClasses","tooltipClasses","Host","role","onFocus","ariaLabelStart","ariaLabelEnd","onInput","ariaLabelTooltip","setFormValue","JSON","stringify","setProperty"],"sourceRoot":""}
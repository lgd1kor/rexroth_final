{"ast":null,"code":"import { r as registerInstance, h, a as Host, g as getElement, f as forceUpdate } from './index-80864cdc.js';\nimport { s as setAriaAttributes } from './a11y-20fe3b5b.js';\nimport { c as checkSlotContent } from './checkSlotContent-8b411a76.js';\nimport { i as injectFont } from './font-80789c7f.js';\nimport { g as getCss, o as observeAttributes, i as injectCSS } from './observeOptions-74693e66.js';\nimport { c as addImportantToEachRule } from './breakpointCustom-9d1b1283.js';\nimport { g as getStateColors } from './getStateColors-418e5d7a.js';\nimport { c as color } from './color-4d62bb24.js';\nimport { g as getStateMessageStyles, S as StateMessage } from './state-message-46b67a81.js';\nimport { F as FULL_TEXT_STYLES } from './text-styles-cd2dc550.js';\nimport './mediaQuery-8afb3804.js';\nconst getLabelPositionStyles = (labelPosition, state) => {\n  if (labelPosition === 'default') {\n    return {\n      position: 'absolute',\n      padding: '16px 16px 0',\n      inset: state === 'error' ? '2px auto auto 2px' : '2px 2px auto',\n      maxWidth: 'calc(100% - 36px)',\n      backgroundColor: color.white,\n      transition: 'all 0.2s ease-in-out 0.1s'\n    };\n  }\n  if (labelPosition === 'above') {\n    return Object.assign(Object.assign({\n      display: 'block'\n    }, FULL_TEXT_STYLES['label-textarea'].focus), {\n      marginBottom: '8px'\n    });\n  }\n};\nconst getLabelTextStyles = (labelPosition, hover) => {\n  if (labelPosition === 'default') {\n    if (hover) {\n      return Object.assign({}, FULL_TEXT_STYLES['label-textarea'].focus);\n    }\n    return Object.assign({}, FULL_TEXT_STYLES['label-textarea'].base);\n  }\n  if (labelPosition === 'above') {\n    return Object.assign({}, FULL_TEXT_STYLES['label-textarea'].focus);\n  }\n};\nconst getTextAreaColors = (state, disabled, readonly) => {\n  let baseLabelColor;\n  let baseTextareaColor;\n  let baseBorderColor;\n  if (disabled) {\n    baseLabelColor = color.grey02;\n    baseTextareaColor = color.grey02;\n    baseBorderColor = color.grey02;\n    return {\n      baseLabelColor,\n      baseTextareaColor,\n      baseBorderColor\n    };\n  }\n  if (readonly) {\n    baseLabelColor = color.grey06;\n    baseTextareaColor = color.darkBlue02;\n    baseBorderColor = color.grey02;\n    return {\n      baseLabelColor,\n      baseTextareaColor,\n      baseBorderColor\n    };\n  }\n  switch (state) {\n    case 'none':\n      baseLabelColor = color.grey06;\n      baseTextareaColor = color.darkBlue02;\n      baseBorderColor = color.grey05;\n      return {\n        baseLabelColor,\n        baseTextareaColor,\n        baseBorderColor\n      };\n    case 'error':\n      baseLabelColor = color.grey06;\n      baseTextareaColor = color.darkBlue02;\n      baseBorderColor = color.red02;\n      return {\n        baseLabelColor,\n        baseTextareaColor,\n        baseBorderColor\n      };\n  }\n};\nconst getBorderStateStyles = (state, stateColor) => {\n  const baseBorderStyles = {\n    borderRadius: '0'\n  };\n  switch (state) {\n    case 'none':\n      return Object.assign(Object.assign({}, baseBorderStyles), {\n        border: `1px solid ${stateColor}`\n      });\n    case 'error':\n      return Object.assign(Object.assign({}, baseBorderStyles), {\n        border: `2px solid ${stateColor}`\n      });\n  }\n};\nconst createStyles = (labelPosition, state, disabled, readonly) => {\n  const {\n    baseLabelColor,\n    baseTextareaColor,\n    baseBorderColor\n  } = getTextAreaColors(state, disabled, readonly);\n  const stateColor = disabled ? color.grey02 : getStateColors(state);\n  const stateToPass = disabled ? 'none' : state;\n  return getCss(Object.assign({\n    '@global': {\n      ':host': {\n        display: 'block'\n      },\n      label: {\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n        '&.focus #label-text': Object.assign({\n          paddingTop: labelPosition === 'default' ? '10px' : '0'\n        }, getLabelTextStyles(labelPosition, true))\n      },\n      '#label-container': {\n        position: 'relative'\n      },\n      '#label-text': Object.assign(Object.assign({\n        fontFamily: 'Bosch Sans',\n        cursor: 'pointer',\n        transition: 'all 0.2s ease-in-out 0.1s',\n        color: baseLabelColor\n      }, getLabelTextStyles(labelPosition, false)), getLabelPositionStyles(labelPosition, state)),\n      '#max-characters-text, #state-message-text': {\n        marginTop: '4px',\n        fontFamily: 'Bosch Sans',\n        display: 'flex',\n        fontSize: '12px',\n        lineHeight: '13px',\n        letterSpacing: '0.32px',\n        color: baseTextareaColor\n      },\n      '#state-message-text': {\n        color: stateColor\n      },\n      '::slotted': addImportantToEachRule({\n        '&(textarea)': Object.assign({\n          all: 'unset',\n          appearance: 'none',\n          WebkitAppearance: 'none',\n          padding: labelPosition === 'default' ? '26px 16px 16px' : '16px',\n          fontFamily: 'Bosch Sans',\n          fontSize: '14px',\n          lineHeight: '16px',\n          letterSpacing: '0.16px',\n          color: baseTextareaColor,\n          outline: `2px solid transparent`,\n          outlineOffset: '-2px',\n          border: 'none',\n          resize: 'none',\n          backgroundColor: color.white\n        }, getBorderStateStyles(stateToPass, baseBorderColor)),\n        '&(textarea:disabled)': {\n          cursor: 'not-allowed',\n          backgroundColor: color.white\n        },\n        '&(textarea:hover)': {\n          borderColor: stateColor || color.grey10\n        },\n        '&(textarea:focus)': {\n          outlineColor: stateColor || color.turquoise02\n        },\n        // // needed for Safari\n        '&(textarea:focus:not(:focus-visible))': {\n          outlineColor: 'transparent'\n        }\n      })\n    }\n  }, getStateMessageStyles(state)));\n};\nconst DcUiTextareaWrapper = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.characterCount = () => {\n      // initial character count on render\n      this.setCharacterCount();\n      // event on textarea keyup if max characters is set\n      this.textarea.addEventListener('keyup', this.setCharacterCount);\n    };\n    this.setCharacterCount = () => {\n      // set current characters\n      this.currentCharacters = this.textarea.value.length;\n      // set max characters text\n      if (this.maxCharacters > 0) {\n        const maxCharactersText = this.el.shadowRoot.querySelector('#max-characters-text');\n        maxCharactersText.innerHTML = `${this.currentCharacters}/${this.maxCharacters}`;\n      }\n    };\n    this.observeAttributes = () => {\n      observeAttributes(this.textarea, ['disabled', 'required', 'readonly'], () => forceUpdate(this.el));\n    };\n    this.onLabelClick = () => {\n      this.textarea.focus();\n    };\n    this.label = undefined;\n    this.labelPosition = 'default';\n    this.message = '';\n    this.validationstate = 'none';\n    this.showCharacterCount = false;\n  }\n  componentWillLoad() {\n    injectFont();\n    checkSlotContent(this.el, 'textarea'); // check if textarea is in slot. Delete other elements\n    this.textarea = this.el.querySelector('textarea');\n    if (this.textarea.maxLength > 0) this.maxCharacters = this.textarea.maxLength; // set max characters if maxlength is set on textarea\n    this.observeAttributes(); // once initially\n  }\n  connectedCallback() {\n    this.observeAttributes(); // on every reconnect\n  }\n  componentDidRender() {\n    setAriaAttributes(this.textarea, {\n      label: this.label,\n      message: this.message\n    });\n    // check if textarea is not empty or has a placeholder and add focus class to label\n    if (this.textarea.value !== '' || this.textarea.placeholder !== '') {\n      this.labelEl.classList.add('focus');\n    }\n    // event on textarea focus\n    this.textarea.addEventListener('focus', () => {\n      this.labelEl.classList.add('focus');\n    });\n    // event on textarea blur\n    this.textarea.addEventListener('blur', () => {\n      // remove focus class from label if textarea is empty\n      if (this.textarea.value === '' && this.textarea.placeholder === '') this.labelEl.classList.remove('focus');\n    });\n    // event on textarea keyup if max characters is set\n    if (this.maxCharacters > 0 && this.showCharacterCount) {\n      this.characterCount();\n    }\n  }\n  render() {\n    injectCSS(this.el, createStyles, this.labelPosition, this.validationstate, this.textarea.disabled, this.textarea.readOnly);\n    return h(Host, {\n      key: '4ce7bf791eafd6047b66eaab97b7d8be6e20be23'\n    }, h(\"label\", {\n      key: 'cbadf00dd92bf62b8850bf29d92818cacc9c8a1a',\n      onClick: this.onLabelClick,\n      ref: label => this.labelEl = label\n    }, h(\"div\", {\n      key: '74d56d2932428907812d4bdba3ba6212323b15db',\n      id: \"label-container\"\n    }, this.label && h(\"span\", {\n      key: '30fc1c18232cf0a4b2a0b15cd0053fd985361b34',\n      id: \"label-text\"\n    }, this.label, \" \", this.textarea.required ? ' *' : '')), h(\"slot\", {\n      key: 'd7b6171b7e6f0aac96d10e5ac596ef77c912fa4f'\n    })), this.maxCharacters > 0 && this.showCharacterCount && h(\"span\", {\n      key: '685d93644e820e39f980be9774fa931948be9e11',\n      id: \"max-characters-text\"\n    }, \"0/\", this.maxCharacters), this.validationstate !== 'none' && h(StateMessage, {\n      key: 'f0880777f87fecb909858e11479154c2d5f1efab',\n      state: this.validationstate,\n      message: this.message\n    }));\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { DcUiTextareaWrapper as dc_ui_textarea_wrapper };","map":{"version":3,"names":["getLabelPositionStyles","labelPosition","state","position","padding","inset","maxWidth","backgroundColor","color","white","transition","Object","assign","display","FULL_TEXT_STYLES","focus","marginBottom","getLabelTextStyles","hover","base","getTextAreaColors","disabled","readonly","baseLabelColor","baseTextareaColor","baseBorderColor","grey02","grey06","darkBlue02","grey05","red02","getBorderStateStyles","stateColor","baseBorderStyles","borderRadius","border","createStyles","getStateColors","stateToPass","getCss","label","flexDirection","paddingTop","fontFamily","cursor","marginTop","fontSize","lineHeight","letterSpacing","addImportantToEachRule","all","appearance","WebkitAppearance","outline","outlineOffset","resize","borderColor","grey10","outlineColor","turquoise02","getStateMessageStyles","DcUiTextareaWrapper","characterCount","setCharacterCount","textarea","addEventListener","currentCharacters","value","length","maxCharacters","maxCharactersText","el","shadowRoot","querySelector","innerHTML","observeAttributes","forceUpdate","onLabelClick","componentWillLoad","injectFont","checkSlotContent","maxLength","connectedCallback","componentDidRender","setAriaAttributes","message","placeholder","labelEl","classList","add","remove","showCharacterCount","render","injectCSS","validationstate","readOnly","h","Host","key","onClick","ref","id","required","StateMessage"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-textarea-wrapper\\textarea-utils.ts","C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-textarea-wrapper\\textarea-styles.ts","C:\\Users\\LGD1KOR\\Desktop\\rexroth_products_with_versions\\rexroth_final\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\components\\dc-ui-textarea-wrapper\\dc-ui-textarea-wrapper.tsx"],"sourcesContent":["import { JssStyle } from 'jss';\r\nimport { color as colorUtils, TValidationState, FULL_TEXT_STYLES } from '../../utils';\r\n\r\nexport const TEXTAREA_LABEL_POSITION = ['default', 'above'] as const;\r\nexport type TTextareaLabelPosition = (typeof TEXTAREA_LABEL_POSITION)[number];\r\n\r\nexport const getLabelPositionStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  state: TValidationState\r\n): JssStyle => {\r\n  if (labelPosition === 'default') {\r\n    return {\r\n      position: 'absolute',\r\n      padding: '16px 16px 0',\r\n      inset: state === 'error' ? '2px auto auto 2px' : '2px 2px auto',\r\n      maxWidth: 'calc(100% - 36px)',\r\n      backgroundColor: colorUtils.white,\r\n      transition: 'all 0.2s ease-in-out 0.1s',\r\n    };\r\n  }\r\n\r\n  if (labelPosition === 'above') {\r\n    return {\r\n      display: 'block',\r\n      ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n      marginBottom: '8px',\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLabelTextStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  hover: boolean\r\n): JssStyle => {\r\n  if (labelPosition === 'default') {\r\n    if (hover) {\r\n      return {\r\n        ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n      };\r\n    }\r\n\r\n    return {\r\n      ...FULL_TEXT_STYLES['label-textarea'].base,\r\n    };\r\n  }\r\n\r\n  if (labelPosition === 'above') {\r\n    return {\r\n      ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n    };\r\n  }\r\n};\r\n\r\nexport const getTextAreaColors = (\r\n  state: TValidationState,\r\n  disabled: boolean,\r\n  readonly: boolean\r\n): { baseLabelColor: string; baseTextareaColor: string; baseBorderColor: string } => {\r\n  let baseLabelColor;\r\n  let baseTextareaColor;\r\n  let baseBorderColor;\r\n\r\n  if (disabled) {\r\n    baseLabelColor = colorUtils.grey02;\r\n    baseTextareaColor = colorUtils.grey02;\r\n    baseBorderColor = colorUtils.grey02;\r\n\r\n    return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n\r\n  if (readonly) {\r\n    baseLabelColor = colorUtils.grey06;\r\n    baseTextareaColor = colorUtils.darkBlue02;\r\n    baseBorderColor = colorUtils.grey02;\r\n\r\n    return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n\r\n  switch (state) {\r\n    case 'none':\r\n      baseLabelColor = colorUtils.grey06;\r\n      baseTextareaColor = colorUtils.darkBlue02;\r\n      baseBorderColor = colorUtils.grey05;\r\n      return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n    case 'error':\r\n      baseLabelColor = colorUtils.grey06;\r\n      baseTextareaColor = colorUtils.darkBlue02;\r\n      baseBorderColor = colorUtils.red02;\r\n      return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n};\r\n\r\nexport const getBorderStateStyles = (state: TValidationState, stateColor: string): JssStyle => {\r\n  const baseBorderStyles = {\r\n    borderRadius: '0',\r\n  };\r\n\r\n  switch (state) {\r\n    case 'none':\r\n      return {\r\n        ...baseBorderStyles,\r\n        border: `1px solid ${stateColor}`,\r\n      };\r\n    case 'error':\r\n      return {\r\n        ...baseBorderStyles,\r\n        border: `2px solid ${stateColor}`,\r\n      };\r\n  }\r\n};\r\n","import {\r\n  getCss,\r\n  color as colorUtils,\r\n  getStateColors,\r\n  addImportantToEachRule,\r\n  TValidationState,\r\n} from '../../utils';\r\nimport { getStateMessageStyles } from '../common/state-message/state-message-styles';\r\nimport {\r\n  getBorderStateStyles,\r\n  getLabelPositionStyles,\r\n  getLabelTextStyles,\r\n  getTextAreaColors,\r\n  TTextareaLabelPosition,\r\n} from './textarea-utils';\r\n\r\nexport const createStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  state: TValidationState,\r\n  disabled: boolean,\r\n  readonly: boolean\r\n): string => {\r\n  const { baseLabelColor, baseTextareaColor, baseBorderColor } = getTextAreaColors(\r\n    state,\r\n    disabled,\r\n    readonly\r\n  );\r\n  const stateColor = disabled ? colorUtils.grey02 : getStateColors(state);\r\n  const stateToPass = disabled ? 'none' : state;\r\n\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'block',\r\n      },\r\n      label: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'relative',\r\n\r\n        '&.focus #label-text': {\r\n          paddingTop: labelPosition === 'default' ? '10px' : '0',\r\n          ...getLabelTextStyles(labelPosition, true),\r\n        },\r\n      },\r\n      '#label-container': {\r\n        position: 'relative',\r\n      },\r\n      '#label-text': {\r\n        fontFamily: 'Bosch Sans',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s ease-in-out 0.1s',\r\n        color: baseLabelColor,\r\n        ...getLabelTextStyles(labelPosition, false),\r\n        ...getLabelPositionStyles(labelPosition, state),\r\n      },\r\n      '#max-characters-text, #state-message-text': {\r\n        marginTop: '4px',\r\n        fontFamily: 'Bosch Sans',\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        lineHeight: '13px',\r\n        letterSpacing: '0.32px',\r\n        color: baseTextareaColor,\r\n      },\r\n      '#state-message-text': {\r\n        color: stateColor,\r\n      },\r\n      '::slotted': addImportantToEachRule({\r\n        '&(textarea)': {\r\n          all: 'unset',\r\n          appearance: 'none',\r\n          WebkitAppearance: 'none', // iOS safari\r\n          padding: labelPosition === 'default' ? '26px 16px 16px' : '16px',\r\n          fontFamily: 'Bosch Sans',\r\n          fontSize: '14px',\r\n          lineHeight: '16px',\r\n          letterSpacing: '0.16px',\r\n          color: baseTextareaColor,\r\n          outline: `2px solid transparent`,\r\n          outlineOffset: '-2px',\r\n          border: 'none',\r\n          resize: 'none',\r\n          backgroundColor: colorUtils.white,\r\n          ...getBorderStateStyles(stateToPass, baseBorderColor),\r\n        },\r\n\r\n        '&(textarea:disabled)': {\r\n          cursor: 'not-allowed',\r\n          backgroundColor: colorUtils.white,\r\n        },\r\n\r\n        '&(textarea:hover)': {\r\n          borderColor: stateColor || colorUtils.grey10,\r\n        },\r\n\r\n        '&(textarea:focus)': {\r\n          outlineColor: stateColor || colorUtils.turquoise02,\r\n        },\r\n\r\n        // // needed for Safari\r\n        '&(textarea:focus:not(:focus-visible))': {\r\n          outlineColor: 'transparent',\r\n        },\r\n      }),\r\n    },\r\n    ...getStateMessageStyles(state),\r\n  });\r\n};\r\n","import { Component, h, Host, Prop, Element, forceUpdate } from '@stencil/core';\r\nimport {\r\n  injectCSS,\r\n  injectFont,\r\n  observeAttributes,\r\n  setAriaAttributes,\r\n  checkSlotContent,\r\n  TValidationState,\r\n} from '../../utils';\r\nimport { TTextareaLabelPosition } from './textarea-utils';\r\nimport { createStyles } from './textarea-styles';\r\nimport { StateMessage } from '../common/state-message/state-message';\r\n\r\n@Component({\r\n  tag: 'dc-ui-textarea-wrapper',\r\n  shadow: true,\r\n})\r\nexport class DcUiTextareaWrapper {\r\n  @Element() el: HTMLElement;\r\n  @Prop() label: string;\r\n  @Prop() labelPosition: TTextareaLabelPosition = 'default';\r\n  @Prop() message = '';\r\n  @Prop() validationstate: TValidationState = 'none';\r\n  @Prop() showCharacterCount = false;\r\n\r\n  private textarea: HTMLTextAreaElement;\r\n  private labelEl: HTMLLabelElement;\r\n  maxCharacters: number;\r\n  currentCharacters: number;\r\n\r\n  public componentWillLoad(): void {\r\n    injectFont();\r\n    checkSlotContent(this.el, 'textarea'); // check if textarea is in slot. Delete other elements\r\n    this.textarea = this.el.querySelector('textarea');\r\n    if (this.textarea.maxLength > 0) this.maxCharacters = this.textarea.maxLength; // set max characters if maxlength is set on textarea\r\n    this.observeAttributes(); // once initially\r\n  }\r\n\r\n  public connectedCallback(): void {\r\n    this.observeAttributes(); // on every reconnect\r\n  }\r\n\r\n  private characterCount = (): void => {\r\n    // initial character count on render\r\n    this.setCharacterCount();\r\n\r\n    // event on textarea keyup if max characters is set\r\n    this.textarea.addEventListener('keyup', this.setCharacterCount);\r\n  };\r\n\r\n  private setCharacterCount = (): void => {\r\n    // set current characters\r\n    this.currentCharacters = this.textarea.value.length;\r\n\r\n    // set max characters text\r\n    if (this.maxCharacters > 0) {\r\n      const maxCharactersText = this.el.shadowRoot.querySelector('#max-characters-text');\r\n      maxCharactersText.innerHTML = `${this.currentCharacters}/${this.maxCharacters}`;\r\n    }\r\n  };\r\n\r\n  public componentDidRender(): void {\r\n    setAriaAttributes(this.textarea, {\r\n      label: this.label,\r\n      message: this.message,\r\n    });\r\n\r\n    // check if textarea is not empty or has a placeholder and add focus class to label\r\n    if (this.textarea.value !== '' || this.textarea.placeholder !== '') {\r\n      this.labelEl.classList.add('focus');\r\n    }\r\n\r\n    // event on textarea focus\r\n    this.textarea.addEventListener('focus', () => {\r\n      this.labelEl.classList.add('focus');\r\n    });\r\n\r\n    // event on textarea blur\r\n    this.textarea.addEventListener('blur', () => {\r\n      // remove focus class from label if textarea is empty\r\n      if (this.textarea.value === '' && this.textarea.placeholder === '')\r\n        this.labelEl.classList.remove('focus');\r\n    });\r\n\r\n    // event on textarea keyup if max characters is set\r\n    if (this.maxCharacters > 0 && this.showCharacterCount) {\r\n      this.characterCount();\r\n    }\r\n  }\r\n\r\n  private observeAttributes = (): void => {\r\n    observeAttributes(this.textarea, ['disabled', 'required', 'readonly'], () =>\r\n      forceUpdate(this.el)\r\n    );\r\n  };\r\n\r\n  private onLabelClick = (): void => {\r\n    this.textarea.focus();\r\n  };\r\n\r\n  render() {\r\n    injectCSS(\r\n      this.el,\r\n      createStyles,\r\n      this.labelPosition,\r\n      this.validationstate,\r\n      this.textarea.disabled,\r\n      this.textarea.readOnly\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <label\r\n          onClick={this.onLabelClick}\r\n          ref={(label) => (this.labelEl = label)}>\r\n          <div id=\"label-container\">\r\n            {this.label && (\r\n              <span id=\"label-text\">\r\n                {this.label} {this.textarea.required ? ' *' : ''}\r\n              </span>\r\n            )}\r\n          </div>\r\n          <slot />\r\n        </label>\r\n        {this.maxCharacters > 0 && this.showCharacterCount && (\r\n          <span id=\"max-characters-text\">0/{this.maxCharacters}</span>\r\n        )}\r\n        {this.validationstate !== 'none' && (\r\n          <StateMessage\r\n            state={this.validationstate}\r\n            message={this.message}></StateMessage>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { m as mediaQueryMin } from './mediaQuery-8afb3804.js';\nimport { F as FULL_TEXT_STYLES } from './text-styles-cd2dc550.js';\nconst parseJSON = prop => {\n  if (typeof prop === 'string') {\n    try {\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\n      return JSON.parse(prop.replace(/'/g, '\"') // convert single quotes to double quotes\n      .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\n      );\n    } catch (_a) {\n      // prop is string, e.g. \"block\" or \"inline\"\n      return prop;\n    }\n  } else {\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\n    return prop;\n  }\n};\n// do we need that ?\nconst addImportantToRule = value => `${value} !important`;\n// do we need that ?\nconst addImportantToEachRule = input => {\n  return Object.entries(input).reduce((result, [key, value]) => value === null ? result : (result[key] = typeof value === 'object' ? addImportantToEachRule(value) : addImportantToRule(value), result), {});\n};\nconst buildResponsiveStyles = (rawValue, getJssStyle) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const value = parseJSON(rawValue);\n  const returnValue = typeof value === 'object' ? Object.keys(value)\n  // base styles are applied on root object, responsive styles are nested within\n  // hence it is used as the initial object within reduce function\n  .filter(key => key !== 'base').reduce((result, breakpointValue) => Object.assign(Object.assign({}, result), {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    [mediaQueryMin(breakpointValue)]: getJssStyle(value[breakpointValue])\n  }), getJssStyle(value.base)) : getJssStyle(value);\n  return returnValue;\n};\nconst buildResponsiveStylesWithProps = (rawValue, getJssStyle, extraProp, ...args) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const value = parseJSON(rawValue);\n  const returnValue = typeof value === 'object' ? Object.keys(value)\n  // base styles are applied on root object, responsive styles are nested within\n  // hence it is used as the initial object within reduce function\n  .filter(key => key !== 'base').reduce((result, breakpointValue) => Object.assign(Object.assign({}, result), {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    [mediaQueryMin(breakpointValue)]: getJssStyle(value[breakpointValue], extraProp, ...args)\n  }), getJssStyle(value.base, extraProp, ...args)) : getJssStyle(value, extraProp, ...args);\n  return returnValue;\n};\nconst buildResponsiveTextStyles = styleName => {\n  const fontObject = FULL_TEXT_STYLES[styleName];\n  if (!fontObject) {\n    throw new Error(`Text style ${styleName} does not exist`);\n  }\n  let styles = {};\n  // itterate over fontObject\n  Object.keys(fontObject).forEach(key => {\n    // check if key is 'base'\n    if (key === 'base') {\n      styles = Object.assign(Object.assign({}, styles), fontObject[key]);\n      return;\n    }\n    // get media query from object key\n    const mediaQuery = mediaQueryMin(key);\n    // add styles from fontObject to mediaQuery\n    styles = Object.assign(Object.assign({}, styles), {\n      [mediaQuery]: Object.assign({}, fontObject[key])\n    });\n  });\n  return styles;\n};\nexport { buildResponsiveTextStyles as a, buildResponsiveStyles as b, buildResponsiveStylesWithProps as c, addImportantToEachRule as d };","map":{"version":3,"names":["parseJSON","prop","JSON","parse","replace","_a","addImportantToRule","value","addImportantToEachRule","input","Object","entries","reduce","result","key","buildResponsiveStyles","rawValue","getJssStyle","returnValue","keys","filter","breakpointValue","assign","mediaQueryMin","base","buildResponsiveStylesWithProps","extraProp","args","buildResponsiveTextStyles","styleName","fontObject","FULL_TEXT_STYLES","Error","styles","forEach","mediaQuery"],"sources":["C:\\Users\\LGD1KOR\\Desktop\\react\\my-app\\node_modules\\@boschrexroth\\nextgen-web-ui-toolkit\\dist\\esm\\src\\utils\\functions\\breakpointCustom.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { JssStyle, Styles } from 'jss';\r\nimport { TBreakpointNames, mediaQueryMin } from './mediaQuery';\r\nimport { FULL_TEXT_STYLES } from '../variables';\r\n\r\nexport const BREAKPOINTS = ['base', 'xs', 'sm', 'md', 'lg', 'xl'] as const;\r\nexport type BreakpointKey = (typeof BREAKPOINTS)[number];\r\nexport type BreakpointValues<T> = {\r\n  [key in BreakpointKey]?: T;\r\n} & {\r\n  base: T;\r\n};\r\n\r\n// string is needed in order to pass and parse objects via prop decorator\r\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\r\nexport type BreakpointValue = string | number | boolean;\r\n\r\nexport const parseJSON = (\r\n  prop: BreakpointCustomizable<BreakpointValue>\r\n): BreakpointValues<BreakpointValue> | BreakpointValue => {\r\n  if (typeof prop === 'string') {\r\n    try {\r\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\r\n      return JSON.parse(\r\n        prop\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\r\n      );\r\n    } catch {\r\n      // prop is string, e.g. \"block\" or \"inline\"\r\n      return prop;\r\n    }\r\n  } else {\r\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\r\n    return prop;\r\n  }\r\n};\r\n\r\n// do we need that ?\r\nexport const addImportantToRule = (value: any): string => `${value} !important`;\r\n\r\n// do we need that ?\r\nexport const addImportantToEachRule = (input: JssStyle): JssStyle => {\r\n  return Object.entries(input).reduce(\r\n    (result, [key, value]) =>\r\n      value === null\r\n        ? result\r\n        : ((result[key] =\r\n            typeof value === 'object'\r\n              ? addImportantToEachRule(value as JssStyle)\r\n              : addImportantToRule(value)),\r\n          result),\r\n    {} as JssStyle\r\n  );\r\n};\r\n\r\nexport type GetJssStyleFunction = (value?: any) => JssStyle;\r\nexport type GetJssStyleFunctionWithProp = (value: any, ...args: any[]) => JssStyle;\r\n\r\nexport const buildResponsiveStyles = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunction\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue]\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base) as Styles\r\n          )\r\n      : (getJssStyle(value) as Styles);\r\n\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveStylesWithProps = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunctionWithProp,\r\n  extraProp: string,\r\n  ...args: any[]\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue],\r\n                extraProp,\r\n                ...args\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base, extraProp, ...args) as Styles\r\n          )\r\n      : (getJssStyle(value, extraProp, ...args) as Styles);\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveTextStyles = (styleName: string) => {\r\n  const fontObject = FULL_TEXT_STYLES[styleName];\r\n  if (!fontObject) {\r\n    throw new Error(`Text style ${styleName} does not exist`);\r\n  }\r\n\r\n  let styles = {};\r\n\r\n  // itterate over fontObject\r\n  Object.keys(fontObject).forEach((key) => {\r\n    // check if key is 'base'\r\n    if (key === 'base') {\r\n      styles = {\r\n        ...styles,\r\n        ...fontObject[key],\r\n      };\r\n      return;\r\n    }\r\n\r\n    // get media query from object key\r\n    const mediaQuery = mediaQueryMin(key as any);\r\n\r\n    // add styles from fontObject to mediaQuery\r\n    styles = {\r\n      ...styles,\r\n      [mediaQuery]: {\r\n        ...fontObject[key],\r\n      },\r\n    };\r\n  });\r\n\r\n  return styles;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
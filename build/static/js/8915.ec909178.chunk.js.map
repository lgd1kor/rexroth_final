{"version":3,"file":"static/js/8915.ec909178.chunk.js","mappings":"2JAAA,MCOaA,EAAoB,M,wEAOvB,KAAAC,WAAa,EACJ,KAAAC,aAAe,CAC9BC,OAAQ,cACRC,SAAU,eA6GK,KAAAC,iBAAmB,KAClB,CACd,qBAAqB,EACrB,8BAAoD,aAAnBC,KAAKC,Y,eAvHK,Y,CAU/C,gBAAYC,GACV,OAAOF,KAAKG,GAAGC,iBAAiB,+B,CAG1B,sBAAMC,CAAiBC,GAC7B,MAAMC,EAAQP,KAAKE,mBAEbM,QAAQC,IACZC,MAAMC,KAAKJ,GAAOK,KAAKC,GAEbA,EAA6CC,oBAKzD,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAC5BA,EAAIT,EAAY,EAClBC,EAAMQ,GAAGE,aAAa,QAAS,YACtBF,IAAMT,EAAY,EAC3BC,EAAMQ,GAAGE,aAAa,QAAS,UAG/BV,EAAMQ,GAAGG,gBAAgB,SAK7BlB,KAAKmB,gB,CAIP,cAAMC,CAASd,GACb,OAAIA,GAAa,GAAKA,EAAYN,KAAKE,aAAac,OAC3CR,QAAQa,OAAO,yDAGxBrB,KAAKL,WAAaW,QACZN,KAAKK,iBAAiBC,GACrBN,KAAKsB,qB,CAId,kBAAMC,GACJ,OAAOvB,KAAKoB,SAASpB,KAAKL,WAAa,E,CAIzC,sBAAM6B,GACJ,OAAOxB,KAAKoB,SAASpB,KAAKL,WAAa,E,CAIzC,gBAAM8B,GACJ,OAAOjB,QAAQkB,QAAQ1B,KAAKoB,SAAS,G,CAIvC,mBAAMO,GACJ,OAAO3B,KAAKL,U,CAGN2B,kBAAAA,GAEN,OADAM,uBAAsB,IAAM5B,KAAKmB,mBAC1BnB,KAAK6B,SAASC,KAAK,CAAEnC,WAAYK,KAAKL,Y,CAG/CoC,gBAAAA,GACyB,aAAnB/B,KAAKC,WACPD,KAAKE,aAAa8B,SAASC,GACzBA,EAAQC,WAAWC,kBAAkBC,UAAUC,IAAI,a,CAKjDC,WAAAA,GACNtC,KAAKE,aAAa8B,SAAQ,CAACC,EAASM,EAAOC,KACzC,GAAID,IAAUC,EAASxB,OAAS,EAAG,OAEnC,MAAMyB,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,eACpBH,EAAQxB,aAAa,cAAe,QACpCjB,KAAK6C,mBAAmBJ,EAASR,EAAQa,aAAa,UACtDb,EAAQc,cAAcC,aAAaP,EAASR,EAAQgB,YAAY,G,CAI5D9B,cAAAA,GACNnB,KAAKE,aAAa8B,SAASC,IACzB,MAAMQ,EAAUR,EAAQiB,oBACZ,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASL,UAAUe,SAAS,kBAEjCnD,KAAK6C,mBAAmBJ,EAASR,EAAQa,aAAa,SAAS,G,CAI3DD,kBAAAA,CAAmBJ,EAAsBW,GAC/CX,EAAQL,UAAUiB,UAAUC,OAAOC,OAAOvD,KAAKJ,eAC3CwD,KAASpD,KAAKJ,cAChB6C,EAAQL,UAAUC,IAAIrC,KAAKJ,aAAawD,G,CAI5CI,kBAAAA,GACExD,KAAKsC,a,CAYPmB,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2DAAmC,aAAnB5D,KAAKC,YACxByD,EAAAA,EAAAA,GAAA,MAAAE,IAAA,2CAAIC,MAAO7D,KAAKD,qBACd2D,EAAAA,EAAAA,GAAA,QAAAE,IAAA,8C,wCD3IsB,qyC","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-process-indicator/dc-ui-process-indicator.scss?tag=dc-ui-process-indicator&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-process-indicator/dc-ui-process-indicator.tsx"],"sourcesContent":[":host {\r\n  --state-message-color: #{$color-red-02};\r\n  --state-outline-color: #{$color-turquoise-03};\r\n\r\n  display: flex;\r\n  font-family: 'Bosch Sans';\r\n}\r\n\r\n:host([data-vertical]) {\r\n  ::slotted(.step-divider) {\r\n    position: relative;\r\n    width: 2px;\r\n    background-color: rgb(202, 214, 221);\r\n    top: 15px;\r\n    left: 17px;\r\n    transform: translateY(-50%);\r\n    height: 30px;\r\n  }\r\n\r\n  ::slotted(.step-divider.half-filled) {\r\n    background: linear-gradient(180deg, $color-dark-blue-02 50%, $color-grey-02 50%);\r\n  }\r\n}\r\n\r\n.process-indicator {\r\n  list-style-type: none;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  margin: 0;\r\n  width: 100%;\r\n  padding: 0;\r\n  gap: 16px;\r\n  position: relative;\r\n\r\n  &--vertical {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 0;\r\n  }\r\n}\r\n\r\n::slotted(.step-divider) {\r\n  height: 2px;\r\n  background-color: $color-grey-02;\r\n  width: 100%;\r\n}\r\n\r\n::slotted(.step-divider.half-filled) {\r\n  background: linear-gradient(90deg, $color-dark-blue-02 50%, $color-grey-02 50%);\r\n}\r\n\r\n::slotted(.step-divider.full-filled) {\r\n  background-color: $color-dark-blue-02;\r\n}\r\n","import { Component, h, Prop, Method, Element, Event, EventEmitter, Host } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dc-ui-process-indicator',\r\n  styleUrl: 'dc-ui-process-indicator.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiProcessIndicator {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop() direction: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  @Event() dcChange: EventEmitter<{ activeStep: number }>;\r\n\r\n  private activeStep = 1;\r\n  private readonly stateClasses = {\r\n    active: 'half-filled',\r\n    complete: 'full-filled',\r\n  } as const;\r\n\r\n  private get stepElements(): NodeListOf<HTMLElement> {\r\n    return this.el.querySelectorAll('dc-ui-process-indicator-step');\r\n  }\r\n\r\n  private async updateStepStates(stepIndex: number): Promise<void> {\r\n    const steps = this.stepElements;\r\n    // Reset all steps first\r\n    await Promise.all(\r\n      Array.from(steps).map((step) => {\r\n        // Cast step to HTMLDcUiProcessIndicatorStepElement to allow calling resetStepState\r\n        return (step as HTMLDcUiProcessIndicatorStepElement).resetStepState();\r\n      })\r\n    );\r\n\r\n    // Set states for steps up to the current step\r\n    for (let i = 0; i < steps.length; i++) {\r\n      if (i < stepIndex - 1) {\r\n        steps[i].setAttribute('state', 'complete');\r\n      } else if (i === stepIndex - 1) {\r\n        steps[i].setAttribute('state', 'active');\r\n      } else {\r\n        // Explicitly reset states for steps after the current step\r\n        steps[i].removeAttribute('state');\r\n      }\r\n    }\r\n\r\n    // Immediately update dividers instead of waiting for animation frame\r\n    this.updateDividers();\r\n  }\r\n\r\n  @Method()\r\n  async goToStep(stepIndex: number) {\r\n    if (stepIndex <= 0 || stepIndex > this.stepElements.length) {\r\n      return Promise.reject('UI Process indicator: Step selected is out of bounds');\r\n    }\r\n\r\n    this.activeStep = stepIndex;\r\n    await this.updateStepStates(stepIndex);\r\n    return this.stepChangedHandler();\r\n  }\r\n\r\n  @Method()\r\n  async goToNextStep() {\r\n    return this.goToStep(this.activeStep + 1);\r\n  }\r\n\r\n  @Method()\r\n  async goToPreviousStep() {\r\n    return this.goToStep(this.activeStep - 1);\r\n  }\r\n\r\n  @Method()\r\n  async resetSteps() {\r\n    return Promise.resolve(this.goToStep(1));\r\n  }\r\n\r\n  @Method()\r\n  async getActiveStep() {\r\n    return this.activeStep;\r\n  }\r\n\r\n  private stepChangedHandler() {\r\n    requestAnimationFrame(() => this.updateDividers());\r\n    return this.dcChange.emit({ activeStep: this.activeStep });\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.direction === 'vertical') {\r\n      this.stepElements.forEach((element) =>\r\n        element.shadowRoot.firstElementChild.classList.add('vertical')\r\n      );\r\n    }\r\n  }\r\n\r\n  private addDividers() {\r\n    this.stepElements.forEach((element, index, elements) => {\r\n      if (index === elements.length - 1) return;\r\n\r\n      const divider = document.createElement('div');\r\n      divider.className = 'step-divider';\r\n      divider.setAttribute('aria-hidden', 'true');\r\n      this.updateDividerState(divider, element.getAttribute('state'));\r\n      element.parentElement.insertBefore(divider, element.nextSibling);\r\n    });\r\n  }\r\n\r\n  private updateDividers() {\r\n    this.stepElements.forEach((element) => {\r\n      const divider = element.nextElementSibling as HTMLElement;\r\n      if (!divider?.classList.contains('step-divider')) return;\r\n\r\n      this.updateDividerState(divider, element.getAttribute('state'));\r\n    });\r\n  }\r\n\r\n  private updateDividerState(divider: HTMLElement, state: string) {\r\n    divider.classList.remove(...Object.values(this.stateClasses));\r\n    if (state in this.stateClasses) {\r\n      divider.classList.add(this.stateClasses[state]);\r\n    }\r\n  }\r\n\r\n  componentDidRender() {\r\n    this.addDividers();\r\n  }\r\n\r\n  private readonly returnCSSClasses = () => {\r\n    const classes = {\r\n      'process-indicator': true,\r\n      [`process-indicator--vertical`]: this.direction === 'vertical',\r\n    };\r\n\r\n    return classes;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host data-vertical={this.direction === 'vertical'}>\r\n        <ul class={this.returnCSSClasses()}>\r\n          <slot />\r\n        </ul>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"names":["DcUiProcessIndicator","activeStep","stateClasses","active","complete","returnCSSClasses","this","direction","stepElements","el","querySelectorAll","updateStepStates","stepIndex","steps","Promise","all","Array","from","map","step","resetStepState","i","length","setAttribute","removeAttribute","updateDividers","goToStep","reject","stepChangedHandler","goToNextStep","goToPreviousStep","resetSteps","resolve","getActiveStep","requestAnimationFrame","dcChange","emit","componentDidLoad","forEach","element","shadowRoot","firstElementChild","classList","add","addDividers","index","elements","divider","document","createElement","className","updateDividerState","getAttribute","parentElement","insertBefore","nextSibling","nextElementSibling","contains","state","remove","Object","values","componentDidRender","render","h","Host","key","class"],"sourceRoot":""}
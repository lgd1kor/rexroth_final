{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LGD1KOR\\\\Desktop\\\\react\\\\my-app\\\\src\\\\WebViewer3D.js\",\n  _s = $RefreshSig$();\n// /* global psol */\n// import React, { useEffect } from 'react';\n// import $ from 'jquery';\n\n// const WebViewer3D = ({ apiData }) => {\n//     useEffect(() => {\n//         if (!apiData) return;\n\n//         const loadScript = (src) => {\n//             return new Promise((resolve, reject) => {\n//                 const script = document.createElement('script');\n//                 script.src = src;\n//                 script.onload = () => resolve();\n//                 script.onerror = () => reject();\n//                 document.head.appendChild(script);\n//             });\n//         };\n\n//         const initViewer = async () => {\n//             try {\n//                 await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\n//                 await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\n//                 const radialMenuActions = [{\n//                     name: 'menu_shading',\n//                     subActions: ['actLine', 'actShade', 'actShadeLine']\n//                  }, {\n//                   name: 'menu_rotation',\n//                   subActions: [\n//                         'actFront',\n//                         'actBack',\n//                         'actLeft',\n//                         'actRight',\n//                         'actTop',\n//                         'actBottom',\n//                         'actIsometric',\n//                         'actAnimate'\n//                     ]\n//                  }, {\n//                     name: 'menu_vr',\n//                     subActions: [\n//                         'actAnaglyph',\n//                         'actBluebox',\n//                         'actDreamocHD3',\n//                         'actFullscreen',\n//                         'actPseudoFullscreen',\n//                     ]\n//                  }, {\n//                     name: 'menu_special',\n//                     subActions: [\n//                         'actZoomall',\n//                         'actCut',\n//                         'actCustomDimensions',\n//                         'actExplosion',\n//                         'actLabels',\n//                         'actScreenShot'\n//                     ]\n//                  }];\n//                  const favoriteActions = [\n//                     \"actAnimate\",\n//                     \"actCustomDimensions\",\n//                     \"actEnableHotSpots\",\n//                     \"actHotSpots\",\n//                     \"actLine\",\n//                     \"actShadeLine\",\n//                     \"actEnv\",\n//                     \"actToggleRotationMode\",\n//                  ];\n//                 const settings = {\n//                     $container: $('#viewer'),\n//                     viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\n//                     webglViewerSettings: {\n//                         devicePixelRatio: window.devicePixelRatio,\n//                         radialMenuActions: radialMenuActions,\n//                         favoriteActions: favoriteActions,\n//                         ColorTL: '#cccccc',\n//                         ColorTR: '#cccccc',\n//                         ColorML: '#eeeeee',\n//                         ColorMR: '#eeeeee',\n//                         ColorBL: '#ffffff',\n//                         ColorBR: '#ffffff',\n//                         logoTexture: 'BR.jpg',\n//                         logoScaleFactor: 1,\n//                         logoMixFactor: 0.5,\n//                         logoScaleModeFill:true,\n//                         material: {\n//                             preset: 'pcloud'\n//                         },\n//                         measureGrid: {\n//                             colors: {\n//                                 dimensions: '#000000',\n//                                 outline: '#0000ff',\n//                                 grid: '#b3b3b3'\n//                             }\n//                         },\n//                         helperOptions: {\n//                             gridOn: false,\n//                             axisOn: false\n//                         },\n//                         shadeMode: psol.components.WebViewer3D.ShadeModes.ShadeAndLines,\n//                         enableEditableDimensions: true,\n//                         showPartNameTooltip: false\n//                     }\n//                  };\n\n//                 const viewer = new psol.components.WebViewer3D(settings);\n\n//                 viewer.show().then(() => {\n//                     viewer.loadByUrl(apiData);  // Use the API data here\n//                 });\n//             } catch (error) {\n//                 console.error('Error loading PSOL scripts', error);\n//             }\n//         };\n\n//         initViewer();\n//     }, [apiData]);\n\n//     return (\n//         <div id=\"viewer\" style={{ width: '640px', height: '400px' }}></div>\n//     );\n// };\n\n// export default WebViewer3D;\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebViewer3D = ({\n  apiData,\n  reloadViewer\n}) => {\n  _s();\n  const viewerRef = useRef(null);\n  useEffect(() => {\n    const loadViewer = async () => {\n      if (!apiData) return;\n      try {\n        await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\n        await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\n        const radialMenuActions = [{\n          name: 'menu_shading',\n          subActions: ['actLine', 'actShade', 'actShadeLine']\n        }, {\n          name: 'menu_rotation',\n          subActions: ['actFront', 'actBack', 'actLeft', 'actRight', 'actTop', 'actBottom', 'actIsometric', 'actAnimate']\n        }, {\n          name: 'menu_vr',\n          subActions: ['actAnaglyph', 'actBluebox', 'actDreamocHD3', 'actFullscreen', 'actPseudoFullscreen']\n        }, {\n          name: 'menu_special',\n          subActions: ['actZoomall', 'actCut', 'actCustomDimensions', 'actExplosion', 'actLabels', 'actScreenShot']\n        }];\n        const favoriteActions = [\"actAnimate\", \"actCustomDimensions\", \"actEnableHotSpots\", \"actHotSpots\", \"actLine\", \"actShadeLine\", \"actEnv\", \"actToggleRotationMode\"];\n        const settings = {\n          viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\n          webglViewerSettings: {\n            radialMenuActions: radialMenuActions,\n            favoriteActions: favoriteActions,\n            ColorTL: '#cccccc',\n            ColorTR: '#cccccc',\n            ColorML: '#eeeeee',\n            ColorMR: '#eeeeee',\n            ColorBL: '#ffffff',\n            ColorBR: '#ffffff',\n            logoTexture: 'BR.jpg',\n            logoScaleFactor: 1,\n            logoMixFactor: 0.5,\n            logoScaleModeFill: true,\n            material: {\n              preset: 'pcloud'\n            },\n            measureGrid: {\n              colors: {\n                dimensions: '#000000',\n                outline: '#0000ff',\n                grid: '#b3b3b3'\n              }\n            },\n            helperOptions: {\n              gridOn: false,\n              axisOn: false\n            },\n            shadeMode: psol.components.WebViewer3D.ShadeModes.ShadeAndLines,\n            enableEditableDimensions: true,\n            showPartNameTooltip: false\n          }\n        };\n        const viewer = new psol.components.WebViewer3D(settings);\n        viewerRef.current = viewer; // Store viewer instance in ref\n\n        viewer.show().then(() => {\n          if (apiData) {\n            viewer.loadByUrl(apiData); // Load initial data\n          }\n        });\n      } catch (error) {\n        console.error('Error loading PSOL scripts or initializing viewer:', error);\n      }\n    };\n    const loadScript = src => {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = src;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    };\n    loadViewer();\n    return () => {\n      // Clean up any resources (if needed)\n    };\n  }, [apiData]); // Depend on apiData to trigger viewer initialization\n\n  useEffect(() => {\n    // When reloadViewer changes (e.g., due to select box change in parent component),\n    // reload the viewer with new apiData\n    if (reloadViewer && viewerRef.current) {\n      viewerRef.current.loadByUrl(apiData);\n    }\n  }, [reloadViewer, apiData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"viewer\",\n    style: {\n      width: '640px',\n      height: '400px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => reloadViewer && viewerRef.current.loadByUrl(apiData),\n      children: \"Update Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(WebViewer3D, \"qqpi0N7kZujjbfLAErQN6q3jX7M=\");\n_c = WebViewer3D;\nexport default WebViewer3D;\nvar _c;\n$RefreshReg$(_c, \"WebViewer3D\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","WebViewer3D","apiData","reloadViewer","_s","viewerRef","loadViewer","loadScript","radialMenuActions","name","subActions","favoriteActions","settings","viewerBackendType","psol","components","ViewerBackends","WebGL","webglViewerSettings","ColorTL","ColorTR","ColorML","ColorMR","ColorBL","ColorBR","logoTexture","logoScaleFactor","logoMixFactor","logoScaleModeFill","material","preset","measureGrid","colors","dimensions","outline","grid","helperOptions","gridOn","axisOn","shadeMode","ShadeModes","ShadeAndLines","enableEditableDimensions","showPartNameTooltip","viewer","current","show","then","loadByUrl","error","console","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","id","style","width","height","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LGD1KOR/Desktop/react/my-app/src/WebViewer3D.js"],"sourcesContent":["// /* global psol */\r\n// import React, { useEffect } from 'react';\r\n// import $ from 'jquery';\r\n\r\n// const WebViewer3D = ({ apiData }) => {\r\n//     useEffect(() => {\r\n//         if (!apiData) return;\r\n\r\n//         const loadScript = (src) => {\r\n//             return new Promise((resolve, reject) => {\r\n//                 const script = document.createElement('script');\r\n//                 script.src = src;\r\n//                 script.onload = () => resolve();\r\n//                 script.onerror = () => reject();\r\n//                 document.head.appendChild(script);\r\n//             });\r\n//         };\r\n\r\n//         const initViewer = async () => {\r\n//             try {\r\n//                 await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\r\n//                 await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\r\n//                 const radialMenuActions = [{\r\n//                     name: 'menu_shading',\r\n//                     subActions: ['actLine', 'actShade', 'actShadeLine']\r\n//                  }, {\r\n//                   name: 'menu_rotation',\r\n//                   subActions: [\r\n//                         'actFront',\r\n//                         'actBack',\r\n//                         'actLeft',\r\n//                         'actRight',\r\n//                         'actTop',\r\n//                         'actBottom',\r\n//                         'actIsometric',\r\n//                         'actAnimate'\r\n//                     ]\r\n//                  }, {\r\n//                     name: 'menu_vr',\r\n//                     subActions: [\r\n//                         'actAnaglyph',\r\n//                         'actBluebox',\r\n//                         'actDreamocHD3',\r\n//                         'actFullscreen',\r\n//                         'actPseudoFullscreen',\r\n//                     ]\r\n//                  }, {\r\n//                     name: 'menu_special',\r\n//                     subActions: [\r\n//                         'actZoomall',\r\n//                         'actCut',\r\n//                         'actCustomDimensions',\r\n//                         'actExplosion',\r\n//                         'actLabels',\r\n//                         'actScreenShot'\r\n//                     ]\r\n//                  }];\r\n//                  const favoriteActions = [\r\n//                     \"actAnimate\",\r\n//                     \"actCustomDimensions\",\r\n//                     \"actEnableHotSpots\",\r\n//                     \"actHotSpots\",\r\n//                     \"actLine\",\r\n//                     \"actShadeLine\",\r\n//                     \"actEnv\",\r\n//                     \"actToggleRotationMode\",\r\n//                  ];\r\n//                 const settings = {\r\n//                     $container: $('#viewer'),\r\n//                     viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\r\n//                     webglViewerSettings: {\r\n//                         devicePixelRatio: window.devicePixelRatio,\r\n//                         radialMenuActions: radialMenuActions,\r\n//                         favoriteActions: favoriteActions,\r\n//                         ColorTL: '#cccccc',\r\n//                         ColorTR: '#cccccc',\r\n//                         ColorML: '#eeeeee',\r\n//                         ColorMR: '#eeeeee',\r\n//                         ColorBL: '#ffffff',\r\n//                         ColorBR: '#ffffff',\r\n//                         logoTexture: 'BR.jpg',\r\n//                         logoScaleFactor: 1,\r\n//                         logoMixFactor: 0.5,\r\n//                         logoScaleModeFill:true,\r\n//                         material: {\r\n//                             preset: 'pcloud'\r\n//                         },\r\n//                         measureGrid: {\r\n//                             colors: {\r\n//                                 dimensions: '#000000',\r\n//                                 outline: '#0000ff',\r\n//                                 grid: '#b3b3b3'\r\n//                             }\r\n//                         },\r\n//                         helperOptions: {\r\n//                             gridOn: false,\r\n//                             axisOn: false\r\n//                         },\r\n//                         shadeMode: psol.components.WebViewer3D.ShadeModes.ShadeAndLines,\r\n//                         enableEditableDimensions: true,\r\n//                         showPartNameTooltip: false\r\n//                     }\r\n//                  };\r\n\r\n//                 const viewer = new psol.components.WebViewer3D(settings);\r\n\r\n//                 viewer.show().then(() => {\r\n//                     viewer.loadByUrl(apiData);  // Use the API data here\r\n//                 });\r\n//             } catch (error) {\r\n//                 console.error('Error loading PSOL scripts', error);\r\n//             }\r\n//         };\r\n\r\n//         initViewer();\r\n//     }, [apiData]);\r\n    \r\n\r\n//     return (\r\n//         <div id=\"viewer\" style={{ width: '640px', height: '400px' }}></div>\r\n//     );\r\n// };\r\n\r\n// export default WebViewer3D;\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst WebViewer3D = ({ apiData, reloadViewer }) => {\r\n    const viewerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const loadViewer = async () => {\r\n            if (!apiData) return;\r\n\r\n            try {\r\n                await loadScript('webcomponents/8.1.0/api/js/thirdparty.min.js');\r\n                await loadScript('webcomponents/8.1.0/api/js/psol.components.min.js');\r\n\r\n                const radialMenuActions = [\r\n                    {\r\n                        name: 'menu_shading',\r\n                        subActions: ['actLine', 'actShade', 'actShadeLine']\r\n                    },\r\n                    {\r\n                        name: 'menu_rotation',\r\n                        subActions: [\r\n                            'actFront',\r\n                            'actBack',\r\n                            'actLeft',\r\n                            'actRight',\r\n                            'actTop',\r\n                            'actBottom',\r\n                            'actIsometric',\r\n                            'actAnimate'\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'menu_vr',\r\n                        subActions: [\r\n                            'actAnaglyph',\r\n                            'actBluebox',\r\n                            'actDreamocHD3',\r\n                            'actFullscreen',\r\n                            'actPseudoFullscreen',\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'menu_special',\r\n                        subActions: [\r\n                            'actZoomall',\r\n                            'actCut',\r\n                            'actCustomDimensions',\r\n                            'actExplosion',\r\n                            'actLabels',\r\n                            'actScreenShot'\r\n                        ]\r\n                    }\r\n                ];\r\n\r\n                const favoriteActions = [\r\n                    \"actAnimate\",\r\n                    \"actCustomDimensions\",\r\n                    \"actEnableHotSpots\",\r\n                    \"actHotSpots\",\r\n                    \"actLine\",\r\n                    \"actShadeLine\",\r\n                    \"actEnv\",\r\n                    \"actToggleRotationMode\",\r\n                ];\r\n\r\n                const settings = {\r\n                    viewerBackendType: psol.components.WebViewer3D.ViewerBackends.WebGL,\r\n                    webglViewerSettings: {\r\n                        radialMenuActions: radialMenuActions,\r\n                        favoriteActions: favoriteActions,\r\n                        ColorTL: '#cccccc',\r\n                        ColorTR: '#cccccc',\r\n                        ColorML: '#eeeeee',\r\n                        ColorMR: '#eeeeee',\r\n                        ColorBL: '#ffffff',\r\n                        ColorBR: '#ffffff',\r\n                        logoTexture: 'BR.jpg',\r\n                        logoScaleFactor: 1,\r\n                        logoMixFactor: 0.5,\r\n                        logoScaleModeFill: true,\r\n                        material: {\r\n                            preset: 'pcloud'\r\n                        },\r\n                        measureGrid: {\r\n                            colors: {\r\n                                dimensions: '#000000',\r\n                                outline: '#0000ff',\r\n                                grid: '#b3b3b3'\r\n                            }\r\n                        },\r\n                        helperOptions: {\r\n                            gridOn: false,\r\n                            axisOn: false\r\n                        },\r\n                        shadeMode: psol.components.WebViewer3D.ShadeModes.ShadeAndLines,\r\n                        enableEditableDimensions: true,\r\n                        showPartNameTooltip: false\r\n                    }\r\n                };\r\n\r\n                const viewer = new psol.components.WebViewer3D(settings);\r\n                viewerRef.current = viewer; // Store viewer instance in ref\r\n\r\n                viewer.show().then(() => {\r\n                    if (apiData) {\r\n                        viewer.loadByUrl(apiData); // Load initial data\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading PSOL scripts or initializing viewer:', error);\r\n            }\r\n        };\r\n\r\n        const loadScript = (src) => {\r\n            return new Promise((resolve, reject) => {\r\n                const script = document.createElement('script');\r\n                script.src = src;\r\n                script.onload = resolve;\r\n                script.onerror = reject;\r\n                document.head.appendChild(script);\r\n            });\r\n        };\r\n\r\n        loadViewer();\r\n\r\n        return () => {\r\n            // Clean up any resources (if needed)\r\n        };\r\n    }, [apiData]); // Depend on apiData to trigger viewer initialization\r\n\r\n    useEffect(() => {\r\n        // When reloadViewer changes (e.g., due to select box change in parent component),\r\n        // reload the viewer with new apiData\r\n        if (reloadViewer && viewerRef.current) {\r\n            viewerRef.current.loadByUrl(apiData);\r\n        }\r\n    }, [reloadViewer, apiData]);\r\n\r\n    return (\r\n        <div id=\"viewer\" style={{ width: '640px', height: '400px' }}>\r\n            {/* Add an \"Update Preview\" button */}\r\n            <button onClick={() => reloadViewer && viewerRef.current.loadByUrl(apiData)}>\r\n                Update Preview\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WebViewer3D;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,WAAW,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACJ,OAAO,EAAE;MAEd,IAAI;QACA,MAAMK,UAAU,CAAC,8CAA8C,CAAC;QAChE,MAAMA,UAAU,CAAC,mDAAmD,CAAC;QAErE,MAAMC,iBAAiB,GAAG,CACtB;UACIC,IAAI,EAAE,cAAc;UACpBC,UAAU,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,cAAc;QACtD,CAAC,EACD;UACID,IAAI,EAAE,eAAe;UACrBC,UAAU,EAAE,CACR,UAAU,EACV,SAAS,EACT,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY;QAEpB,CAAC,EACD;UACID,IAAI,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"version":3,"file":"static/js/6495.822cf30a.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-nav-breadcrumb/dc-ui-header-nav-breadcrumb.scss?tag=dc-ui-header-nav-breadcrumb&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header-nav-breadcrumb/dc-ui-header-nav-breadcrumb.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",":host {\r\n  display: block;\r\n}\r\n\r\n.breadcrumb {\r\n  ol {\r\n    display: flex;\r\n    align-items: center;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n}\r\n\r\n.breadcrumb-item {\r\n  display: flex;\r\n  align-items: center;\r\n  color: $color-grey-06;\r\n  @include font-style('mid-size-text');\r\n\r\n  a {\r\n    color: inherit;\r\n    text-decoration: none;\r\n\r\n    &:hover {\r\n      color: $color-dark-blue-02;\r\n      text-decoration: underline;\r\n    }\r\n\r\n    &:focus-visible {\r\n      outline: 2px solid $color-turquoise-03;\r\n      outline-offset: 2px;\r\n    }\r\n  }\r\n\r\n  &.current {\r\n    color: $color-dark-blue-02;\r\n    @include font-style('strong-mid-size-text');\r\n  }\r\n}\r\n\r\n@include media-max('xl') {\r\n  // hide all items\r\n  .breadcrumb-item {\r\n    display: none;\r\n  }\r\n\r\n  .breadcrumb-item {\r\n    &.current {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  // show the previous item(level)\r\n  .breadcrumb-item:nth-last-child(2) {\r\n    display: flex;\r\n  }\r\n}\r\n","import { Component, h, State, Method, Event, EventEmitter, Prop } from '@stencil/core';\r\nimport { isBreakpointSmaller } from '../../../utils';\r\n\r\n// Add this interface near the top of the file\r\ninterface BreadcrumbItem {\r\n  label?: string;\r\n  isCurrent: boolean;\r\n  isRoot: boolean;\r\n}\r\n\r\n@Component({\r\n  tag: 'dc-ui-header-nav-breadcrumb',\r\n  styleUrl: 'dc-ui-header-nav-breadcrumb.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeaderNavBreadcrumb {\r\n  @Prop() menuName: string = 'Menu';\r\n\r\n  @State() items: BreadcrumbItem[] = [];\r\n  @State() isMobile: boolean = this.checkIfMobile();\r\n\r\n  // Add event emitter for click events\r\n  @Event() breadcrumbClick: EventEmitter<{ index: number; label: string; isRoot: boolean }>;\r\n\r\n  private checkIfMobile(): boolean {\r\n    return isBreakpointSmaller('md');\r\n  }\r\n\r\n  componentDidLoad() {\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  private handleResize = () => {\r\n    this.isMobile = this.checkIfMobile();\r\n  };\r\n\r\n  private handleClick = (index: number, label: string, isRoot: boolean) => {\r\n    this.breadcrumbClick.emit({ index, label, isRoot });\r\n  };\r\n\r\n  @Method()\r\n  async addItem(label?: string, isRoot: boolean = false) {\r\n    // Remove current flag from previous current item\r\n    this.items = this.items.map((item) => ({\r\n      ...item,\r\n      isCurrent: false,\r\n    }));\r\n\r\n    // check first if there is already an isRoot item\r\n    const isRootItemAlreadyAdded = this.items.some((item) => item.isRoot);\r\n    if (isRootItemAlreadyAdded && isRoot) return;\r\n\r\n    // Add new item as current\r\n    this.items = [\r\n      ...this.items,\r\n      {\r\n        label: isRoot ? this.menuName : label,\r\n        isCurrent: isRoot ? false : true,\r\n        isRoot,\r\n      },\r\n    ];\r\n  }\r\n\r\n  @Method()\r\n  async removeItem(index: number) {\r\n    if (index < 0 || index >= this.items.length) return;\r\n\r\n    const newItems = this.items.filter((_, i) => i !== index);\r\n\r\n    // Make the last item current\r\n    if (newItems.length > 0) {\r\n      newItems[newItems.length - 1].isCurrent = true;\r\n    }\r\n\r\n    this.items = newItems;\r\n  }\r\n\r\n  @Method()\r\n  async removeAllItemsFrom(index: number) {\r\n    this.items = this.items.filter((_, i) => i < index);\r\n\r\n    // change the last item to current\r\n    if (this.items.length > 0) {\r\n      this.items[this.items.length - 1].isCurrent = true;\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async clear() {\r\n    this.items = [];\r\n  }\r\n\r\n  render() {\r\n    if (this.items.length === 0) return null;\r\n\r\n    return (\r\n      <nav\r\n        class=\"breadcrumb\"\r\n        aria-label=\"Breadcrumb\">\r\n        <ol>\r\n          {this.items.map((item, index) => (\r\n            <li\r\n              class={{\r\n                'breadcrumb-item': true,\r\n                current: item.isCurrent,\r\n              }}>\r\n              <dc-ui-header-nav-breadcrumb-item\r\n                label={item.label}\r\n                isCurrent={item.isCurrent}\r\n                isRoot={item.isRoot}\r\n                onClick={() => !item.isCurrent && this.handleClick(index, item.label, item.isRoot)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeaderNavBreadcrumb","handleResize","this","isMobile","checkIfMobile","handleClick","index","label","isRoot","breadcrumbClick","emit","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","addItem","arguments","length","undefined","items","map","item","Object","assign","isCurrent","some","menuName","removeItem","newItems","filter","_","i","removeAllItemsFrom","clear","render","h","class","current","onClick","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
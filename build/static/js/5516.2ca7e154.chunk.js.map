{"version":3,"file":"static/js/5516.2ca7e154.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/a11y.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/text-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakpointCustom.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/checkSlotContent.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-textarea-wrapper/textarea-utils.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-textarea-wrapper/textarea-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-textarea-wrapper/dc-ui-textarea-wrapper.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/font.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/getStateColors.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/common/state-message/state-message.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/styles/form-state-color-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/common/state-message/state-message-styles.ts"],"sourcesContent":["import { AriaAttributes } from '../types';\r\n\r\nexport const removeAttribute = (el: HTMLElement, attributeName: string): void => {\r\n  el.removeAttribute(attributeName);\r\n};\r\n\r\nexport const setAttribute = (el: HTMLElement, attributeName: string, attributeValue = ''): void => {\r\n  el.setAttribute(attributeName, attributeValue);\r\n};\r\n\r\nexport type SetAriaAttributesOptions = {\r\n  label?: string;\r\n  message?: string;\r\n};\r\n\r\nexport const parseJSONAttribute = <T>(attribute: T | string): T => {\r\n  return typeof attribute === 'string'\r\n    ? // input is potentially JSON parsable string, e.g. \"{ aria-label: 'Some label' }\"\r\n      JSON.parse(\r\n        attribute\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([\\w-]+)[\\s\"]?:/g, '\"$1\":') // wrap keys in double quotes\r\n      )\r\n    : // input is object, e.g. { aria-label: 'Some label' }\r\n      attribute;\r\n};\r\n\r\nexport const setAriaAttributes = (el: HTMLElement, opts: SetAriaAttributesOptions): void => {\r\n  const { label, message } = opts;\r\n  if (label) {\r\n    setAttribute(el, 'aria-label', `${label}${message ? `. ${message}` : ''}`);\r\n  }\r\n};\r\n\r\nexport const parseAndGetAriaAttributes = (\r\n  rawAttributes: AriaAttributes | string\r\n): AriaAttributes => {\r\n  if (rawAttributes) {\r\n    const attributes = parseJSONAttribute(rawAttributes);\r\n    const attributeKeys = Object.keys(attributes);\r\n\r\n    // convert booleans to strings so that values are properly set and not just result in attributes without a value when true in jsx\r\n    for (const key of attributeKeys) {\r\n      if (typeof attributes[key] === 'boolean') {\r\n        attributes[key] = `${attributes[key]}`;\r\n      }\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n};\r\n","export const FULL_TEXT_STYLES = {\r\n  'h-superbig': {\r\n    lg: {\r\n      fontSize: '72px',\r\n      lineHeight: '90px',\r\n    },\r\n    md: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    base: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'h-big': {\r\n    lg: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    md: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    base: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h1: {\r\n    lg: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    md: {\r\n      fontSize: '36px',\r\n      lineHeight: '48px',\r\n    },\r\n    base: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h2: {\r\n    lg: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n    },\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h3: {\r\n    lg: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n    },\r\n    base: {\r\n      fontSize: '24px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h4: {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h5: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h6: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-text': {\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-additional-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'intro-text': {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n    },\r\n  },\r\n  'text-line-spacing-big': {\r\n    base: {\r\n      fontSize: '18px',\r\n      lineHeight: '28px',\r\n    },\r\n  },\r\n  text: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'strong-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'strong-mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n  'strong-small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'btn-small': {\r\n    base: {\r\n      fontSize: '0.75rem',\r\n      lineHeight: '1rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '20px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-large': {\r\n    base: {\r\n      fontSize: '1.25rem',\r\n      lineHeight: '1.375rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'link-small': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'link-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'label-checkbox': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'label-textarea': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'label-input': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      letterSpacing: '0.32px',\r\n      lineHeight: '13px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'state-message': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { JssStyle, Styles } from 'jss';\r\nimport { TBreakpointNames, mediaQueryMin } from './mediaQuery';\r\nimport { FULL_TEXT_STYLES } from '../variables';\r\n\r\nexport const BREAKPOINTS = ['base', 'xs', 'sm', 'md', 'lg', 'xl'] as const;\r\nexport type BreakpointKey = (typeof BREAKPOINTS)[number];\r\nexport type BreakpointValues<T> = {\r\n  [key in BreakpointKey]?: T;\r\n} & {\r\n  base: T;\r\n};\r\n\r\n// string is needed in order to pass and parse objects via prop decorator\r\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\r\nexport type BreakpointValue = string | number | boolean;\r\n\r\nexport const parseJSON = (\r\n  prop: BreakpointCustomizable<BreakpointValue>\r\n): BreakpointValues<BreakpointValue> | BreakpointValue => {\r\n  if (typeof prop === 'string') {\r\n    try {\r\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\r\n      return JSON.parse(\r\n        prop\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\r\n      );\r\n    } catch {\r\n      // prop is string, e.g. \"block\" or \"inline\"\r\n      return prop;\r\n    }\r\n  } else {\r\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\r\n    return prop;\r\n  }\r\n};\r\n\r\n// do we need that ?\r\nexport const addImportantToRule = (value: any): string => `${value} !important`;\r\n\r\n// do we need that ?\r\nexport const addImportantToEachRule = (input: JssStyle): JssStyle => {\r\n  return Object.entries(input).reduce(\r\n    (result, [key, value]) =>\r\n      value === null\r\n        ? result\r\n        : ((result[key] =\r\n            typeof value === 'object'\r\n              ? addImportantToEachRule(value as JssStyle)\r\n              : addImportantToRule(value)),\r\n          result),\r\n    {} as JssStyle\r\n  );\r\n};\r\n\r\nexport type GetJssStyleFunction = (value?: any) => JssStyle;\r\nexport type GetJssStyleFunctionWithProp = (value: any, ...args: any[]) => JssStyle;\r\n\r\nexport const buildResponsiveStyles = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunction\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue]\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base) as Styles\r\n          )\r\n      : (getJssStyle(value) as Styles);\r\n\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveStylesWithProps = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunctionWithProp,\r\n  extraProp: string,\r\n  ...args: any[]\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue],\r\n                extraProp,\r\n                ...args\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base, extraProp, ...args) as Styles\r\n          )\r\n      : (getJssStyle(value, extraProp, ...args) as Styles);\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveTextStyles = (styleName: string) => {\r\n  const fontObject = FULL_TEXT_STYLES[styleName];\r\n  if (!fontObject) {\r\n    throw new Error(`Text style ${styleName} does not exist`);\r\n  }\r\n\r\n  let styles = {};\r\n\r\n  // itterate over fontObject\r\n  Object.keys(fontObject).forEach((key) => {\r\n    // check if key is 'base'\r\n    if (key === 'base') {\r\n      styles = {\r\n        ...styles,\r\n        ...fontObject[key],\r\n      };\r\n      return;\r\n    }\r\n\r\n    // get media query from object key\r\n    const mediaQuery = mediaQueryMin(key as any);\r\n\r\n    // add styles from fontObject to mediaQuery\r\n    styles = {\r\n      ...styles,\r\n      [mediaQuery]: {\r\n        ...fontObject[key],\r\n      },\r\n    };\r\n  });\r\n\r\n  return styles;\r\n};\r\n","// function to check the slot content. If more than one element is in the slot, select the element and delete the rest\r\nexport const checkSlotContent = (slot: HTMLElement, selector: string) => {\r\n  if (slot && slot.children.length > 1) {\r\n    const neededElement = slot.querySelector(selector);\r\n    if (neededElement) {\r\n      slot.innerHTML = '';\r\n      slot.appendChild(neededElement);\r\n    }\r\n  }\r\n};\r\n","export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { JssStyle } from 'jss';\r\nimport { color as colorUtils, TValidationState, FULL_TEXT_STYLES } from '../../utils';\r\n\r\nexport const TEXTAREA_LABEL_POSITION = ['default', 'above'] as const;\r\nexport type TTextareaLabelPosition = (typeof TEXTAREA_LABEL_POSITION)[number];\r\n\r\nexport const getLabelPositionStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  state: TValidationState\r\n): JssStyle => {\r\n  if (labelPosition === 'default') {\r\n    return {\r\n      position: 'absolute',\r\n      padding: '16px 16px 0',\r\n      inset: state === 'error' ? '2px auto auto 2px' : '2px 2px auto',\r\n      maxWidth: 'calc(100% - 36px)',\r\n      backgroundColor: colorUtils.white,\r\n      transition: 'all 0.2s ease-in-out 0.1s',\r\n    };\r\n  }\r\n\r\n  if (labelPosition === 'above') {\r\n    return {\r\n      display: 'block',\r\n      ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n      marginBottom: '8px',\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLabelTextStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  hover: boolean\r\n): JssStyle => {\r\n  if (labelPosition === 'default') {\r\n    if (hover) {\r\n      return {\r\n        ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n      };\r\n    }\r\n\r\n    return {\r\n      ...FULL_TEXT_STYLES['label-textarea'].base,\r\n    };\r\n  }\r\n\r\n  if (labelPosition === 'above') {\r\n    return {\r\n      ...FULL_TEXT_STYLES['label-textarea'].focus,\r\n    };\r\n  }\r\n};\r\n\r\nexport const getTextAreaColors = (\r\n  state: TValidationState,\r\n  disabled: boolean,\r\n  readonly: boolean\r\n): { baseLabelColor: string; baseTextareaColor: string; baseBorderColor: string } => {\r\n  let baseLabelColor;\r\n  let baseTextareaColor;\r\n  let baseBorderColor;\r\n\r\n  if (disabled) {\r\n    baseLabelColor = colorUtils.grey02;\r\n    baseTextareaColor = colorUtils.grey02;\r\n    baseBorderColor = colorUtils.grey02;\r\n\r\n    return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n\r\n  if (readonly) {\r\n    baseLabelColor = colorUtils.grey06;\r\n    baseTextareaColor = colorUtils.darkBlue02;\r\n    baseBorderColor = colorUtils.grey02;\r\n\r\n    return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n\r\n  switch (state) {\r\n    case 'none':\r\n      baseLabelColor = colorUtils.grey06;\r\n      baseTextareaColor = colorUtils.darkBlue02;\r\n      baseBorderColor = colorUtils.grey05;\r\n      return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n    case 'error':\r\n      baseLabelColor = colorUtils.grey06;\r\n      baseTextareaColor = colorUtils.darkBlue02;\r\n      baseBorderColor = colorUtils.red02;\r\n      return { baseLabelColor, baseTextareaColor, baseBorderColor };\r\n  }\r\n};\r\n\r\nexport const getBorderStateStyles = (state: TValidationState, stateColor: string): JssStyle => {\r\n  const baseBorderStyles = {\r\n    borderRadius: '0',\r\n  };\r\n\r\n  switch (state) {\r\n    case 'none':\r\n      return {\r\n        ...baseBorderStyles,\r\n        border: `1px solid ${stateColor}`,\r\n      };\r\n    case 'error':\r\n      return {\r\n        ...baseBorderStyles,\r\n        border: `2px solid ${stateColor}`,\r\n      };\r\n  }\r\n};\r\n","import {\r\n  getCss,\r\n  color as colorUtils,\r\n  getStateColors,\r\n  addImportantToEachRule,\r\n  TValidationState,\r\n} from '../../utils';\r\nimport { getStateMessageStyles } from '../common/state-message/state-message-styles';\r\nimport {\r\n  getBorderStateStyles,\r\n  getLabelPositionStyles,\r\n  getLabelTextStyles,\r\n  getTextAreaColors,\r\n  TTextareaLabelPosition,\r\n} from './textarea-utils';\r\n\r\nexport const createStyles = (\r\n  labelPosition: TTextareaLabelPosition,\r\n  state: TValidationState,\r\n  disabled: boolean,\r\n  readonly: boolean\r\n): string => {\r\n  const { baseLabelColor, baseTextareaColor, baseBorderColor } = getTextAreaColors(\r\n    state,\r\n    disabled,\r\n    readonly\r\n  );\r\n  const stateColor = disabled ? colorUtils.grey02 : getStateColors(state);\r\n  const stateToPass = disabled ? 'none' : state;\r\n\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'block',\r\n      },\r\n      label: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'relative',\r\n\r\n        '&.focus #label-text': {\r\n          paddingTop: labelPosition === 'default' ? '10px' : '0',\r\n          ...getLabelTextStyles(labelPosition, true),\r\n        },\r\n      },\r\n      '#label-container': {\r\n        position: 'relative',\r\n      },\r\n      '#label-text': {\r\n        fontFamily: 'Bosch Sans',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s ease-in-out 0.1s',\r\n        color: baseLabelColor,\r\n        ...getLabelTextStyles(labelPosition, false),\r\n        ...getLabelPositionStyles(labelPosition, state),\r\n      },\r\n      '#max-characters-text, #state-message-text': {\r\n        marginTop: '4px',\r\n        fontFamily: 'Bosch Sans',\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        lineHeight: '13px',\r\n        letterSpacing: '0.32px',\r\n        color: baseTextareaColor,\r\n      },\r\n      '#state-message-text': {\r\n        color: stateColor,\r\n      },\r\n      '::slotted': addImportantToEachRule({\r\n        '&(textarea)': {\r\n          all: 'unset',\r\n          appearance: 'none',\r\n          WebkitAppearance: 'none', // iOS safari\r\n          padding: labelPosition === 'default' ? '26px 16px 16px' : '16px',\r\n          fontFamily: 'Bosch Sans',\r\n          fontSize: '14px',\r\n          lineHeight: '16px',\r\n          letterSpacing: '0.16px',\r\n          color: baseTextareaColor,\r\n          outline: `2px solid transparent`,\r\n          outlineOffset: '-2px',\r\n          border: 'none',\r\n          resize: 'none',\r\n          backgroundColor: colorUtils.white,\r\n          ...getBorderStateStyles(stateToPass, baseBorderColor),\r\n        },\r\n\r\n        '&(textarea:disabled)': {\r\n          cursor: 'not-allowed',\r\n          backgroundColor: colorUtils.white,\r\n        },\r\n\r\n        '&(textarea:hover)': {\r\n          borderColor: stateColor || colorUtils.grey10,\r\n        },\r\n\r\n        '&(textarea:focus)': {\r\n          outlineColor: stateColor || colorUtils.turquoise02,\r\n        },\r\n\r\n        // // needed for Safari\r\n        '&(textarea:focus:not(:focus-visible))': {\r\n          outlineColor: 'transparent',\r\n        },\r\n      }),\r\n    },\r\n    ...getStateMessageStyles(state),\r\n  });\r\n};\r\n","import { Component, h, Host, Prop, Element, forceUpdate } from '@stencil/core';\r\nimport {\r\n  injectCSS,\r\n  injectFont,\r\n  observeAttributes,\r\n  setAriaAttributes,\r\n  checkSlotContent,\r\n  TValidationState,\r\n} from '../../utils';\r\nimport { TTextareaLabelPosition } from './textarea-utils';\r\nimport { createStyles } from './textarea-styles';\r\nimport { StateMessage } from '../common/state-message/state-message';\r\n\r\n@Component({\r\n  tag: 'dc-ui-textarea-wrapper',\r\n  shadow: true,\r\n})\r\nexport class DcUiTextareaWrapper {\r\n  @Element() el: HTMLElement;\r\n  @Prop() label: string;\r\n  @Prop() labelPosition: TTextareaLabelPosition = 'default';\r\n  @Prop() message = '';\r\n  @Prop() validationstate: TValidationState = 'none';\r\n  @Prop() showCharacterCount = false;\r\n\r\n  private textarea: HTMLTextAreaElement;\r\n  private labelEl: HTMLLabelElement;\r\n  maxCharacters: number;\r\n  currentCharacters: number;\r\n\r\n  public componentWillLoad(): void {\r\n    injectFont();\r\n    checkSlotContent(this.el, 'textarea'); // check if textarea is in slot. Delete other elements\r\n    this.textarea = this.el.querySelector('textarea');\r\n    if (this.textarea.maxLength > 0) this.maxCharacters = this.textarea.maxLength; // set max characters if maxlength is set on textarea\r\n    this.observeAttributes(); // once initially\r\n  }\r\n\r\n  public connectedCallback(): void {\r\n    this.observeAttributes(); // on every reconnect\r\n  }\r\n\r\n  private characterCount = (): void => {\r\n    // initial character count on render\r\n    this.setCharacterCount();\r\n\r\n    // event on textarea keyup if max characters is set\r\n    this.textarea.addEventListener('keyup', this.setCharacterCount);\r\n  };\r\n\r\n  private setCharacterCount = (): void => {\r\n    // set current characters\r\n    this.currentCharacters = this.textarea.value.length;\r\n\r\n    // set max characters text\r\n    if (this.maxCharacters > 0) {\r\n      const maxCharactersText = this.el.shadowRoot.querySelector('#max-characters-text');\r\n      maxCharactersText.innerHTML = `${this.currentCharacters}/${this.maxCharacters}`;\r\n    }\r\n  };\r\n\r\n  public componentDidRender(): void {\r\n    setAriaAttributes(this.textarea, {\r\n      label: this.label,\r\n      message: this.message,\r\n    });\r\n\r\n    // check if textarea is not empty or has a placeholder and add focus class to label\r\n    if (this.textarea.value !== '' || this.textarea.placeholder !== '') {\r\n      this.labelEl.classList.add('focus');\r\n    }\r\n\r\n    // event on textarea focus\r\n    this.textarea.addEventListener('focus', () => {\r\n      this.labelEl.classList.add('focus');\r\n    });\r\n\r\n    // event on textarea blur\r\n    this.textarea.addEventListener('blur', () => {\r\n      // remove focus class from label if textarea is empty\r\n      if (this.textarea.value === '' && this.textarea.placeholder === '')\r\n        this.labelEl.classList.remove('focus');\r\n    });\r\n\r\n    // event on textarea keyup if max characters is set\r\n    if (this.maxCharacters > 0 && this.showCharacterCount) {\r\n      this.characterCount();\r\n    }\r\n  }\r\n\r\n  private observeAttributes = (): void => {\r\n    observeAttributes(this.textarea, ['disabled', 'required', 'readonly'], () =>\r\n      forceUpdate(this.el)\r\n    );\r\n  };\r\n\r\n  private onLabelClick = (): void => {\r\n    this.textarea.focus();\r\n  };\r\n\r\n  render() {\r\n    injectCSS(\r\n      this.el,\r\n      createStyles,\r\n      this.labelPosition,\r\n      this.validationstate,\r\n      this.textarea.disabled,\r\n      this.textarea.readOnly\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <label\r\n          onClick={this.onLabelClick}\r\n          ref={(label) => (this.labelEl = label)}>\r\n          <div id=\"label-container\">\r\n            {this.label && (\r\n              <span id=\"label-text\">\r\n                {this.label} {this.textarea.required ? ' *' : ''}\r\n              </span>\r\n            )}\r\n          </div>\r\n          <slot />\r\n        </label>\r\n        {this.maxCharacters > 0 && this.showCharacterCount && (\r\n          <span id=\"max-characters-text\">0/{this.maxCharacters}</span>\r\n        )}\r\n        {this.validationstate !== 'none' && (\r\n          <StateMessage\r\n            state={this.validationstate}\r\n            message={this.message}></StateMessage>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","export const font = {\r\n  url: 'https://dc-webtoolkit.azureedge.net/font/fontStyles.css',\r\n  family: 'Bosch Sans',\r\n  size: {\r\n    small: '1rem',\r\n    medium: '1.5rem',\r\n    large: '2rem',\r\n  },\r\n};\r\n\r\n// inject font into the document\r\nexport function injectFont() {\r\n  // console.log('injectFont -- disabled');\r\n\r\n  // check if the font is already injected\r\n  if (\r\n    document.querySelector(`link[href=\"${font.url}\"]`) ||\r\n    document.querySelector(`link[href*=\"nextgen-web-ui-toolkit.css\"]`)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const link = document.createElement('link');\r\n  link.rel = 'stylesheet';\r\n  link.href = font.url;\r\n  document.head.appendChild(link);\r\n}\r\n","import { TValidationState } from '../../utils';\r\nimport { color } from '../variables';\r\n\r\nconst stateColors = {\r\n  error: color.red02,\r\n};\r\n\r\ntype TStateColors = string | undefined; // form state: \"none\" => undefined\r\n\r\nexport const getStateColors = (state: TValidationState): TStateColors => {\r\n  return stateColors[state];\r\n};\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n","import { FunctionalComponent, h } from '@stencil/core';\r\nimport { TValidationState } from '../../../utils';\r\n\r\ntype StateMessageProps = {\r\n  message?: string;\r\n  state: TValidationState;\r\n};\r\n\r\nexport const StateMessage: FunctionalComponent<StateMessageProps> = ({ message, state }) => {\r\n  return (\r\n    <span class=\"message\">\r\n      {state === 'error' && (\r\n        <dc-ui-icon\r\n          name=\"dc_status_error\"\r\n          color=\"red02\"\r\n          size=\"tiny\"></dc-ui-icon>\r\n      )}\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n","import { TValidationState, color } from '../utils';\r\n\r\ntype TFormStateColorStyles = {\r\n  formStateColor: string | undefined;\r\n};\r\n\r\nconst formStateColors = {\r\n  error: color.red02,\r\n};\r\n\r\nexport const getFormStateColor = (state: TValidationState): TFormStateColorStyles => {\r\n  return { formStateColor: formStateColors[state] };\r\n};\r\n","import { Styles } from 'jss';\r\nimport { FULL_TEXT_STYLES, TValidationState } from '../../../utils';\r\nimport { getFormStateColor } from '../../../styles/form-state-color-styles';\r\n\r\nexport const getStateMessageStyles = (state: TValidationState): Styles<'message'> => {\r\n  return {\r\n    message: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '8px',\r\n      marginTop: '5px',\r\n      color: getFormStateColor(state).formStateColor,\r\n      ...FULL_TEXT_STYLES['state-message'].base,\r\n    },\r\n  };\r\n};\r\n"],"names":["setAriaAttributes","el","opts","label","message","attributeName","attributeValue","arguments","length","undefined","setAttribute","parseAndGetAriaAttributes","rawAttributes","attributes","attribute","JSON","parse","replace","attributeKeys","Object","keys","key","FULL_TEXT_STYLES","lg","fontSize","lineHeight","md","base","fontWeight","h1","h2","h3","h4","h5","h6","text","letterSpacing","textTransform","focus","parseJSON","prop","_a","addImportantToEachRule","input","entries","reduce","result","_ref","value","addImportantToRule","buildResponsiveStyles","rawValue","getJssStyle","filter","breakpointValue","assign","mediaQueryMin","buildResponsiveStylesWithProps","extraProp","_len","args","Array","_key","buildResponsiveTextStyles","styleName","fontObject","Error","styles","forEach","mediaQuery","checkSlotContent","slot","selector","children","neededElement","querySelector","innerHTML","appendChild","color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","getLabelPositionStyles","labelPosition","state","position","padding","inset","maxWidth","backgroundColor","transition","display","marginBottom","getLabelTextStyles","hover","getBorderStateStyles","stateColor","baseBorderStyles","borderRadius","border","createStyles","disabled","readonly","baseLabelColor","baseTextareaColor","baseBorderColor","getTextAreaColors","getStateColors","stateToPass","getCss","flexDirection","paddingTop","fontFamily","cursor","marginTop","all","appearance","WebkitAppearance","outline","outlineOffset","resize","borderColor","outlineColor","getStateMessageStyles","DcUiTextareaWrapper","characterCount","this","setCharacterCount","textarea","addEventListener","currentCharacters","maxCharacters","shadowRoot","observeAttributes","forceUpdate","onLabelClick","componentWillLoad","injectFont","maxLength","connectedCallback","componentDidRender","placeholder","labelEl","classList","add","remove","showCharacterCount","render","injectCSS","validationstate","readOnly","h","Host","onClick","ref","id","required","StateMessage","font","url","family","size","small","medium","large","document","link","createElement","rel","href","head","stateColors","error","breakpoints","xxs","xs","sm","xl","xxl","min","mediaQueryMax","max","class","name","formStateColors","getFormStateColor","formStateColor","alignItems","gap"],"sourceRoot":""}
{"version":3,"file":"static/js/3906.02a5a2dc.chunk.js","mappings":"oKAAaA,EAAmB,CAC9B,aAAc,CACZC,GAAI,CACFC,SAAU,OACVC,WAAY,QAEdC,GAAI,CACFF,SAAU,OACVC,WAAY,QAEdE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhB,QAAS,CACPL,GAAI,CACFC,SAAU,OACVC,WAAY,QAEdC,GAAI,CACFF,SAAU,OACVC,WAAY,QAEdE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBC,GAAI,CACFN,GAAI,CACFC,SAAU,OACVC,WAAY,QAEdC,GAAI,CACFF,SAAU,OACVC,WAAY,QAEdE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBE,GAAI,CACFP,GAAI,CACFC,SAAU,OACVC,WAAY,QAEdE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBG,GAAI,CACFR,GAAI,CACFC,SAAU,OACVC,WAAY,QAEdE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBI,GAAI,CACFL,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBK,GAAI,CACFN,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhBM,GAAI,CACFP,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhB,kBAAmB,CACjBD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhB,6BAA8B,CAC5BD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,SAGhB,aAAc,CACZD,KAAM,CACJH,SAAU,OACVC,WAAY,SAGhB,wBAAyB,CACvBE,KAAM,CACJH,SAAU,OACVC,WAAY,SAGhBU,KAAM,CACJR,KAAM,CACJH,SAAU,OACVC,WAAY,SAGhB,cAAe,CACbE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,SAGhB,gBAAiB,CACfD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,WAGnB,uBAAwB,CACtBT,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,SACfR,WAAY,SAGhB,aAAc,CACZD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,WAGnB,oBAAqB,CACnBT,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,SACfR,WAAY,SAGhB,YAAa,CACXD,KAAM,CACJH,SAAU,UACVC,WAAY,OACZG,WAAY,QAGhB,aAAc,CACZD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZG,WAAY,QAGhB,YAAa,CACXD,KAAM,CACJH,SAAU,UACVC,WAAY,WACZG,WAAY,QAGhB,aAAc,CACZD,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,WAGnB,cAAe,CACbT,KAAM,CACJH,SAAU,OACVC,WAAY,SAGhB,iBAAkB,CAChBE,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,WAGnB,iBAAkB,CAChBT,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,SACfC,cAAe,aAEjBC,MAAO,CACLd,SAAU,OACVC,WAAY,OACZW,cAAe,SACfC,cAAe,cAGnB,cAAe,CACbV,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,SACfC,cAAe,aAEjBC,MAAO,CACLd,SAAU,OACVY,cAAe,SACfX,WAAY,OACZY,cAAe,cAGnB,gBAAiB,CACfV,KAAM,CACJH,SAAU,OACVC,WAAY,OACZW,cAAe,YCtNRG,EACXC,IAEA,GAAoB,kBAATA,EAcT,OAAOA,EAbP,IAEE,OAAOC,KAAKC,MACVF,EACGG,QAAQ,KAAM,KACdA,QAAQ,gCAAiC,W,CAE9C,MAAAC,GAEA,OAAOJ,C,GAYAK,EAA0BC,GAC9BC,OAAOC,QAAQF,GAAOG,QAC3B,CAACC,EAAMC,KAAA,IAAGC,EAAKC,GAAMF,EAAA,OACT,OAAVE,IAEMH,EAAOE,GACU,kBAAVC,EACHR,EAAuBQ,GAVJA,IAAuB,GAAGA,eAW7CC,CAAmBD,IAJzBH,CAKO,GACb,CAAC,GAOQK,EAAwBA,CACnCC,EACAC,KAGA,MAAMJ,EAAQd,EAAUiB,GAoBxB,MAjBmB,kBAAVH,EACHN,OAAOW,KAAKL,GAGTM,QAAQP,GAAgB,SAARA,IAChBH,QACC,CAACC,EAAQU,IAAiCb,OAAAc,OAAAd,OAAAc,OAAA,GACrCX,GAAM,CAET,EAACY,EAAAA,EAAAA,GAAcF,IAA0BH,EACvCJ,EAAMO,OAGVH,EAAYJ,EAAM1B,OAErB8B,EAAYJ,EAED,EAGPU,EAAiC,SAC5CP,EACAC,EACAO,GACc,QAAAC,EAAAC,UAAAC,OAAXC,EAAW,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAXF,EAAWE,EAAA,GAAAJ,UAAAI,GAGd,MAAMjB,EAAQd,EAAUiB,GAqBxB,MAlBmB,kBAAVH,EACHN,OAAOW,KAAKL,GAGTM,QAAQP,GAAgB,SAARA,IAChBH,QACC,CAACC,EAAQU,IAAiCb,OAAAc,OAAAd,OAAAc,OAAA,GACrCX,GAAM,CAET,EAACY,EAAAA,EAAAA,GAAcF,IAA0BH,EACvCJ,EAAMO,GACNI,KACGI,MAGPX,EAAYJ,EAAM1B,KAAMqC,KAAcI,IAEzCX,EAAYJ,EAAOW,KAAcI,EAE1C,EAEaG,EAA6BC,IACxC,MAAMC,EAAanD,EAAiBkD,GACpC,IAAKC,EACH,MAAM,IAAIC,MAAM,cAAcF,oBAGhC,IAAIG,EAAS,CAAC,EAyBd,OAtBA5B,OAAOW,KAAKe,GAAYG,SAASxB,IAE/B,GAAY,SAARA,EAKF,YAJAuB,EAAM5B,OAAAc,OAAAd,OAAAc,OAAA,GACDc,GACAF,EAAWrB,KAMlB,MAAMyB,GAAaf,EAAAA,EAAAA,GAAcV,GAGjCuB,EAAM5B,OAAAc,OAAAd,OAAAc,OAAA,GACDc,GAAM,CACT,CAACE,GAAU9B,OAAAc,OAAA,GACNY,EAAWrB,KAEjB,IAGIuB,CAAM,C,wCCrJFG,EAAQ,CACnBC,WAAY,UAEZC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UAEbC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UAERC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,SAAU,UACVC,SAAU,UACVC,SAAU,UAEVC,MAAO,UACPC,MAAO,UACPC,MAAO,UAEPC,SAAU,UACVC,SAAU,UAEVC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,MAAO,UACPC,MAAO,U,iHCnCT,MAAMC,EAAiB,CACrB,EAAG,SAAU,UAAW,GAAI,UAAW,UAAW,GAAI,UAAW,UAAW,GAAI,UAChF,UAAW,KAGAC,EAAeA,CAC1BC,EACAC,EACAC,KAEOC,EAAAA,EAAAA,GAAO,CACZ,UAAW,CACT,QAAOzE,OAAAc,OAAA,CACL4D,UAAW,eACRC,EAAAA,EAAAA,IACDnE,EAAAA,EAAAA,GAAsB8D,GAAOM,IAAgC,CAC3DC,MAAO,GAAGT,EAAeQ,MACzBE,SAAU,GAAGV,EAAeQ,WAE9BpE,EAAAA,EAAAA,GAAsB+D,GAASQ,IAAoC,CACjEC,WAAY,GAAGZ,EAAeW,WAEhCvE,EAAAA,EAAAA,GAAsBgE,GAASS,IAC7B,MAAMC,GAAYC,EAAAA,EAAAA,GAAgBF,EAAmB,GACrD,MAAO,CACLG,YAAaF,EACbG,aAAcH,EACf,SC5BAI,EAAY,M,yCAEwC,E,YACI,C,CAEnEC,MAAAA,GASE,OARAC,EAAAA,EAAAA,GACEC,KAAKC,KACLrB,EACAoB,KAAKnB,KACLmB,KAAKlB,OACLkB,KAAKC,KAAKlB,QAAU,CAAE5F,KAAM,GAAI+G,GAAI,GAAIhH,GAAI,MAGvCiH,EAAAA,EAAAA,GAAA,QAAAvF,IAAA,4C,wFCtBEwF,EAAqD,CAChEC,IAAK,EACLC,GAAI,IACJJ,GAAI,IACJhH,GAAI,IACJH,GAAI,IACJwH,GAAI,KACJC,IAAK,M,SAYSlF,EAAcmF,GAC5B,MAAO,oBAAoBL,EAAYK,OACzC,C,SAQgBC,EAAcC,GAC5B,MAAO,oBAAoBP,EAAYO,GAAO,MAChD,C,sGCvBajB,EAAmBkB,GAA0BA,EAAK,GAAR,MAK1CC,EAA2BC,GACtCA,EACI,CACEC,SAAU,WACV3B,MAAO,MACP4B,OAAQ,MACRC,OAAQ,OACRC,SAAU,SACVC,KAAM,wBACNC,SAAU,aACVC,WAAY,UAEd,CACEN,SAAU,SACV3B,MAAO,OACP4B,OAAQ,OACRC,OAAQ,EACRC,SAAU,UACVC,KAAM,OACNC,SAAU,OACVC,WAAY,UAGPC,EAAuBC,GAClCA,EACI,CACEC,SAAU,OACVN,SAAU,SACVO,aAAc,WACdJ,WAAY,UAEd,CAAC,EAEMK,EAAwCC,GACnDA,EACI,CACErF,MAAOA,EAAAA,EAAWa,OAClByE,OAAQ,WAEV,CACEtF,MAAOA,EAAAA,EAAWiC,YAuEbsD,EAAoBC,GAC/BA,EACI,CACEC,YAAaD,EACbd,OAAQ,OACR5B,MAAO,QAET,CAAC,EAEM4C,EAAwBC,GACnCA,EACI,CACEA,UAAWA,GAEb,CAAC,EAEMC,EAAyBC,GACpCA,EACI,CACEC,aAA6B,WAAfD,EAA0B,MAAQ,KAElD,CAAC,C","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/text-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakpointCustom.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-grid-item/grid-item-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-grid-item/dc-ui-grid-item.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/styles.ts"],"sourcesContent":["export const FULL_TEXT_STYLES = {\r\n  'h-superbig': {\r\n    lg: {\r\n      fontSize: '72px',\r\n      lineHeight: '90px',\r\n    },\r\n    md: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    base: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'h-big': {\r\n    lg: {\r\n      fontSize: '56px',\r\n      lineHeight: '70px',\r\n    },\r\n    md: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    base: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h1: {\r\n    lg: {\r\n      fontSize: '42px',\r\n      lineHeight: '52px',\r\n    },\r\n    md: {\r\n      fontSize: '36px',\r\n      lineHeight: '48px',\r\n    },\r\n    base: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h2: {\r\n    lg: {\r\n      fontSize: '32px',\r\n      lineHeight: '40px',\r\n    },\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h3: {\r\n    lg: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n    },\r\n    base: {\r\n      fontSize: '24px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h4: {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h5: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  h6: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-text': {\r\n    base: {\r\n      fontSize: '28px',\r\n      lineHeight: '36px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'emphasized-additional-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'intro-text': {\r\n    base: {\r\n      fontSize: '20px',\r\n      lineHeight: '32px',\r\n    },\r\n  },\r\n  'text-line-spacing-big': {\r\n    base: {\r\n      fontSize: '18px',\r\n      lineHeight: '28px',\r\n    },\r\n  },\r\n  text: {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'strong-text': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'strong-mid-size-text': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n  'strong-small-text': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '20px',\r\n      letterSpacing: '0.32px',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  'btn-small': {\r\n    base: {\r\n      fontSize: '0.75rem',\r\n      lineHeight: '1rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '20px',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'btn-large': {\r\n    base: {\r\n      fontSize: '1.25rem',\r\n      lineHeight: '1.375rem',\r\n      fontWeight: '900',\r\n    },\r\n  },\r\n  'link-small': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'link-normal': {\r\n    base: {\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n    },\r\n  },\r\n  'label-checkbox': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '16px',\r\n      letterSpacing: '0.16px',\r\n    },\r\n  },\r\n  'label-textarea': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'label-input': {\r\n    base: {\r\n      fontSize: '14px',\r\n      lineHeight: '24px',\r\n      letterSpacing: '0.16px',\r\n      textTransform: 'uppercase',\r\n    },\r\n    focus: {\r\n      fontSize: '12px',\r\n      letterSpacing: '0.32px',\r\n      lineHeight: '13px',\r\n      textTransform: 'uppercase',\r\n    },\r\n  },\r\n  'state-message': {\r\n    base: {\r\n      fontSize: '12px',\r\n      lineHeight: '13px',\r\n      letterSpacing: '0.32px',\r\n    },\r\n  },\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { JssStyle, Styles } from 'jss';\r\nimport { TBreakpointNames, mediaQueryMin } from './mediaQuery';\r\nimport { FULL_TEXT_STYLES } from '../variables';\r\n\r\nexport const BREAKPOINTS = ['base', 'xs', 'sm', 'md', 'lg', 'xl'] as const;\r\nexport type BreakpointKey = (typeof BREAKPOINTS)[number];\r\nexport type BreakpointValues<T> = {\r\n  [key in BreakpointKey]?: T;\r\n} & {\r\n  base: T;\r\n};\r\n\r\n// string is needed in order to pass and parse objects via prop decorator\r\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\r\nexport type BreakpointValue = string | number | boolean;\r\n\r\nexport const parseJSON = (\r\n  prop: BreakpointCustomizable<BreakpointValue>\r\n): BreakpointValues<BreakpointValue> | BreakpointValue => {\r\n  if (typeof prop === 'string') {\r\n    try {\r\n      // prop is potentially JSON parsable string, e.g. \"{ base: 'block', l: 'inline' }\" or \"true\" or \"false\"\r\n      return JSON.parse(\r\n        prop\r\n          .replace(/'/g, '\"') // convert single quotes to double quotes\r\n          .replace(/[\\s\"]?([a-z]+)[\\s\"]?:([^//])/g, '\"$1\":$2') // wrap keys in double quotes if they don't have them but ignore potential urls\r\n      );\r\n    } catch {\r\n      // prop is string, e.g. \"block\" or \"inline\"\r\n      return prop;\r\n    }\r\n  } else {\r\n    // prop is object, e.g. { base: 'block', l: 'inline' } or number, e.g. 123 or boolean, e.g. true\r\n    return prop;\r\n  }\r\n};\r\n\r\n// do we need that ?\r\nexport const addImportantToRule = (value: any): string => `${value} !important`;\r\n\r\n// do we need that ?\r\nexport const addImportantToEachRule = (input: JssStyle): JssStyle => {\r\n  return Object.entries(input).reduce(\r\n    (result, [key, value]) =>\r\n      value === null\r\n        ? result\r\n        : ((result[key] =\r\n            typeof value === 'object'\r\n              ? addImportantToEachRule(value as JssStyle)\r\n              : addImportantToRule(value)),\r\n          result),\r\n    {} as JssStyle\r\n  );\r\n};\r\n\r\nexport type GetJssStyleFunction = (value?: any) => JssStyle;\r\nexport type GetJssStyleFunctionWithProp = (value: any, ...args: any[]) => JssStyle;\r\n\r\nexport const buildResponsiveStyles = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunction\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue]\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base) as Styles\r\n          )\r\n      : (getJssStyle(value) as Styles);\r\n\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveStylesWithProps = <T>(\r\n  rawValue: BreakpointCustomizable<T>,\r\n  getJssStyle: GetJssStyleFunctionWithProp,\r\n  extraProp: string,\r\n  ...args: any[]\r\n): Styles => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n  const value = parseJSON(rawValue as any);\r\n\r\n  const returnValue =\r\n    typeof value === 'object'\r\n      ? Object.keys(value)\r\n          // base styles are applied on root object, responsive styles are nested within\r\n          // hence it is used as the initial object within reduce function\r\n          .filter((key) => key !== 'base')\r\n          .reduce(\r\n            (result, breakpointValue: TBreakpointNames) => ({\r\n              ...result,\r\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n              [mediaQueryMin(breakpointValue as any)]: getJssStyle(\r\n                value[breakpointValue],\r\n                extraProp,\r\n                ...args\r\n              ) as Styles,\r\n            }),\r\n            getJssStyle(value.base, extraProp, ...args) as Styles\r\n          )\r\n      : (getJssStyle(value, extraProp, ...args) as Styles);\r\n  return returnValue;\r\n};\r\n\r\nexport const buildResponsiveTextStyles = (styleName: string) => {\r\n  const fontObject = FULL_TEXT_STYLES[styleName];\r\n  if (!fontObject) {\r\n    throw new Error(`Text style ${styleName} does not exist`);\r\n  }\r\n\r\n  let styles = {};\r\n\r\n  // itterate over fontObject\r\n  Object.keys(fontObject).forEach((key) => {\r\n    // check if key is 'base'\r\n    if (key === 'base') {\r\n      styles = {\r\n        ...styles,\r\n        ...fontObject[key],\r\n      };\r\n      return;\r\n    }\r\n\r\n    // get media query from object key\r\n    const mediaQuery = mediaQueryMin(key as any);\r\n\r\n    // add styles from fontObject to mediaQuery\r\n    styles = {\r\n      ...styles,\r\n      [mediaQuery]: {\r\n        ...fontObject[key],\r\n      },\r\n    };\r\n  });\r\n\r\n  return styles;\r\n};\r\n","export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { getCss, buildResponsiveStyles, mergeDeep } from '../../utils';\r\nimport { TGridGutterSize, GridGutterSizeType } from '../dc-ui-grid/grid-utils';\r\nimport { pxToRemWithUnit } from '../../utils';\r\nimport {\r\n  TGridItemSize,\r\n  GridItemSizeType,\r\n  TGridItemOffset,\r\n  GridItemOffsetType,\r\n} from './grid-item-utils';\r\n\r\nconst gridItemWidths = [\r\n  0, 8.333333, 16.666667, 25, 33.333333, 41.666667, 50, 58.333333, 66.666667, 75, 83.333333,\r\n  91.666667, 100,\r\n];\r\n\r\nexport const createStyles = (\r\n  size: TGridItemSize,\r\n  offset: TGridItemOffset,\r\n  gutter: TGridGutterSize\r\n): string => {\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        boxSizing: 'border-box',\r\n        ...mergeDeep(\r\n          buildResponsiveStyles(size, (sizeResponsive: GridItemSizeType) => ({\r\n            width: `${gridItemWidths[sizeResponsive]}%`,\r\n            minWidth: `${gridItemWidths[sizeResponsive]}%`,\r\n          })),\r\n          buildResponsiveStyles(offset, (offsetResponsive: GridItemOffsetType) => ({\r\n            marginLeft: `${gridItemWidths[offsetResponsive]}%`,\r\n          })),\r\n          buildResponsiveStyles(gutter, (gutterResponsive: GridGutterSizeType) => {\r\n            const gutterRem = pxToRemWithUnit(gutterResponsive / 2);\r\n            return {\r\n              paddingLeft: gutterRem,\r\n              paddingRight: gutterRem,\r\n            };\r\n          })\r\n        ),\r\n      },\r\n    },\r\n  });\r\n};\r\n","import { Component, h, Element, Prop } from '@stencil/core';\r\nimport { injectCSS } from '../../utils';\r\nimport { createStyles } from './grid-item-styles';\r\nimport { TGridItemSize, TGridItemOffset, GridItemInternalHTMLProps } from './grid-item-utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-grid-item',\r\n  shadow: true,\r\n})\r\nexport class DcUiGridItem {\r\n  @Element() public host!: HTMLElement & GridItemInternalHTMLProps;\r\n  @Prop({ mutable: true, reflect: true }) size?: TGridItemSize = 1;\r\n  @Prop({ mutable: true, reflect: true }) offset?: TGridItemOffset = 0;\r\n\r\n  render() {\r\n    injectCSS(\r\n      this.host,\r\n      createStyles,\r\n      this.size,\r\n      this.offset,\r\n      this.host.gutter || { base: 16, sm: 24, md: 32 }\r\n    );\r\n\r\n    return <slot />;\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n","import type { JssStyle } from 'jss';\r\nimport { color as colorUtils } from '../variables/color';\r\n\r\nexport const IMAGE_STYLE = ['default', 'circle'];\r\nexport type TImageStyle = (typeof IMAGE_STYLE)[number];\r\n\r\nexport const IMAGE_OBJECT_FIT = ['fill', 'contain', 'cover', 'none', 'scale-down'];\r\nexport type TImageObjectFit = (typeof IMAGE_OBJECT_FIT)[number];\r\n\r\nexport const pxToRemWithUnit = (px: number): string => `${px / 16}rem`;\r\n\r\n/**\r\n * Screen reader only styles to hide (text-)contents visually in the browser but grant access for screen readers\r\n */\r\nexport const getScreenReaderJssStyle = (isHidden: boolean): JssStyle =>\r\n  isHidden\r\n    ? {\r\n        position: 'absolute',\r\n        width: '1px',\r\n        height: '1px',\r\n        margin: '-1px',\r\n        overflow: 'hidden',\r\n        clip: 'rect(1px,1px,1px,1px)',\r\n        clipPath: 'inset(50%)',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {\r\n        position: 'static',\r\n        width: 'auto',\r\n        height: 'auto',\r\n        margin: 0,\r\n        overflow: 'visible',\r\n        clip: 'auto',\r\n        clipPath: 'none',\r\n        whiteSpace: 'normal',\r\n      };\r\n\r\nexport const getEllipsisJssStyle = (isEllipsis: boolean): JssStyle =>\r\n  isEllipsis\r\n    ? {\r\n        maxWidth: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }\r\n    : {};\r\n\r\nexport const getDisabledCheckboxRadioTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getDisabledInputTextJssStyle = (isDisabled: boolean): JssStyle =>\r\n  isDisabled\r\n    ? {\r\n        color: colorUtils.grey03,\r\n        cursor: 'default',\r\n      }\r\n    : {\r\n        color: colorUtils.darkBlue02,\r\n      };\r\n\r\nexport const getInputJssStyle = (type: string): JssStyle => {\r\n  let inputStyles = {};\r\n\r\n  switch (type) {\r\n    case 'date':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green01,\r\n      };\r\n      break;\r\n    case 'email':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green02,\r\n      };\r\n      break;\r\n    case 'file':\r\n      inputStyles = {\r\n        borderColor: colorUtils.green03,\r\n      };\r\n      break;\r\n    case 'hidden':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red01,\r\n      };\r\n      break;\r\n    case 'number':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red02,\r\n      };\r\n      break;\r\n    case 'password':\r\n      inputStyles = {\r\n        borderColor: colorUtils.red03,\r\n      };\r\n      break;\r\n    case 'search':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow01,\r\n      };\r\n      break;\r\n    case 'tel':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow02,\r\n      };\r\n      break;\r\n    case 'url':\r\n      inputStyles = {\r\n        borderColor: colorUtils.yellow03,\r\n      };\r\n      break;\r\n    default:\r\n      inputStyles = {\r\n        borderColor: colorUtils.grey05,\r\n      };\r\n  }\r\n\r\n  return inputStyles;\r\n};\r\n\r\nexport const getRatioJssStyle = (ratio: string): JssStyle =>\r\n  ratio\r\n    ? {\r\n        aspectRatio: ratio,\r\n        height: '100%',\r\n        width: '100%',\r\n      }\r\n    : {};\r\n\r\nexport const getObjectFitJssStyle = (objectFit: TImageObjectFit): JssStyle =>\r\n  objectFit\r\n    ? {\r\n        objectFit: objectFit,\r\n      }\r\n    : {};\r\n\r\nexport const getImageStyleJssStyle = (imageStyle: TImageStyle): JssStyle =>\r\n  imageStyle\r\n    ? {\r\n        borderRadius: imageStyle === 'circle' ? '50%' : '0',\r\n      }\r\n    : {};\r\n"],"names":["FULL_TEXT_STYLES","lg","fontSize","lineHeight","md","base","fontWeight","h1","h2","h3","h4","h5","h6","text","letterSpacing","textTransform","focus","parseJSON","prop","JSON","parse","replace","_a","addImportantToEachRule","input","Object","entries","reduce","result","_ref","key","value","addImportantToRule","buildResponsiveStyles","rawValue","getJssStyle","keys","filter","breakpointValue","assign","mediaQueryMin","buildResponsiveStylesWithProps","extraProp","_len","arguments","length","args","Array","_key","buildResponsiveTextStyles","styleName","fontObject","Error","styles","forEach","mediaQuery","color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","gridItemWidths","createStyles","size","offset","gutter","getCss","boxSizing","mergeDeep","sizeResponsive","width","minWidth","offsetResponsive","marginLeft","gutterResponsive","gutterRem","pxToRemWithUnit","paddingLeft","paddingRight","DcUiGridItem","render","injectCSS","this","host","sm","h","breakpoints","xxs","xs","xl","xxl","min","mediaQueryMax","max","px","getScreenReaderJssStyle","isHidden","position","height","margin","overflow","clip","clipPath","whiteSpace","getEllipsisJssStyle","isEllipsis","maxWidth","textOverflow","getDisabledCheckboxRadioTextJssStyle","isDisabled","cursor","getRatioJssStyle","ratio","aspectRatio","getObjectFitJssStyle","objectFit","getImageStyleJssStyle","imageStyle","borderRadius"],"sourceRoot":""}
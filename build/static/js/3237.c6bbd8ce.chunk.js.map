{"version":3,"file":"static/js/3237.c6bbd8ce.chunk.js","mappings":"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","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/breakPointChecker.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header.scss?tag=dc-ui-header&encapsulation=shadow","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-header/dc-ui-header.tsx","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/functions/mediaQuery.ts"],"sourcesContent":["import { TBreakpointNames, breakpoints } from '../../utils';\r\n\r\nexport const getCurrentBreakpoint = (): TBreakpointNames => {\r\n  let currentBreakpoint: TBreakpointNames;\r\n  const width = window.innerWidth;\r\n\r\n  if (width < breakpoints.xs) {\r\n    currentBreakpoint = 'xxs';\r\n  } else if (width < breakpoints.sm) {\r\n    currentBreakpoint = 'xs';\r\n  } else if (width < breakpoints.md) {\r\n    currentBreakpoint = 'sm';\r\n  } else if (width < breakpoints.lg) {\r\n    currentBreakpoint = 'md';\r\n  } else if (width < breakpoints.xl) {\r\n    currentBreakpoint = 'lg';\r\n  } else if (width < breakpoints.xxl) {\r\n    currentBreakpoint = 'xl';\r\n  } else {\r\n    currentBreakpoint = 'xxl';\r\n  }\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is equal to or smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is equal to or smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointEqualOrSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth <= breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is between the specified breakpoints.\r\n *\r\n * @param {TBreakpointNames} min - The start breakpoint.\r\n * @param {TBreakpointNames} max - The end breakpoint.\r\n * @returns {boolean} - True if the current breakpoint is between the specified breakpoints, false otherwise.\r\n */\r\nexport const isBreakpointBetween = (min: TBreakpointNames, max: TBreakpointNames): boolean => {\r\n  return window.innerWidth >= breakpoints[min] && window.innerWidth < breakpoints[max];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly larger than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is larger than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointLarger = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth > breakpoints[breakpoint];\r\n};\r\n\r\n/**\r\n * Helper function to check if the current breakpoint is strictly smaller than the specified breakpoint.\r\n *\r\n * @param {TBreakpointNames} breakpoint - The breakpoint to check against.\r\n * @returns {boolean} - True if the current breakpoint is smaller than the specified breakpoint, false otherwise.\r\n */\r\nexport const isBreakpointSmaller = (breakpoint: TBreakpointNames): boolean => {\r\n  return window.innerWidth < breakpoints[breakpoint];\r\n};\r\n",":host {\r\n  --header-height: 56px;\r\n\r\n  @include media-min(md) {\r\n    --header-height: 80px;\r\n  }\r\n\r\n  --header-max-width: 1920px;\r\n\r\n  @include media-max('xxl', false) {\r\n    --header-max-width: 1440px;\r\n  }\r\n}\r\n\r\n.header-wrapper {\r\n  display: grid;\r\n  grid-auto-flow: row;\r\n  margin: 0 auto;\r\n  background-color: $color-white;\r\n  box-shadow: 0px 15px 30px 0px rgba(214, 222, 227, 0.65);\r\n\r\n  max-width: var(--header-max-width);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1000;\r\n  transition: transform 0.3s ease-in-out;\r\n\r\n  &.header--hidden {\r\n    transform: translateY(-100%);\r\n  }\r\n\r\n  .header-main-nav-wrapper {\r\n    height: 0;\r\n    overflow: hidden;\r\n\r\n    @include media-min(xl) {\r\n      height: auto;\r\n    }\r\n  }\r\n\r\n  &:has(.header-main-nav-wrapper) {\r\n    .header-base-wrapper {\r\n      @include media-min(xl) {\r\n        position: relative;\r\n        &:after {\r\n          content: '';\r\n          position: absolute;\r\n          bottom: 0;\r\n          left: 0;\r\n          right: 0;\r\n          height: 1px;\r\n          background-color: $color-grey-01;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, h, Element, Event, EventEmitter } from '@stencil/core';\r\nimport { isBreakpointEqualOrSmaller, createUuid } from '../../utils';\r\n\r\n@Component({\r\n  tag: 'dc-ui-header',\r\n  styleUrl: 'dc-ui-header.scss',\r\n  shadow: true,\r\n})\r\nexport class DcUiHeader {\r\n  @Element() el!: HTMLElement;\r\n\r\n  private headerRef?: HTMLElement;\r\n  private lastScrollY = 0;\r\n  private headerHeight = 0;\r\n  private metaNavElements: HTMLElement[] = [];\r\n  private metaNavSlot?: HTMLElement;\r\n  private mainNavLanguageSlot?: HTMLElement;\r\n  private originalPositions = new Map<string, number>();\r\n\r\n  @Event() dcHeaderHidden: EventEmitter<void>;\r\n  @Event() dcHeaderShown: EventEmitter<void>;\r\n  @Event() languageButtonMoved: EventEmitter<void>;\r\n\r\n  componentDidLoad() {\r\n    this.headerRef = this.el.shadowRoot?.querySelector('.header-wrapper');\r\n    this.headerHeight = this.headerRef?.offsetHeight || 0;\r\n\r\n    // Get references to elements\r\n    this.metaNavSlot = this.el.querySelector('dc-ui-header-base');\r\n    this.mainNavLanguageSlot = this.el.querySelector('dc-ui-header-main-nav');\r\n\r\n    // Store all meta-nav elements and their positions with unique IDs\r\n    if (this.metaNavSlot) {\r\n      this.metaNavElements = Array.from(\r\n        this.metaNavSlot.querySelectorAll('dc-ui-meta-nav-button, dc-ui-meta-nav-link')\r\n      );\r\n      const children = Array.from(this.metaNavSlot.children);\r\n\r\n      this.metaNavElements.forEach((el) => {\r\n        // Use existing ID or create a unique one\r\n        const id = el.id || `meta-nav-${createUuid()}`;\r\n        if (!el.id) el.id = id;\r\n        this.originalPositions.set(id, children.indexOf(el));\r\n      });\r\n    }\r\n\r\n    // Add event listeners\r\n    window.addEventListener('scroll', this.handleScroll);\r\n    window.addEventListener('resize', this.handleResize);\r\n\r\n    // Initial position check\r\n    this.updateLanguageButtonPosition();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  private readonly handleResize = () => {\r\n    this.updateLanguageButtonPosition();\r\n  };\r\n\r\n  private moveElement(\r\n    element: HTMLElement,\r\n    targetParent: HTMLElement,\r\n    referencePosition: number | null,\r\n    useSmallLayout: boolean\r\n  ) {\r\n    const currentParent = element.parentElement;\r\n\r\n    if (currentParent === targetParent) return;\r\n\r\n    currentParent?.removeChild(element);\r\n\r\n    if (targetParent === this.mainNavLanguageSlot) {\r\n      element.setAttribute('data-in-main-nav', '');\r\n    } else {\r\n      element.removeAttribute('data-in-main-nav');\r\n    }\r\n\r\n    if (!useSmallLayout && targetParent.children.length > 0 && referencePosition !== null) {\r\n      const referenceNode = targetParent.children[referencePosition] || null;\r\n      targetParent.insertBefore(element, referenceNode);\r\n    } else {\r\n      targetParent.appendChild(element);\r\n    }\r\n  }\r\n\r\n  private readonly updateLanguageButtonPosition = () => {\r\n    if (!this.metaNavSlot || !this.mainNavLanguageSlot) return;\r\n\r\n    // Handle language button\r\n    const languageButton = this.metaNavElements.find((el) => el.hasAttribute('language'));\r\n    if (languageButton) {\r\n      const isXlOrSmaller = isBreakpointEqualOrSmaller('xl');\r\n      const targetParent = isXlOrSmaller ? this.mainNavLanguageSlot : this.metaNavSlot;\r\n      const position = this.originalPositions.get(languageButton.id);\r\n      this.moveElement(languageButton, targetParent, position ?? null, isXlOrSmaller);\r\n    }\r\n\r\n    // Handle other meta-nav elements\r\n    const otherMetaNavElements = this.metaNavElements.filter((el) => !el.hasAttribute('language'));\r\n    const isMdOrSmaller = isBreakpointEqualOrSmaller('md');\r\n\r\n    otherMetaNavElements.forEach((element) => {\r\n      const targetParent = isMdOrSmaller ? this.mainNavLanguageSlot : this.metaNavSlot;\r\n      const position = this.originalPositions.get(element.id);\r\n      this.moveElement(element, targetParent, position ?? null, isMdOrSmaller);\r\n    });\r\n\r\n    this.languageButtonMoved.emit();\r\n  };\r\n\r\n  private readonly handleScroll = () => {\r\n    const currentScrollY = window.scrollY;\r\n\r\n    if (currentScrollY > this.headerHeight) {\r\n      if (currentScrollY > this.lastScrollY) {\r\n        // Scrolling down - hide header\r\n        this.headerRef?.classList.add('header--hidden');\r\n        this.dcHeaderHidden.emit();\r\n      } else {\r\n        // Scrolling up - show header\r\n        this.headerRef?.classList.remove('header--hidden');\r\n        this.dcHeaderShown.emit();\r\n      }\r\n    } else {\r\n      // At the top - ensure header is visible\r\n      this.headerRef?.classList.remove('header--hidden');\r\n      this.dcHeaderShown.emit();\r\n    }\r\n\r\n    this.lastScrollY = currentScrollY;\r\n  };\r\n\r\n  render() {\r\n    const hasBase = this.el.querySelector('[slot=\"base\"]');\r\n    const hasMainNav = this.el.querySelector('[slot=\"main-nav\"]');\r\n\r\n    const base = hasBase ? (\r\n      <div class=\"header-base-wrapper\">\r\n        <slot name=\"base\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    const mainNav = hasMainNav ? (\r\n      <div class=\"header-main-nav-wrapper\">\r\n        <slot name=\"main-nav\" />\r\n      </div>\r\n    ) : null;\r\n\r\n    return (\r\n      <header class=\"header-wrapper\">\r\n        {base}\r\n        {mainNav}\r\n\r\n        <slot name=\"popover\" />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","export type TBreakpointNames = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\nexport const breakpoints: { [key in TBreakpointNames]: number } = {\r\n  xxs: 0,\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1920,\r\n};\r\n\r\ntype BPKey<K extends TBreakpointNames> = Extract<TBreakpointNames, K>;\r\n\r\nexport function mediaQueryMin(min: BPKey<'xxs'>): '@media(min-width:0px)';\r\nexport function mediaQueryMin(min: BPKey<'xs'>): `@media(min-width:480px)`;\r\nexport function mediaQueryMin(min: BPKey<'sm'>): '@media(min-width:576px)';\r\nexport function mediaQueryMin(min: BPKey<'md'>): '@media(min-width:768px)';\r\nexport function mediaQueryMin(min: BPKey<'lg'>): '@media(min-width:992px)';\r\nexport function mediaQueryMin(min: BPKey<'xl'>): '@media(min-width:1200px)';\r\nexport function mediaQueryMin(min: BPKey<'xxl'>): '@media(min-width:1920px)';\r\nexport function mediaQueryMin(min: TBreakpointNames): string {\r\n  return `@media(min-width:${breakpoints[min]}px)`;\r\n}\r\n\r\nexport function mediaQueryMax(max: BPKey<'xs'>): '@media(max-width:479px)';\r\nexport function mediaQueryMax(max: BPKey<'sm'>): '@media(max-width:575px)';\r\nexport function mediaQueryMax(max: BPKey<'md'>): '@media(max-width:767px)';\r\nexport function mediaQueryMax(max: BPKey<'lg'>): '@media(max-width:991px)';\r\nexport function mediaQueryMax(max: BPKey<'xl'>): '@media(max-width:1199px)';\r\nexport function mediaQueryMax(max: BPKey<'xxl'>): '@media(max-width:1919px)';\r\nexport function mediaQueryMax(max: Exclude<TBreakpointNames, 'xxs'>): string {\r\n  return `@media(max-width:${breakpoints[max] - 1}px)`;\r\n}\r\n"],"names":["getCurrentBreakpoint","currentBreakpoint","width","window","innerWidth","breakpoints","xs","sm","md","lg","xl","xxl","isBreakpointEqualOrLarger","breakpoint","isBreakpointEqualOrSmaller","isBreakpointSmaller","DcUiHeader","constructor","hostRef","lastScrollY","headerHeight","metaNavElements","originalPositions","Map","handleResize","this","updateLanguageButtonPosition","metaNavSlot","mainNavLanguageSlot","languageButton","find","el","hasAttribute","isXlOrSmaller","targetParent","position","get","id","moveElement","otherMetaNavElements","filter","isMdOrSmaller","forEach","element","languageButtonMoved","emit","handleScroll","currentScrollY","scrollY","_a","headerRef","classList","add","dcHeaderHidden","_b","remove","dcHeaderShown","_c","componentDidLoad","shadowRoot","querySelector","offsetHeight","Array","from","querySelectorAll","children","createUuid","set","indexOf","addEventListener","disconnectedCallback","removeEventListener","referencePosition","useSmallLayout","currentParent","parentElement","removeChild","setAttribute","removeAttribute","length","referenceNode","insertBefore","appendChild","render","hasBase","hasMainNav","base","h","class","name","mainNav","key","xxs","mediaQueryMin","min","mediaQueryMax","max"],"sourceRoot":""}
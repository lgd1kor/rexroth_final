{"version":3,"file":"static/js/6209.3e7e391f.chunk.js","mappings":"uHAAaA,EAAQ,CACnBC,WAAY,UAEZC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UACbC,YAAa,UAEbC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UAERC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,SAAU,UACVC,SAAU,UACVC,SAAU,UAEVC,MAAO,UACPC,MAAO,UACPC,MAAO,UAEPC,SAAU,UACVC,SAAU,UAEVC,WAAY,UACZC,WAAY,UACZC,WAAY,UAEZC,MAAO,UACPC,MAAO,U,2FC1CF,MAAMC,EACXC,IAGA,MAAMC,EAAS,aAAavC,EAAAA,EAAWa,SAEvC,OAAO2B,EAAAA,EAAAA,GAAO,CACZ,UAAW,CACT,QAAS,CACPC,QAAS,SAEX,gBAAeC,OAAAC,OAAAD,OAAAC,OAAAD,OAAAC,OAAA,CACbC,WAAY,OACZC,iBAAkB,OAClBJ,QAAS,OACTK,WAAY,SACZP,OAAQ,QACQ,QAAZD,GAAiC,SAAZA,EAAqB,CAACS,UAAWR,GAAU,CAAC,GACrD,WAAZD,GAAoC,SAAZA,EAAqB,CAACU,aAAcT,GAAU,CAAC,GAAC,CAC5EU,eAAgB,OAChBC,QAAS,QACTC,OAAQ,IACRC,gBAAiB,cACjBC,OAAQ,UACRC,MAAO,OACPC,OAAQ,OACRC,cAAe,YACfxD,MAAOA,EAAAA,EAAWgB,OAClByC,SAAU,WACVC,QAAS,OACTC,UAAW,aAEX,UAAW,CACTP,gBAAiBpD,EAAAA,EAAWW,QAG9B,UAAW,CACT,WAAY,CACViD,QAAS,KACTH,SAAU,WACVI,MAAO,IACPtB,OAAQ,aAAavC,EAAAA,EAAWO,cAChCuD,OAAQ,IAIZ,aAAc,CACZrB,QAAS,OACTsB,aAAc,SACdjB,WAAY,SACZkB,eAAgB,QAChBC,IAAK,OAEL,QAAS,CACPC,WAAY,GAGd,iBAAkB,CAChBC,WAAY,SACZC,SAAU,SACVC,aAAc,WACdC,WAAY,aAKpB,EC3DSC,EAAe,M,+BAa1B,KAAAC,YAAc,KACRC,KAAKC,eACPD,KAAKC,cAAcC,W,0EANvBC,iBAAAA,GACEH,KAAKC,cAAgBD,KAAKI,GAAGC,QAAQ,gB,CASvCC,MAAAA,IACEC,EAAAA,EAAAA,GAAUP,KAAKI,GAAIxC,EAAcoC,KAAKnC,SAEtC,MAAMsB,GACJqB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,yBACRV,KAAKW,OACJH,EAAAA,EAAAA,GAAA,cAAAC,IAAA,yDACc,OACZG,KAAMZ,KAAKW,QAGfH,EAAAA,EAAAA,GAAA,cAAAC,IAAA,2CAAYI,QAAQ,aAAab,KAAKc,QAI1C,OACEN,EAAAA,EAAAA,GAACO,EAAAA,EAAI,CAAAN,IAAA,6CACHD,EAAAA,EAAAA,GAAA,MAAAC,IAAA,2CACEO,QAAShB,KAAKD,YACdkB,MAAOjB,KAAKc,OACXd,KAAKkB,MACJV,EAAAA,EAAAA,GAAA,KACEU,KAAMlB,KAAKkB,KACXR,MAAM,gBACLvB,IAGHqB,EAAAA,EAAAA,GAAA,UACEW,KAAK,SACLT,MAAM,gBACLvB,I","sources":["../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/utils/variables/color.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-context-item/context-item-styles.ts","../node_modules/@boschrexroth/nextgen-web-ui-toolkit/dist/esm/src/components/dc-ui-context-item/dc-ui-context-item.tsx"],"sourcesContent":["export const color = {\r\n  focusColor: '#009cc2',\r\n\r\n  redBrand01: '#ed0007',\r\n  redBrand02: '#d50005',\r\n  redBrand03: '#a80003',\r\n\r\n  turquoise01: '#00c8f7',\r\n  turquoise02: '#00b9e5',\r\n  turquoise03: '#009cc2',\r\n  turquoise04: '#00738f',\r\n  turquoise05: '#004d61',\r\n  turquoise06: '#002936',\r\n\r\n  grey01: '#edf1f4',\r\n  grey02: '#cad6dd',\r\n  grey03: '#a3bac8',\r\n  grey04: '#99aebb',\r\n  grey05: '#7995a6',\r\n  grey06: '#506e81',\r\n  grey07: '#476273',\r\n  grey08: '#354956',\r\n  grey09: '#2d3e48',\r\n  grey10: '#1c272e',\r\n\r\n  green01: '#d9e8d0',\r\n  green02: '#528236',\r\n  green03: '#1a2a11',\r\n\r\n  yellow01: '#f9f3bc',\r\n  yellow02: '#ebd417',\r\n  yellow03: '#2a2604',\r\n\r\n  red01: '#f7bfc8',\r\n  red02: '#da1e28',\r\n  red03: '#54000e',\r\n\r\n  orange01: '#FBE8DA',\r\n  orange02: '#DC641E',\r\n\r\n  darkBlue01: '#d1dce3',\r\n  darkBlue02: '#002b49',\r\n  darkBlue03: '#00243e',\r\n\r\n  white: '#ffffff',\r\n  black: '#000000',\r\n};\r\n\r\nexport type TColor = keyof typeof color;\r\nexport type TBGColor = 'grey01' | 'turquoise01' | 'darkBlue02';\r\n","import { getCss, color as colorUtils } from '../../utils';\r\nimport {TContextItemDividerPosition} from \"./context-item-utils\";\r\n\r\nexport const createStyles = (\r\n  divider: TContextItemDividerPosition,\r\n): string => {\r\n\r\n  const border = `1px solid ${colorUtils.grey03}`;\r\n\r\n  return getCss({\r\n    '@global': {\r\n      ':host': {\r\n        display: 'block',\r\n      },\r\n      '.context-item': {\r\n        appearance: 'none',\r\n        WebkitAppearance: 'none', // iOS safari\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        border: 'none',\r\n        ...(divider === 'top' || divider === 'both' ? {borderTop: border} : {}),\r\n        ...(divider === 'bottom' || divider === 'both' ? {borderBottom: border} : {}),\r\n        textDecoration: 'none',\r\n        padding: '0 6px',\r\n        margin: '0',\r\n        backgroundColor: 'transparent',\r\n        cursor: 'pointer',\r\n        width: '100%',\r\n        height: '32px',\r\n        textTransform: 'uppercase',\r\n        color: colorUtils.grey06,\r\n        position: 'relative',\r\n        outline: 'none',\r\n        boxSizing: 'border-box',\r\n\r\n        '&:hover': {\r\n          backgroundColor: colorUtils.grey01,\r\n        },\r\n\r\n        '&:focus': {\r\n          '&:before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            inset: '0',\r\n            border: `2px solid ${colorUtils.turquoise03}`,\r\n            zIndex: 3,\r\n          },\r\n        },\r\n\r\n        '&--content': {\r\n          display: 'grid',\r\n          gridAutoFlow: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'start',\r\n          gap: '10px',\r\n\r\n          '& > *': {\r\n            flexShrink: 0,\r\n          },\r\n\r\n          '& > dc-ui-text': {\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            lineHeight: '16px',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n","import {Component, h, Prop, Element, Host} from '@stencil/core';\r\nimport {TIcon} from '../../svg/icons';\r\nimport {injectCSS} from '../../utils';\r\nimport {createStyles} from './context-item-styles';\r\nimport {TContextItemDividerPosition} from \"./context-item-utils\";\r\n\r\n@Component({\r\n  tag: 'dc-ui-context-item',\r\n  shadow: true,\r\n})\r\nexport class DcUiContextItem {\r\n  @Element() el: HTMLElement;\r\n  @Prop() label: string;\r\n  @Prop() icon?: TIcon;\r\n  @Prop() href?: string;\r\n  @Prop() divider?: TContextItemDividerPosition;\r\n\r\n  private parentContext: HTMLDcUiContextElement;\r\n\r\n  connectedCallback(): void {\r\n    this.parentContext = this.el.closest('dc-ui-context');\r\n  }\r\n\r\n  handleClick = (): void => {\r\n    if (this.parentContext) {\r\n      this.parentContext.closeMenu();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    injectCSS(this.el, createStyles, this.divider);\r\n\r\n    const content = (\r\n      <div class=\"context-item--content\">\r\n        {this.icon && (\r\n          <dc-ui-icon\r\n            aria-hidden=\"true\"\r\n            name={this.icon}\r\n          />\r\n        )}\r\n        <dc-ui-text variant=\"btn-small\">{this.label}</dc-ui-text>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <li\r\n          onClick={this.handleClick}\r\n          title={this.label}>\r\n          {this.href ? (\r\n            <a\r\n              href={this.href}\r\n              class=\"context-item\">\r\n              {content}\r\n            </a>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              class=\"context-item\">\r\n              {content}\r\n            </button>\r\n          )}\r\n        </li>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"names":["color","focusColor","redBrand01","redBrand02","redBrand03","turquoise01","turquoise02","turquoise03","turquoise04","turquoise05","turquoise06","grey01","grey02","grey03","grey04","grey05","grey06","grey07","grey08","grey09","grey10","green01","green02","green03","yellow01","yellow02","yellow03","red01","red02","red03","orange01","orange02","darkBlue01","darkBlue02","darkBlue03","white","black","createStyles","divider","border","getCss","display","Object","assign","appearance","WebkitAppearance","alignItems","borderTop","borderBottom","textDecoration","padding","margin","backgroundColor","cursor","width","height","textTransform","position","outline","boxSizing","content","inset","zIndex","gridAutoFlow","justifyContent","gap","flexShrink","whiteSpace","overflow","textOverflow","lineHeight","DcUiContextItem","handleClick","this","parentContext","closeMenu","connectedCallback","el","closest","render","injectCSS","h","key","class","icon","name","variant","label","Host","onClick","title","href","type"],"sourceRoot":""}